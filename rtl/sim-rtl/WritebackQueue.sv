// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module WritebackQueue(
  input          clock,
  input          reset,
  output         io_req_ready,
  input          io_req_valid,
  input  [2:0]   io_req_bits_param,
  input          io_req_bits_voluntary,
  input          io_req_bits_hasData,
  input          io_req_bits_corrupt,
  input  [47:0]  io_req_bits_addr,
  input  [511:0] io_req_bits_data,
  input          io_mem_release_ready,
  output         io_mem_release_valid,
  output [2:0]   io_mem_release_bits_opcode,
  output [2:0]   io_mem_release_bits_param,
  output [2:0]   io_mem_release_bits_size,
  output [3:0]   io_mem_release_bits_source,
  output [47:0]  io_mem_release_bits_address,
  output [255:0] io_mem_release_bits_data,
  output         io_mem_release_bits_corrupt,
  input          io_mem_grant_valid,
  input  [3:0]   io_mem_grant_bits_source,
  input          io_miss_req_conflict_check_0_valid,
  input  [47:0]  io_miss_req_conflict_check_0_bits,
  input          io_miss_req_conflict_check_1_valid,
  input  [47:0]  io_miss_req_conflict_check_1_bits,
  input          io_miss_req_conflict_check_2_valid,
  input  [47:0]  io_miss_req_conflict_check_2_bits,
  input          io_miss_req_conflict_check_3_valid,
  input  [47:0]  io_miss_req_conflict_check_3_bits,
  input          io_miss_req_conflict_check_4_valid,
  input  [47:0]  io_miss_req_conflict_check_4_bits,
  output         io_block_miss_req_0,
  output         io_block_miss_req_1,
  output         io_block_miss_req_2,
  output         io_block_miss_req_3,
  output         io_block_miss_req_4,
  output [5:0]   io_perf_0_value,
  output [5:0]   io_perf_1_value,
  output [5:0]   io_perf_2_value,
  output [5:0]   io_perf_3_value,
  output [5:0]   io_perf_4_value
);

  wire [7:0]   _block_conflict_T_16;
  wire         _entries_7_io_mem_release_valid;
  wire [2:0]   _entries_7_io_mem_release_bits_opcode;
  wire [2:0]   _entries_7_io_mem_release_bits_param;
  wire [3:0]   _entries_7_io_mem_release_bits_source;
  wire [47:0]  _entries_7_io_mem_release_bits_address;
  wire [255:0] _entries_7_io_mem_release_bits_data;
  wire         _entries_7_io_mem_release_bits_corrupt;
  wire         _entries_7_io_primary_ready;
  wire         _entries_7_io_block_addr_valid;
  wire [47:0]  _entries_7_io_block_addr_bits;
  wire         _entries_6_io_mem_release_valid;
  wire [2:0]   _entries_6_io_mem_release_bits_opcode;
  wire [2:0]   _entries_6_io_mem_release_bits_param;
  wire [3:0]   _entries_6_io_mem_release_bits_source;
  wire [47:0]  _entries_6_io_mem_release_bits_address;
  wire [255:0] _entries_6_io_mem_release_bits_data;
  wire         _entries_6_io_mem_release_bits_corrupt;
  wire         _entries_6_io_primary_ready;
  wire         _entries_6_io_block_addr_valid;
  wire [47:0]  _entries_6_io_block_addr_bits;
  wire         _entries_5_io_mem_release_valid;
  wire [2:0]   _entries_5_io_mem_release_bits_opcode;
  wire [2:0]   _entries_5_io_mem_release_bits_param;
  wire [3:0]   _entries_5_io_mem_release_bits_source;
  wire [47:0]  _entries_5_io_mem_release_bits_address;
  wire [255:0] _entries_5_io_mem_release_bits_data;
  wire         _entries_5_io_mem_release_bits_corrupt;
  wire         _entries_5_io_primary_ready;
  wire         _entries_5_io_block_addr_valid;
  wire [47:0]  _entries_5_io_block_addr_bits;
  wire         _entries_4_io_mem_release_valid;
  wire [2:0]   _entries_4_io_mem_release_bits_opcode;
  wire [2:0]   _entries_4_io_mem_release_bits_param;
  wire [3:0]   _entries_4_io_mem_release_bits_source;
  wire [47:0]  _entries_4_io_mem_release_bits_address;
  wire [255:0] _entries_4_io_mem_release_bits_data;
  wire         _entries_4_io_mem_release_bits_corrupt;
  wire         _entries_4_io_primary_ready;
  wire         _entries_4_io_block_addr_valid;
  wire [47:0]  _entries_4_io_block_addr_bits;
  wire         _entries_3_io_mem_release_valid;
  wire [2:0]   _entries_3_io_mem_release_bits_opcode;
  wire [2:0]   _entries_3_io_mem_release_bits_param;
  wire [3:0]   _entries_3_io_mem_release_bits_source;
  wire [47:0]  _entries_3_io_mem_release_bits_address;
  wire [255:0] _entries_3_io_mem_release_bits_data;
  wire         _entries_3_io_mem_release_bits_corrupt;
  wire         _entries_3_io_primary_ready;
  wire         _entries_3_io_block_addr_valid;
  wire [47:0]  _entries_3_io_block_addr_bits;
  wire         _entries_2_io_mem_release_valid;
  wire [2:0]   _entries_2_io_mem_release_bits_opcode;
  wire [2:0]   _entries_2_io_mem_release_bits_param;
  wire [3:0]   _entries_2_io_mem_release_bits_source;
  wire [47:0]  _entries_2_io_mem_release_bits_address;
  wire [255:0] _entries_2_io_mem_release_bits_data;
  wire         _entries_2_io_mem_release_bits_corrupt;
  wire         _entries_2_io_primary_ready;
  wire         _entries_2_io_block_addr_valid;
  wire [47:0]  _entries_2_io_block_addr_bits;
  wire         _entries_1_io_mem_release_valid;
  wire [2:0]   _entries_1_io_mem_release_bits_opcode;
  wire [2:0]   _entries_1_io_mem_release_bits_param;
  wire [3:0]   _entries_1_io_mem_release_bits_source;
  wire [47:0]  _entries_1_io_mem_release_bits_address;
  wire [255:0] _entries_1_io_mem_release_bits_data;
  wire         _entries_1_io_mem_release_bits_corrupt;
  wire         _entries_1_io_primary_ready;
  wire         _entries_1_io_block_addr_valid;
  wire [47:0]  _entries_1_io_block_addr_bits;
  wire         _entries_0_io_mem_release_valid;
  wire [2:0]   _entries_0_io_mem_release_bits_opcode;
  wire [2:0]   _entries_0_io_mem_release_bits_param;
  wire [3:0]   _entries_0_io_mem_release_bits_source;
  wire [47:0]  _entries_0_io_mem_release_bits_address;
  wire [255:0] _entries_0_io_mem_release_bits_data;
  wire         _entries_0_io_mem_release_bits_corrupt;
  wire         _entries_0_io_primary_ready;
  wire         _entries_0_io_block_addr_valid;
  wire [47:0]  _entries_0_io_block_addr_bits;
  wire [7:0]   _alloc_T =
    {_entries_0_io_primary_ready,
     _entries_1_io_primary_ready,
     _entries_2_io_primary_ready,
     _entries_3_io_primary_ready,
     _entries_4_io_primary_ready,
     _entries_5_io_primary_ready,
     _entries_6_io_primary_ready,
     _entries_7_io_primary_ready};
  wire         _io_req_ready_dup_11_T_2 = _block_conflict_T_16 == 8'h0;
  wire         io_req_ready_0 = (|_alloc_T) & _io_req_ready_dup_11_T_2;
  reg  [511:0] req_data_data;
  assign _block_conflict_T_16 =
    {_entries_7_io_block_addr_valid & _entries_7_io_block_addr_bits == io_req_bits_addr,
     _entries_6_io_block_addr_valid & _entries_6_io_block_addr_bits == io_req_bits_addr,
     _entries_5_io_block_addr_valid & _entries_5_io_block_addr_bits == io_req_bits_addr,
     _entries_4_io_block_addr_valid & _entries_4_io_block_addr_bits == io_req_bits_addr,
     _entries_3_io_block_addr_valid & _entries_3_io_block_addr_bits == io_req_bits_addr,
     _entries_2_io_block_addr_valid & _entries_2_io_block_addr_bits == io_req_bits_addr,
     _entries_1_io_block_addr_valid & _entries_1_io_block_addr_bits == io_req_bits_addr,
     _entries_0_io_block_addr_valid & _entries_0_io_block_addr_bits == io_req_bits_addr};
  reg          beatsLeft;
  wire [7:0]   readys_valid =
    {_entries_7_io_mem_release_valid,
     _entries_6_io_mem_release_valid,
     _entries_5_io_mem_release_valid,
     _entries_4_io_mem_release_valid,
     _entries_3_io_mem_release_valid,
     _entries_2_io_mem_release_valid,
     _entries_1_io_mem_release_valid,
     _entries_0_io_mem_release_valid};
  reg  [7:0]   readys_mask;
  wire [7:0]   _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [13:0]  _GEN =
    {_readys_filter_T_1[6:0],
     _entries_7_io_mem_release_valid,
     _entries_6_io_mem_release_valid,
     _entries_5_io_mem_release_valid,
     _entries_4_io_mem_release_valid,
     _entries_3_io_mem_release_valid,
     _entries_2_io_mem_release_valid,
     _entries_1_io_mem_release_valid}
    | {_readys_filter_T_1,
       _entries_7_io_mem_release_valid,
       _entries_6_io_mem_release_valid,
       _entries_5_io_mem_release_valid,
       _entries_4_io_mem_release_valid,
       _entries_3_io_mem_release_valid,
       _entries_2_io_mem_release_valid};
  wire [12:0]  _GEN_0 = _GEN[12:0] | {_readys_filter_T_1[7], _GEN[13:2]};
  wire [10:0]  _GEN_1 = _GEN_0[10:0] | {_readys_filter_T_1[7], _GEN[13], _GEN_0[12:4]};
  wire [7:0]   readys_readys =
    ~({readys_mask[7],
       _readys_filter_T_1[7] | readys_mask[6],
       _GEN[13] | readys_mask[5],
       _GEN_0[12:11] | readys_mask[4:3],
       _GEN_1[10:8] | readys_mask[2:0]} & _GEN_1[7:0]);
  wire         winner_0 = readys_readys[0] & _entries_0_io_mem_release_valid;
  wire         winner_1 = readys_readys[1] & _entries_1_io_mem_release_valid;
  wire         winner_2 = readys_readys[2] & _entries_2_io_mem_release_valid;
  wire         winner_3 = readys_readys[3] & _entries_3_io_mem_release_valid;
  wire         winner_4 = readys_readys[4] & _entries_4_io_mem_release_valid;
  wire         winner_5 = readys_readys[5] & _entries_5_io_mem_release_valid;
  wire         winner_6 = readys_readys[6] & _entries_6_io_mem_release_valid;
  wire         winner_7 = readys_readys[7] & _entries_7_io_mem_release_valid;
  reg          state_0;
  reg          state_1;
  reg          state_2;
  reg          state_3;
  reg          state_4;
  reg          state_5;
  reg          state_6;
  reg          state_7;
  wire         muxState_0 = beatsLeft ? state_0 : winner_0;
  wire         muxState_1 = beatsLeft ? state_1 : winner_1;
  wire         muxState_2 = beatsLeft ? state_2 : winner_2;
  wire         muxState_3 = beatsLeft ? state_3 : winner_3;
  wire         muxState_4 = beatsLeft ? state_4 : winner_4;
  wire         muxState_5 = beatsLeft ? state_5 : winner_5;
  wire         muxState_6 = beatsLeft ? state_6 : winner_6;
  wire         muxState_7 = beatsLeft ? state_7 : winner_7;
  wire         io_mem_release_valid_0 =
    beatsLeft
      ? state_0 & _entries_0_io_mem_release_valid | state_1
        & _entries_1_io_mem_release_valid | state_2 & _entries_2_io_mem_release_valid
        | state_3 & _entries_3_io_mem_release_valid | state_4
        & _entries_4_io_mem_release_valid | state_5 & _entries_5_io_mem_release_valid
        | state_6 & _entries_6_io_mem_release_valid | state_7
        & _entries_7_io_mem_release_valid
      : _entries_0_io_mem_release_valid | _entries_1_io_mem_release_valid
        | _entries_2_io_mem_release_valid | _entries_3_io_mem_release_valid
        | _entries_4_io_mem_release_valid | _entries_5_io_mem_release_valid
        | _entries_6_io_mem_release_valid | _entries_7_io_mem_release_valid;
  reg  [3:0]   perfValidCount;
  reg          io_perf_0_value_REG;
  reg          io_perf_0_value_REG_1;
  reg          io_perf_1_value_REG;
  reg          io_perf_1_value_REG_1;
  reg          io_perf_2_value_REG;
  reg          io_perf_2_value_REG_1;
  reg          io_perf_3_value_REG;
  reg          io_perf_3_value_REG_1;
  reg          io_perf_4_value_REG;
  reg          io_perf_4_value_REG_1;
  wire [5:0]   _GEN_2 = {2'h0, perfValidCount};
  always @(posedge clock) begin
    if (io_req_valid)
      req_data_data <= io_req_bits_data;
    perfValidCount <=
      4'({1'h0,
          3'({1'h0,
              2'({1'h0, _entries_0_io_block_addr_valid}
                 + {1'h0, _entries_1_io_block_addr_valid})}
             + {1'h0,
                2'({1'h0, _entries_2_io_block_addr_valid}
                   + {1'h0, _entries_3_io_block_addr_valid})})}
         + {1'h0,
            3'({1'h0,
                2'({1'h0, _entries_4_io_block_addr_valid}
                   + {1'h0, _entries_5_io_block_addr_valid})}
               + {1'h0,
                  2'({1'h0, _entries_6_io_block_addr_valid}
                     + {1'h0, _entries_7_io_block_addr_valid})})});
    io_perf_0_value_REG <= io_req_ready_0 & io_req_valid;
    io_perf_0_value_REG_1 <= io_perf_0_value_REG;
    io_perf_1_value_REG <= perfValidCount < 4'h2;
    io_perf_1_value_REG_1 <= io_perf_1_value_REG;
    io_perf_2_value_REG <= perfValidCount > 4'h2 & perfValidCount < 4'h5;
    io_perf_2_value_REG_1 <= io_perf_2_value_REG;
    io_perf_3_value_REG <= perfValidCount > 4'h4 & _GEN_2 < 6'h7;
    io_perf_3_value_REG_1 <= io_perf_3_value_REG;
    io_perf_4_value_REG <= _GEN_2 > 6'h6;
    io_perf_4_value_REG_1 <= io_perf_4_value_REG;
  end // always @(posedge)
  wire [7:0]   _readys_mask_T = readys_readys & readys_valid;
  wire [7:0]   _readys_mask_T_3 = _readys_mask_T | {_readys_mask_T[6:0], 1'h0};
  wire [7:0]   _readys_mask_T_6 = _readys_mask_T_3 | {_readys_mask_T_3[5:0], 2'h0};
  wire         latch = ~beatsLeft & io_mem_release_ready;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      beatsLeft <= 1'h0;
      readys_mask <= 8'hFF;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      state_2 <= 1'h0;
      state_3 <= 1'h0;
      state_4 <= 1'h0;
      state_5 <= 1'h0;
      state_6 <= 1'h0;
      state_7 <= 1'h0;
    end
    else begin
      if (latch)
        beatsLeft <=
          winner_0 & _entries_0_io_mem_release_bits_opcode[0] | winner_1
          & _entries_1_io_mem_release_bits_opcode[0] | winner_2
          & _entries_2_io_mem_release_bits_opcode[0] | winner_3
          & _entries_3_io_mem_release_bits_opcode[0] | winner_4
          & _entries_4_io_mem_release_bits_opcode[0] | winner_5
          & _entries_5_io_mem_release_bits_opcode[0] | winner_6
          & _entries_6_io_mem_release_bits_opcode[0] | winner_7
          & _entries_7_io_mem_release_bits_opcode[0];
      else
        beatsLeft <= 1'(beatsLeft - (io_mem_release_ready & io_mem_release_valid_0));
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T_6 | {_readys_mask_T_6[3:0], 4'h0};
      if (beatsLeft) begin
      end
      else begin
        state_0 <= winner_0;
        state_1 <= winner_1;
        state_2 <= winner_2;
        state_3 <= winner_3;
        state_4 <= winner_4;
        state_5 <= winner_5;
        state_6 <= winner_6;
        state_7 <= winner_7;
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:16];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h11; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        req_data_data =
          {_RANDOM[5'h0],
           _RANDOM[5'h1],
           _RANDOM[5'h2],
           _RANDOM[5'h3],
           _RANDOM[5'h4],
           _RANDOM[5'h5],
           _RANDOM[5'h6],
           _RANDOM[5'h7],
           _RANDOM[5'h8],
           _RANDOM[5'h9],
           _RANDOM[5'hA],
           _RANDOM[5'hB],
           _RANDOM[5'hC],
           _RANDOM[5'hD],
           _RANDOM[5'hE],
           _RANDOM[5'hF]};
        beatsLeft = _RANDOM[5'h10][0];
        readys_mask = _RANDOM[5'h10][8:1];
        state_0 = _RANDOM[5'h10][9];
        state_1 = _RANDOM[5'h10][10];
        state_2 = _RANDOM[5'h10][11];
        state_3 = _RANDOM[5'h10][12];
        state_4 = _RANDOM[5'h10][13];
        state_5 = _RANDOM[5'h10][14];
        state_6 = _RANDOM[5'h10][15];
        state_7 = _RANDOM[5'h10][16];
        perfValidCount = _RANDOM[5'h10][20:17];
        io_perf_0_value_REG = _RANDOM[5'h10][21];
        io_perf_0_value_REG_1 = _RANDOM[5'h10][22];
        io_perf_1_value_REG = _RANDOM[5'h10][23];
        io_perf_1_value_REG_1 = _RANDOM[5'h10][24];
        io_perf_2_value_REG = _RANDOM[5'h10][25];
        io_perf_2_value_REG_1 = _RANDOM[5'h10][26];
        io_perf_3_value_REG = _RANDOM[5'h10][27];
        io_perf_3_value_REG_1 = _RANDOM[5'h10][28];
        io_perf_4_value_REG = _RANDOM[5'h10][29];
        io_perf_4_value_REG_1 = _RANDOM[5'h10][30];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        beatsLeft = 1'h0;
        readys_mask = 8'hFF;
        state_0 = 1'h0;
        state_1 = 1'h0;
        state_2 = 1'h0;
        state_3 = 1'h0;
        state_4 = 1'h0;
        state_5 = 1'h0;
        state_6 = 1'h0;
        state_7 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  WritebackEntry entries_0 (
    .clock                       (clock),
    .reset                       (reset),
    .io_id                       (3'h5),
    .io_req_valid                (io_req_valid & _io_req_ready_dup_11_T_2),
    .io_req_bits_param           (io_req_bits_param),
    .io_req_bits_voluntary       (io_req_bits_voluntary),
    .io_req_bits_hasData         (io_req_bits_hasData),
    .io_req_bits_corrupt         (io_req_bits_corrupt),
    .io_req_bits_addr            (io_req_bits_addr),
    .io_req_data_data            (req_data_data),
    .io_mem_release_ready
      (io_mem_release_ready & (beatsLeft ? state_0 : readys_readys[0])),
    .io_mem_release_valid        (_entries_0_io_mem_release_valid),
    .io_mem_release_bits_opcode  (_entries_0_io_mem_release_bits_opcode),
    .io_mem_release_bits_param   (_entries_0_io_mem_release_bits_param),
    .io_mem_release_bits_source  (_entries_0_io_mem_release_bits_source),
    .io_mem_release_bits_address (_entries_0_io_mem_release_bits_address),
    .io_mem_release_bits_data    (_entries_0_io_mem_release_bits_data),
    .io_mem_release_bits_corrupt (_entries_0_io_mem_release_bits_corrupt),
    .io_mem_grant_valid          (io_mem_grant_bits_source == 4'h5 & io_mem_grant_valid),
    .io_primary_valid            ((|_alloc_T) & _entries_0_io_primary_ready),
    .io_primary_ready            (_entries_0_io_primary_ready),
    .io_block_addr_valid         (_entries_0_io_block_addr_valid),
    .io_block_addr_bits          (_entries_0_io_block_addr_bits)
  );
  WritebackEntry entries_1 (
    .clock                       (clock),
    .reset                       (reset),
    .io_id                       (3'h6),
    .io_req_valid                (io_req_valid & _io_req_ready_dup_11_T_2),
    .io_req_bits_param           (io_req_bits_param),
    .io_req_bits_voluntary       (io_req_bits_voluntary),
    .io_req_bits_hasData         (io_req_bits_hasData),
    .io_req_bits_corrupt         (io_req_bits_corrupt),
    .io_req_bits_addr            (io_req_bits_addr),
    .io_req_data_data            (req_data_data),
    .io_mem_release_ready
      (io_mem_release_ready & (beatsLeft ? state_1 : readys_readys[1])),
    .io_mem_release_valid        (_entries_1_io_mem_release_valid),
    .io_mem_release_bits_opcode  (_entries_1_io_mem_release_bits_opcode),
    .io_mem_release_bits_param   (_entries_1_io_mem_release_bits_param),
    .io_mem_release_bits_source  (_entries_1_io_mem_release_bits_source),
    .io_mem_release_bits_address (_entries_1_io_mem_release_bits_address),
    .io_mem_release_bits_data    (_entries_1_io_mem_release_bits_data),
    .io_mem_release_bits_corrupt (_entries_1_io_mem_release_bits_corrupt),
    .io_mem_grant_valid          (io_mem_grant_bits_source == 4'h6 & io_mem_grant_valid),
    .io_primary_valid
      ((|_alloc_T) & ~_entries_0_io_primary_ready & _entries_1_io_primary_ready),
    .io_primary_ready            (_entries_1_io_primary_ready),
    .io_block_addr_valid         (_entries_1_io_block_addr_valid),
    .io_block_addr_bits          (_entries_1_io_block_addr_bits)
  );
  WritebackEntry entries_2 (
    .clock                       (clock),
    .reset                       (reset),
    .io_id                       (3'h7),
    .io_req_valid                (io_req_valid & _io_req_ready_dup_11_T_2),
    .io_req_bits_param           (io_req_bits_param),
    .io_req_bits_voluntary       (io_req_bits_voluntary),
    .io_req_bits_hasData         (io_req_bits_hasData),
    .io_req_bits_corrupt         (io_req_bits_corrupt),
    .io_req_bits_addr            (io_req_bits_addr),
    .io_req_data_data            (req_data_data),
    .io_mem_release_ready
      (io_mem_release_ready & (beatsLeft ? state_2 : readys_readys[2])),
    .io_mem_release_valid        (_entries_2_io_mem_release_valid),
    .io_mem_release_bits_opcode  (_entries_2_io_mem_release_bits_opcode),
    .io_mem_release_bits_param   (_entries_2_io_mem_release_bits_param),
    .io_mem_release_bits_source  (_entries_2_io_mem_release_bits_source),
    .io_mem_release_bits_address (_entries_2_io_mem_release_bits_address),
    .io_mem_release_bits_data    (_entries_2_io_mem_release_bits_data),
    .io_mem_release_bits_corrupt (_entries_2_io_mem_release_bits_corrupt),
    .io_mem_grant_valid          (io_mem_grant_bits_source == 4'h7 & io_mem_grant_valid),
    .io_primary_valid
      ((|_alloc_T) & {_entries_0_io_primary_ready, _entries_1_io_primary_ready} == 2'h0
       & _entries_2_io_primary_ready),
    .io_primary_ready            (_entries_2_io_primary_ready),
    .io_block_addr_valid         (_entries_2_io_block_addr_valid),
    .io_block_addr_bits          (_entries_2_io_block_addr_bits)
  );
  WritebackEntry_3 entries_3 (
    .clock                       (clock),
    .reset                       (reset),
    .io_id                       (4'h8),
    .io_req_valid                (io_req_valid & _io_req_ready_dup_11_T_2),
    .io_req_bits_param           (io_req_bits_param),
    .io_req_bits_voluntary       (io_req_bits_voluntary),
    .io_req_bits_hasData         (io_req_bits_hasData),
    .io_req_bits_corrupt         (io_req_bits_corrupt),
    .io_req_bits_addr            (io_req_bits_addr),
    .io_req_data_data            (req_data_data),
    .io_mem_release_ready
      (io_mem_release_ready & (beatsLeft ? state_3 : readys_readys[3])),
    .io_mem_release_valid        (_entries_3_io_mem_release_valid),
    .io_mem_release_bits_opcode  (_entries_3_io_mem_release_bits_opcode),
    .io_mem_release_bits_param   (_entries_3_io_mem_release_bits_param),
    .io_mem_release_bits_source  (_entries_3_io_mem_release_bits_source),
    .io_mem_release_bits_address (_entries_3_io_mem_release_bits_address),
    .io_mem_release_bits_data    (_entries_3_io_mem_release_bits_data),
    .io_mem_release_bits_corrupt (_entries_3_io_mem_release_bits_corrupt),
    .io_mem_grant_valid          (io_mem_grant_bits_source == 4'h8 & io_mem_grant_valid),
    .io_primary_valid
      ((|_alloc_T)
       & {_entries_0_io_primary_ready,
          _entries_1_io_primary_ready,
          _entries_2_io_primary_ready} == 3'h0 & _entries_3_io_primary_ready),
    .io_primary_ready            (_entries_3_io_primary_ready),
    .io_block_addr_valid         (_entries_3_io_block_addr_valid),
    .io_block_addr_bits          (_entries_3_io_block_addr_bits)
  );
  WritebackEntry_3 entries_4 (
    .clock                       (clock),
    .reset                       (reset),
    .io_id                       (4'h9),
    .io_req_valid                (io_req_valid & _io_req_ready_dup_11_T_2),
    .io_req_bits_param           (io_req_bits_param),
    .io_req_bits_voluntary       (io_req_bits_voluntary),
    .io_req_bits_hasData         (io_req_bits_hasData),
    .io_req_bits_corrupt         (io_req_bits_corrupt),
    .io_req_bits_addr            (io_req_bits_addr),
    .io_req_data_data            (req_data_data),
    .io_mem_release_ready
      (io_mem_release_ready & (beatsLeft ? state_4 : readys_readys[4])),
    .io_mem_release_valid        (_entries_4_io_mem_release_valid),
    .io_mem_release_bits_opcode  (_entries_4_io_mem_release_bits_opcode),
    .io_mem_release_bits_param   (_entries_4_io_mem_release_bits_param),
    .io_mem_release_bits_source  (_entries_4_io_mem_release_bits_source),
    .io_mem_release_bits_address (_entries_4_io_mem_release_bits_address),
    .io_mem_release_bits_data    (_entries_4_io_mem_release_bits_data),
    .io_mem_release_bits_corrupt (_entries_4_io_mem_release_bits_corrupt),
    .io_mem_grant_valid          (io_mem_grant_bits_source == 4'h9 & io_mem_grant_valid),
    .io_primary_valid
      ((|_alloc_T)
       & {_entries_0_io_primary_ready,
          _entries_1_io_primary_ready,
          _entries_2_io_primary_ready,
          _entries_3_io_primary_ready} == 4'h0 & _entries_4_io_primary_ready),
    .io_primary_ready            (_entries_4_io_primary_ready),
    .io_block_addr_valid         (_entries_4_io_block_addr_valid),
    .io_block_addr_bits          (_entries_4_io_block_addr_bits)
  );
  WritebackEntry_3 entries_5 (
    .clock                       (clock),
    .reset                       (reset),
    .io_id                       (4'hA),
    .io_req_valid                (io_req_valid & _io_req_ready_dup_11_T_2),
    .io_req_bits_param           (io_req_bits_param),
    .io_req_bits_voluntary       (io_req_bits_voluntary),
    .io_req_bits_hasData         (io_req_bits_hasData),
    .io_req_bits_corrupt         (io_req_bits_corrupt),
    .io_req_bits_addr            (io_req_bits_addr),
    .io_req_data_data            (req_data_data),
    .io_mem_release_ready
      (io_mem_release_ready & (beatsLeft ? state_5 : readys_readys[5])),
    .io_mem_release_valid        (_entries_5_io_mem_release_valid),
    .io_mem_release_bits_opcode  (_entries_5_io_mem_release_bits_opcode),
    .io_mem_release_bits_param   (_entries_5_io_mem_release_bits_param),
    .io_mem_release_bits_source  (_entries_5_io_mem_release_bits_source),
    .io_mem_release_bits_address (_entries_5_io_mem_release_bits_address),
    .io_mem_release_bits_data    (_entries_5_io_mem_release_bits_data),
    .io_mem_release_bits_corrupt (_entries_5_io_mem_release_bits_corrupt),
    .io_mem_grant_valid          (io_mem_grant_bits_source == 4'hA & io_mem_grant_valid),
    .io_primary_valid
      ((|_alloc_T)
       & {_entries_0_io_primary_ready,
          _entries_1_io_primary_ready,
          _entries_2_io_primary_ready,
          _entries_3_io_primary_ready,
          _entries_4_io_primary_ready} == 5'h0 & _entries_5_io_primary_ready),
    .io_primary_ready            (_entries_5_io_primary_ready),
    .io_block_addr_valid         (_entries_5_io_block_addr_valid),
    .io_block_addr_bits          (_entries_5_io_block_addr_bits)
  );
  WritebackEntry_3 entries_6 (
    .clock                       (clock),
    .reset                       (reset),
    .io_id                       (4'hB),
    .io_req_valid                (io_req_valid & _io_req_ready_dup_11_T_2),
    .io_req_bits_param           (io_req_bits_param),
    .io_req_bits_voluntary       (io_req_bits_voluntary),
    .io_req_bits_hasData         (io_req_bits_hasData),
    .io_req_bits_corrupt         (io_req_bits_corrupt),
    .io_req_bits_addr            (io_req_bits_addr),
    .io_req_data_data            (req_data_data),
    .io_mem_release_ready
      (io_mem_release_ready & (beatsLeft ? state_6 : readys_readys[6])),
    .io_mem_release_valid        (_entries_6_io_mem_release_valid),
    .io_mem_release_bits_opcode  (_entries_6_io_mem_release_bits_opcode),
    .io_mem_release_bits_param   (_entries_6_io_mem_release_bits_param),
    .io_mem_release_bits_source  (_entries_6_io_mem_release_bits_source),
    .io_mem_release_bits_address (_entries_6_io_mem_release_bits_address),
    .io_mem_release_bits_data    (_entries_6_io_mem_release_bits_data),
    .io_mem_release_bits_corrupt (_entries_6_io_mem_release_bits_corrupt),
    .io_mem_grant_valid          (io_mem_grant_bits_source == 4'hB & io_mem_grant_valid),
    .io_primary_valid
      ((|_alloc_T)
       & {_entries_0_io_primary_ready,
          _entries_1_io_primary_ready,
          _entries_2_io_primary_ready,
          _entries_3_io_primary_ready,
          _entries_4_io_primary_ready,
          _entries_5_io_primary_ready} == 6'h0 & _entries_6_io_primary_ready),
    .io_primary_ready            (_entries_6_io_primary_ready),
    .io_block_addr_valid         (_entries_6_io_block_addr_valid),
    .io_block_addr_bits          (_entries_6_io_block_addr_bits)
  );
  WritebackEntry_3 entries_7 (
    .clock                       (clock),
    .reset                       (reset),
    .io_id                       (4'hC),
    .io_req_valid                (io_req_valid & _io_req_ready_dup_11_T_2),
    .io_req_bits_param           (io_req_bits_param),
    .io_req_bits_voluntary       (io_req_bits_voluntary),
    .io_req_bits_hasData         (io_req_bits_hasData),
    .io_req_bits_corrupt         (io_req_bits_corrupt),
    .io_req_bits_addr            (io_req_bits_addr),
    .io_req_data_data            (req_data_data),
    .io_mem_release_ready
      (io_mem_release_ready & (beatsLeft ? state_7 : readys_readys[7])),
    .io_mem_release_valid        (_entries_7_io_mem_release_valid),
    .io_mem_release_bits_opcode  (_entries_7_io_mem_release_bits_opcode),
    .io_mem_release_bits_param   (_entries_7_io_mem_release_bits_param),
    .io_mem_release_bits_source  (_entries_7_io_mem_release_bits_source),
    .io_mem_release_bits_address (_entries_7_io_mem_release_bits_address),
    .io_mem_release_bits_data    (_entries_7_io_mem_release_bits_data),
    .io_mem_release_bits_corrupt (_entries_7_io_mem_release_bits_corrupt),
    .io_mem_grant_valid          (io_mem_grant_bits_source == 4'hC & io_mem_grant_valid),
    .io_primary_valid
      ((|_alloc_T)
       & {_entries_0_io_primary_ready,
          _entries_1_io_primary_ready,
          _entries_2_io_primary_ready,
          _entries_3_io_primary_ready,
          _entries_4_io_primary_ready,
          _entries_5_io_primary_ready,
          _entries_6_io_primary_ready} == 7'h0 & _entries_7_io_primary_ready),
    .io_primary_ready            (_entries_7_io_primary_ready),
    .io_block_addr_valid         (_entries_7_io_block_addr_valid),
    .io_block_addr_bits          (_entries_7_io_block_addr_bits)
  );
  assign io_req_ready = io_req_ready_0;
  assign io_mem_release_valid = io_mem_release_valid_0;
  assign io_mem_release_bits_opcode =
    (muxState_0 ? _entries_0_io_mem_release_bits_opcode : 3'h0)
    | (muxState_1 ? _entries_1_io_mem_release_bits_opcode : 3'h0)
    | (muxState_2 ? _entries_2_io_mem_release_bits_opcode : 3'h0)
    | (muxState_3 ? _entries_3_io_mem_release_bits_opcode : 3'h0)
    | (muxState_4 ? _entries_4_io_mem_release_bits_opcode : 3'h0)
    | (muxState_5 ? _entries_5_io_mem_release_bits_opcode : 3'h0)
    | (muxState_6 ? _entries_6_io_mem_release_bits_opcode : 3'h0)
    | (muxState_7 ? _entries_7_io_mem_release_bits_opcode : 3'h0);
  assign io_mem_release_bits_param =
    (muxState_0 ? _entries_0_io_mem_release_bits_param : 3'h0)
    | (muxState_1 ? _entries_1_io_mem_release_bits_param : 3'h0)
    | (muxState_2 ? _entries_2_io_mem_release_bits_param : 3'h0)
    | (muxState_3 ? _entries_3_io_mem_release_bits_param : 3'h0)
    | (muxState_4 ? _entries_4_io_mem_release_bits_param : 3'h0)
    | (muxState_5 ? _entries_5_io_mem_release_bits_param : 3'h0)
    | (muxState_6 ? _entries_6_io_mem_release_bits_param : 3'h0)
    | (muxState_7 ? _entries_7_io_mem_release_bits_param : 3'h0);
  assign io_mem_release_bits_size =
    muxState_0 | muxState_1 | muxState_2 | muxState_3 | muxState_4 | muxState_5
    | muxState_6 | muxState_7
      ? 3'h6
      : 3'h0;
  assign io_mem_release_bits_source =
    (muxState_0 ? _entries_0_io_mem_release_bits_source : 4'h0)
    | (muxState_1 ? _entries_1_io_mem_release_bits_source : 4'h0)
    | (muxState_2 ? _entries_2_io_mem_release_bits_source : 4'h0)
    | (muxState_3 ? _entries_3_io_mem_release_bits_source : 4'h0)
    | (muxState_4 ? _entries_4_io_mem_release_bits_source : 4'h0)
    | (muxState_5 ? _entries_5_io_mem_release_bits_source : 4'h0)
    | (muxState_6 ? _entries_6_io_mem_release_bits_source : 4'h0)
    | (muxState_7 ? _entries_7_io_mem_release_bits_source : 4'h0);
  assign io_mem_release_bits_address =
    (muxState_0 ? _entries_0_io_mem_release_bits_address : 48'h0)
    | (muxState_1 ? _entries_1_io_mem_release_bits_address : 48'h0)
    | (muxState_2 ? _entries_2_io_mem_release_bits_address : 48'h0)
    | (muxState_3 ? _entries_3_io_mem_release_bits_address : 48'h0)
    | (muxState_4 ? _entries_4_io_mem_release_bits_address : 48'h0)
    | (muxState_5 ? _entries_5_io_mem_release_bits_address : 48'h0)
    | (muxState_6 ? _entries_6_io_mem_release_bits_address : 48'h0)
    | (muxState_7 ? _entries_7_io_mem_release_bits_address : 48'h0);
  assign io_mem_release_bits_data =
    (muxState_0 ? _entries_0_io_mem_release_bits_data : 256'h0)
    | (muxState_1 ? _entries_1_io_mem_release_bits_data : 256'h0)
    | (muxState_2 ? _entries_2_io_mem_release_bits_data : 256'h0)
    | (muxState_3 ? _entries_3_io_mem_release_bits_data : 256'h0)
    | (muxState_4 ? _entries_4_io_mem_release_bits_data : 256'h0)
    | (muxState_5 ? _entries_5_io_mem_release_bits_data : 256'h0)
    | (muxState_6 ? _entries_6_io_mem_release_bits_data : 256'h0)
    | (muxState_7 ? _entries_7_io_mem_release_bits_data : 256'h0);
  assign io_mem_release_bits_corrupt =
    muxState_0 & _entries_0_io_mem_release_bits_corrupt | muxState_1
    & _entries_1_io_mem_release_bits_corrupt | muxState_2
    & _entries_2_io_mem_release_bits_corrupt | muxState_3
    & _entries_3_io_mem_release_bits_corrupt | muxState_4
    & _entries_4_io_mem_release_bits_corrupt | muxState_5
    & _entries_5_io_mem_release_bits_corrupt | muxState_6
    & _entries_6_io_mem_release_bits_corrupt | muxState_7
    & _entries_7_io_mem_release_bits_corrupt;
  assign io_block_miss_req_0 =
    io_miss_req_conflict_check_0_valid
    & (|{_entries_7_io_block_addr_valid
           & _entries_7_io_block_addr_bits == io_miss_req_conflict_check_0_bits,
         _entries_6_io_block_addr_valid
           & _entries_6_io_block_addr_bits == io_miss_req_conflict_check_0_bits,
         _entries_5_io_block_addr_valid
           & _entries_5_io_block_addr_bits == io_miss_req_conflict_check_0_bits,
         _entries_4_io_block_addr_valid
           & _entries_4_io_block_addr_bits == io_miss_req_conflict_check_0_bits,
         _entries_3_io_block_addr_valid
           & _entries_3_io_block_addr_bits == io_miss_req_conflict_check_0_bits,
         _entries_2_io_block_addr_valid
           & _entries_2_io_block_addr_bits == io_miss_req_conflict_check_0_bits,
         _entries_1_io_block_addr_valid
           & _entries_1_io_block_addr_bits == io_miss_req_conflict_check_0_bits,
         _entries_0_io_block_addr_valid
           & _entries_0_io_block_addr_bits == io_miss_req_conflict_check_0_bits});
  assign io_block_miss_req_1 =
    io_miss_req_conflict_check_1_valid
    & (|{_entries_7_io_block_addr_valid
           & _entries_7_io_block_addr_bits == io_miss_req_conflict_check_1_bits,
         _entries_6_io_block_addr_valid
           & _entries_6_io_block_addr_bits == io_miss_req_conflict_check_1_bits,
         _entries_5_io_block_addr_valid
           & _entries_5_io_block_addr_bits == io_miss_req_conflict_check_1_bits,
         _entries_4_io_block_addr_valid
           & _entries_4_io_block_addr_bits == io_miss_req_conflict_check_1_bits,
         _entries_3_io_block_addr_valid
           & _entries_3_io_block_addr_bits == io_miss_req_conflict_check_1_bits,
         _entries_2_io_block_addr_valid
           & _entries_2_io_block_addr_bits == io_miss_req_conflict_check_1_bits,
         _entries_1_io_block_addr_valid
           & _entries_1_io_block_addr_bits == io_miss_req_conflict_check_1_bits,
         _entries_0_io_block_addr_valid
           & _entries_0_io_block_addr_bits == io_miss_req_conflict_check_1_bits});
  assign io_block_miss_req_2 =
    io_miss_req_conflict_check_2_valid
    & (|{_entries_7_io_block_addr_valid
           & _entries_7_io_block_addr_bits == io_miss_req_conflict_check_2_bits,
         _entries_6_io_block_addr_valid
           & _entries_6_io_block_addr_bits == io_miss_req_conflict_check_2_bits,
         _entries_5_io_block_addr_valid
           & _entries_5_io_block_addr_bits == io_miss_req_conflict_check_2_bits,
         _entries_4_io_block_addr_valid
           & _entries_4_io_block_addr_bits == io_miss_req_conflict_check_2_bits,
         _entries_3_io_block_addr_valid
           & _entries_3_io_block_addr_bits == io_miss_req_conflict_check_2_bits,
         _entries_2_io_block_addr_valid
           & _entries_2_io_block_addr_bits == io_miss_req_conflict_check_2_bits,
         _entries_1_io_block_addr_valid
           & _entries_1_io_block_addr_bits == io_miss_req_conflict_check_2_bits,
         _entries_0_io_block_addr_valid
           & _entries_0_io_block_addr_bits == io_miss_req_conflict_check_2_bits});
  assign io_block_miss_req_3 =
    io_miss_req_conflict_check_3_valid
    & (|{_entries_7_io_block_addr_valid
           & _entries_7_io_block_addr_bits == io_miss_req_conflict_check_3_bits,
         _entries_6_io_block_addr_valid
           & _entries_6_io_block_addr_bits == io_miss_req_conflict_check_3_bits,
         _entries_5_io_block_addr_valid
           & _entries_5_io_block_addr_bits == io_miss_req_conflict_check_3_bits,
         _entries_4_io_block_addr_valid
           & _entries_4_io_block_addr_bits == io_miss_req_conflict_check_3_bits,
         _entries_3_io_block_addr_valid
           & _entries_3_io_block_addr_bits == io_miss_req_conflict_check_3_bits,
         _entries_2_io_block_addr_valid
           & _entries_2_io_block_addr_bits == io_miss_req_conflict_check_3_bits,
         _entries_1_io_block_addr_valid
           & _entries_1_io_block_addr_bits == io_miss_req_conflict_check_3_bits,
         _entries_0_io_block_addr_valid
           & _entries_0_io_block_addr_bits == io_miss_req_conflict_check_3_bits});
  assign io_block_miss_req_4 =
    io_miss_req_conflict_check_4_valid
    & (|{_entries_7_io_block_addr_valid
           & _entries_7_io_block_addr_bits == io_miss_req_conflict_check_4_bits,
         _entries_6_io_block_addr_valid
           & _entries_6_io_block_addr_bits == io_miss_req_conflict_check_4_bits,
         _entries_5_io_block_addr_valid
           & _entries_5_io_block_addr_bits == io_miss_req_conflict_check_4_bits,
         _entries_4_io_block_addr_valid
           & _entries_4_io_block_addr_bits == io_miss_req_conflict_check_4_bits,
         _entries_3_io_block_addr_valid
           & _entries_3_io_block_addr_bits == io_miss_req_conflict_check_4_bits,
         _entries_2_io_block_addr_valid
           & _entries_2_io_block_addr_bits == io_miss_req_conflict_check_4_bits,
         _entries_1_io_block_addr_valid
           & _entries_1_io_block_addr_bits == io_miss_req_conflict_check_4_bits,
         _entries_0_io_block_addr_valid
           & _entries_0_io_block_addr_bits == io_miss_req_conflict_check_4_bits});
  assign io_perf_0_value = {5'h0, io_perf_0_value_REG_1};
  assign io_perf_1_value = {5'h0, io_perf_1_value_REG_1};
  assign io_perf_2_value = {5'h0, io_perf_2_value_REG_1};
  assign io_perf_3_value = {5'h0, io_perf_3_value_REG_1};
  assign io_perf_4_value = {5'h0, io_perf_4_value_REG_1};
endmodule

