// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SRAMTemplate_61(
  input        clock,
  input        reset,
  input        io_r_req_valid,
  input  [5:0] io_r_req_bits_setIdx,
  output [5:0] io_r_resp_data_0,
  output [5:0] io_r_resp_data_1,
  output [5:0] io_r_resp_data_2,
  output [5:0] io_r_resp_data_3,
  input        io_w_req_valid,
  input  [5:0] io_w_req_bits_setIdx,
  input  [5:0] io_w_req_bits_data_0,
  input  [5:0] io_w_req_bits_data_1,
  input  [5:0] io_w_req_bits_data_2,
  input  [5:0] io_w_req_bits_data_3,
  input  [3:0] io_w_req_bits_waymask
);

  wire        io_r_req_ready;
  wire        conflictBufferCanWrite;
  reg         conflictBufferValid_REG;
  wire [23:0] _array_R0_data;
  wire        _wcg_out_clock;
  wire        _rcg_out_clock;
  reg         _resetState;
  reg  [5:0]  _resetSet;
  wire        conflictValidS0 =
    io_r_req_valid & io_w_req_valid & (|io_w_req_bits_waymask)
    & io_r_req_bits_setIdx == io_w_req_bits_setIdx;
  reg  [5:0]  conflictRaddrS1;
  reg  [5:0]  conflictWaddrS1;
  reg  [3:0]  conflictWmaskS1;
  reg  [5:0]  conflictWdataS1_0;
  reg  [5:0]  conflictWdataS1_1;
  reg  [5:0]  conflictWdataS1_2;
  reg  [5:0]  conflictWdataS1_3;
  wire        conflictBufferWrite = conflictBufferValid_REG & conflictBufferCanWrite;
  wire        ren = io_r_req_ready & io_r_req_valid;
  wire        wen = io_w_req_valid & ~conflictValidS0 | conflictBufferWrite | _resetState;
  wire        _conflictBufferCanWrite_T_1 =
    io_r_req_valid & io_r_req_bits_setIdx == conflictWaddrS1;
  assign conflictBufferCanWrite = ~_conflictBufferCanWrite_T_1;
  reg         bypassEnable_REG;
  wire        bypassEnable =
    conflictBufferValid_REG & bypassEnable_REG & conflictRaddrS1 == conflictWaddrS1;
  wire [5:0]  mem_rdata_0 =
    bypassEnable & conflictWmaskS1[0] ? conflictWdataS1_0 : _array_R0_data[5:0];
  wire [5:0]  mem_rdata_1 =
    bypassEnable & conflictWmaskS1[1] ? conflictWdataS1_1 : _array_R0_data[11:6];
  wire [5:0]  mem_rdata_2 =
    bypassEnable & conflictWmaskS1[2] ? conflictWdataS1_2 : _array_R0_data[17:12];
  wire [5:0]  mem_rdata_3 =
    bypassEnable & conflictWmaskS1[3] ? conflictWdataS1_3 : _array_R0_data[23:18];
  reg         rdata_last_REG;
  reg  [5:0]  rdata_hold_data_0;
  reg  [5:0]  rdata_hold_data_1;
  reg  [5:0]  rdata_hold_data_2;
  reg  [5:0]  rdata_hold_data_3;
  assign io_r_req_ready = ~_resetState;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
    _resetState <= 1'h0;
      _resetSet <= 6'h0;
      conflictBufferValid_REG <= 1'h0;
      rdata_last_REG <= 1'h0;
    end
    else begin
      _resetState <= ~(_resetState & (&_resetSet)) & _resetState;
      if (_resetState)
        _resetSet <= 6'(_resetSet + 6'h1);
      conflictBufferValid_REG <=
        conflictValidS0 | conflictBufferValid_REG
        & (_conflictBufferCanWrite_T_1 | io_w_req_valid);
      rdata_last_REG <= ren;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (io_r_req_valid)
      conflictRaddrS1 <= io_r_req_bits_setIdx;
    if (conflictValidS0 | conflictBufferWrite) begin
      conflictWaddrS1 <= io_w_req_bits_setIdx;
      conflictWmaskS1 <= io_w_req_bits_waymask;
      conflictWdataS1_0 <= io_w_req_bits_data_0;
      conflictWdataS1_1 <= io_w_req_bits_data_1;
      conflictWdataS1_2 <= io_w_req_bits_data_2;
      conflictWdataS1_3 <= io_w_req_bits_data_3;
    end
    bypassEnable_REG <= io_r_req_valid;
    if (rdata_last_REG) begin
      rdata_hold_data_0 <= mem_rdata_0;
      rdata_hold_data_1 <= mem_rdata_1;
      rdata_hold_data_2 <= mem_rdata_2;
      rdata_hold_data_3 <= mem_rdata_3;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:10];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hB; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        _resetState = _RANDOM[4'h0][0];
        _resetSet = _RANDOM[4'h0][6:1];
        conflictRaddrS1 = _RANDOM[4'h0][13:8];
        conflictWaddrS1 = _RANDOM[4'h0][19:14];
        conflictWmaskS1 = _RANDOM[4'h0][23:20];
        conflictWdataS1_0 = _RANDOM[4'h0][29:24];
        conflictWdataS1_1 = {_RANDOM[4'h0][31:30], _RANDOM[4'h1][3:0]};
        conflictWdataS1_2 = _RANDOM[4'h1][9:4];
        conflictWdataS1_3 = _RANDOM[4'h1][15:10];
        conflictBufferValid_REG = _RANDOM[4'h9][17];
        bypassEnable_REG = _RANDOM[4'h9][18];
        rdata_last_REG = _RANDOM[4'h9][19];
        rdata_hold_data_0 = _RANDOM[4'h9][25:20];
        rdata_hold_data_1 = _RANDOM[4'h9][31:26];
        rdata_hold_data_2 = _RANDOM[4'hA][5:0];
        rdata_hold_data_3 = _RANDOM[4'hA][11:6];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        _resetState = 1'h1;
        _resetSet = 6'h0;
        conflictBufferValid_REG = 1'h0;
        rdata_last_REG = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  MbistClockGateCell rcg (
    .clock     (clock),
    .E         (ren),
    .out_clock (_rcg_out_clock)
  );
  MbistClockGateCell wcg (
    .clock     (clock),
    .E         (wen),
    .out_clock (_wcg_out_clock)
  );
  sram_array_2p64x24m6s1h0l1_bp_sc array (
    .R0_clk  (_rcg_out_clock),
    .R0_addr (io_r_req_bits_setIdx),
    .R0_en   (ren),
    .R0_data (_array_R0_data),
    .W0_clk  (_wcg_out_clock),
    .W0_addr
      (conflictBufferWrite
         ? conflictWaddrS1
         : _resetState ? _resetSet : io_w_req_bits_setIdx),
    .W0_en   (wen),
    .W0_data
      (conflictBufferWrite
         ? {conflictWdataS1_3, conflictWdataS1_2, conflictWdataS1_1, conflictWdataS1_0}
         : _resetState
             ? 24'h0
             : {io_w_req_bits_data_3,
                io_w_req_bits_data_2,
                io_w_req_bits_data_1,
                io_w_req_bits_data_0}),
    .W0_mask
      (conflictBufferWrite ? conflictWmaskS1 : _resetState ? 4'hF : io_w_req_bits_waymask)
  );
  assign io_r_resp_data_0 = rdata_last_REG ? mem_rdata_0 : rdata_hold_data_0;
  assign io_r_resp_data_1 = rdata_last_REG ? mem_rdata_1 : rdata_hold_data_1;
  assign io_r_resp_data_2 = rdata_last_REG ? mem_rdata_2 : rdata_hold_data_2;
  assign io_r_resp_data_3 = rdata_last_REG ? mem_rdata_3 : rdata_hold_data_3;
endmodule

