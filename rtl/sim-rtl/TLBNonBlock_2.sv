// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLBNonBlock_2(
  input         clock,
  input         reset,
  input         io_sfence_valid,
  input         io_sfence_bits_rs1,
  input         io_sfence_bits_rs2,
  input  [49:0] io_sfence_bits_addr,
  input  [15:0] io_sfence_bits_id,
  input         io_sfence_bits_flushPipe,
  input         io_sfence_bits_hv,
  input         io_sfence_bits_hg,
  input  [3:0]  io_csr_satp_mode,
  input  [15:0] io_csr_satp_asid,
  input         io_csr_satp_changed,
  input  [3:0]  io_csr_vsatp_mode,
  input  [15:0] io_csr_vsatp_asid,
  input         io_csr_vsatp_changed,
  input  [3:0]  io_csr_hgatp_mode,
  input  [15:0] io_csr_hgatp_vmid,
  input         io_csr_hgatp_changed,
  input         io_csr_priv_mxr,
  input         io_csr_priv_sum,
  input         io_csr_priv_vmxr,
  input         io_csr_priv_vsum,
  input         io_csr_priv_virt,
  input         io_csr_priv_spvp,
  input  [1:0]  io_csr_priv_imode,
  input  [1:0]  io_csr_priv_dmode,
  input  [1:0]  io_csr_pmm_mseccfg,
  input  [1:0]  io_csr_pmm_menvcfg,
  input  [1:0]  io_csr_pmm_henvcfg,
  input  [1:0]  io_csr_pmm_hstatus,
  input  [1:0]  io_csr_pmm_senvcfg,
  output [1:0]  io_ptw_req_0_bits_s2xlate,
  output        io_ptw_req_0_bits_getGpa,
  output [1:0]  io_ptw_req_1_bits_s2xlate,
  output        io_ptw_req_1_bits_getGpa,
  input         io_ptw_resp_valid,
  input  [1:0]  io_ptw_resp_bits_s2xlate,
  input  [34:0] io_ptw_resp_bits_s1_entry_tag,
  input  [15:0] io_ptw_resp_bits_s1_entry_asid,
  input  [13:0] io_ptw_resp_bits_s1_entry_vmid,
  input         io_ptw_resp_bits_s1_entry_n,
  input         io_ptw_resp_bits_s1_entry_perm_d,
  input         io_ptw_resp_bits_s1_entry_perm_a,
  input         io_ptw_resp_bits_s1_entry_perm_g,
  input         io_ptw_resp_bits_s1_entry_perm_u,
  input         io_ptw_resp_bits_s1_entry_perm_x,
  input         io_ptw_resp_bits_s1_entry_perm_w,
  input         io_ptw_resp_bits_s1_entry_perm_r,
  input  [1:0]  io_ptw_resp_bits_s1_entry_level,
  input         io_ptw_resp_bits_s1_entry_v,
  input  [2:0]  io_ptw_resp_bits_s1_addr_low,
  input         io_ptw_resp_bits_s1_valididx_0,
  input         io_ptw_resp_bits_s1_pf,
  input         io_ptw_resp_bits_s1_af,
  input  [37:0] io_ptw_resp_bits_s2_entry_tag,
  input  [13:0] io_ptw_resp_bits_s2_entry_vmid,
  input         io_ptw_resp_bits_s2_entry_n,
  input         io_ptw_resp_bits_s2_entry_perm_d,
  input         io_ptw_resp_bits_s2_entry_perm_a,
  input         io_ptw_resp_bits_s2_entry_perm_g,
  input         io_ptw_resp_bits_s2_entry_perm_u,
  input         io_ptw_resp_bits_s2_entry_perm_x,
  input         io_ptw_resp_bits_s2_entry_perm_w,
  input         io_ptw_resp_bits_s2_entry_perm_r,
  input  [1:0]  io_ptw_resp_bits_s2_entry_level,
  input         io_ptw_resp_bits_s2_gpf,
  input         io_ptw_resp_bits_s2_gaf,
  input         io_ptw_resp_bits_getGpa
);

  wire [15:0] _csr_delay_io_out_satp_asid;
  wire        _csr_delay_io_out_satp_changed;
  wire [3:0]  _csr_delay_io_out_vsatp_mode;
  wire [15:0] _csr_delay_io_out_vsatp_asid;
  wire        _csr_delay_io_out_vsatp_changed;
  wire [3:0]  _csr_delay_io_out_hgatp_mode;
  wire [15:0] _csr_delay_io_out_hgatp_vmid;
  wire        _csr_delay_io_out_hgatp_changed;
  wire        _csr_delay_io_out_priv_virt;
  wire        _sfence_delay_io_out_valid;
  reg         readResult_p_hit_last_REG;
  reg         readResult_p_perm_pf;
  reg         readResult_p_perm_af;
  reg         readResult_p_perm_v;
  reg         readResult_p_perm_a;
  reg         readResult_p_perm_u;
  reg         readResult_p_perm_x;
  reg         readResult_p_perm_w;
  reg         readResult_p_perm_r;
  reg         readResult_p_g_perm_pf;
  reg         readResult_p_g_perm_af;
  reg         readResult_p_g_perm_a;
  reg         readResult_p_g_perm_x;
  reg         readResult_p_g_perm_r;
  reg         readResult_p_hit_last_REG_1;
  reg         readResult_p_perm_1_pf;
  reg         readResult_p_perm_1_af;
  reg         readResult_p_perm_1_v;
  reg         readResult_p_perm_1_a;
  reg         readResult_p_perm_1_u;
  reg         readResult_p_perm_1_x;
  reg         readResult_p_perm_1_w;
  reg         readResult_p_perm_1_r;
  reg         readResult_p_g_perm_1_pf;
  reg         readResult_p_g_perm_1_af;
  reg         readResult_p_g_perm_1_a;
  reg         readResult_p_g_perm_1_x;
  reg         readResult_p_g_perm_1_r;
  wire        _req_s2xlate_T_16 = _csr_delay_io_out_vsatp_mode == 4'h0;
  wire [1:0]  _GEN = {1'h0, _csr_delay_io_out_hgatp_mode == 4'h0};
  wire        ptw_just_back_vmid_hit =
    {2'h0, io_ptw_resp_bits_s1_entry_vmid} == _csr_delay_io_out_hgatp_vmid;
  wire        _readResult_resp_hit_noS2_hit_level_match_T_3 =
    ~(|(io_ptw_resp_bits_s1_entry_tag[34:24]))
    & ~(|(io_ptw_resp_bits_s1_entry_tag[23:15]));
  wire        _GEN_0 = io_ptw_resp_bits_s1_entry_level != 2'h2;
  wire        _ptw_just_back_noS2_hit_level_match_T_19 =
    io_ptw_resp_bits_s1_entry_level == 2'h1;
  wire        _ptw_just_back_noS2_hit_level_match_T_21 =
    io_ptw_resp_bits_s1_entry_level == 2'h0;
  wire        ptw_just_back_onlyS2_hit_vmid_hit =
    {2'h0, io_ptw_resp_bits_s2_entry_vmid} == _csr_delay_io_out_hgatp_vmid;
  wire        _readResult_resp_hit_onlyS2_hit_level_match_T_3 =
    ~(|(io_ptw_resp_bits_s2_entry_tag[37:27]))
    & ~(|(io_ptw_resp_bits_s2_entry_tag[26:18]));
  wire        _GEN_1 = io_ptw_resp_bits_s2_entry_level != 2'h2;
  wire        _ptw_just_back_onlyS2_hit_level_match_T_19 =
    io_ptw_resp_bits_s2_entry_level == 2'h1;
  wire        _ptw_just_back_onlyS2_hit_level_match_T_21 =
    io_ptw_resp_bits_s2_entry_level == 2'h0;
  wire        _ptw_just_back_n_T_1 = io_ptw_resp_bits_s2xlate == 2'h1;
  wire        _GEN_2 =
    _ptw_just_back_n_T_1
    | io_ptw_resp_bits_s1_entry_level < io_ptw_resp_bits_s2_entry_level;
  wire [1:0]  readResult_resp_hit_level =
    _GEN_2 ? io_ptw_resp_bits_s1_entry_level : io_ptw_resp_bits_s2_entry_level;
  wire        readResult_resp_hit_tag_match_1 =
    io_ptw_resp_bits_s1_entry_tag[14:6] == 9'h0;
  wire        readResult_resp_hit_tag_match_2 =
    io_ptw_resp_bits_s1_entry_tag[23:15] == 9'h0;
  wire        readResult_resp_hit_tag_match_3 =
    io_ptw_resp_bits_s1_entry_tag[34:24] == 11'h0;
  wire        _readResult_resp_hit_level_match_T_3 =
    readResult_resp_hit_tag_match_3 & readResult_resp_hit_tag_match_2;
  wire        ptw_just_back_vasid_hit =
    io_ptw_resp_bits_s1_entry_asid == _csr_delay_io_out_vsatp_asid;
  wire        _ptw_just_back_T_12 = io_ptw_resp_bits_s2xlate == 2'h0;
  wire        _ptw_just_back_T_13 = io_ptw_resp_bits_s2xlate == 2'h2;
  wire        _readResult_resp_hit_noS2_hit_level_match_T_14 =
    ~(|(io_ptw_resp_bits_s1_entry_tag[34:24]))
    & ~(|(io_ptw_resp_bits_s1_entry_tag[23:15]));
  wire        _readResult_resp_hit_onlyS2_hit_level_match_T_14 =
    ~(|(io_ptw_resp_bits_s2_entry_tag[37:27]))
    & ~(|(io_ptw_resp_bits_s2_entry_tag[26:18]));
  wire [1:0]  readResult_resp_hit_level_1 =
    _GEN_2 ? io_ptw_resp_bits_s1_entry_level : io_ptw_resp_bits_s2_entry_level;
  wire        readResult_resp_hit_tag_match_1_1 =
    io_ptw_resp_bits_s1_entry_tag[14:6] == 9'h0;
  wire        readResult_resp_hit_tag_match_1_2 =
    io_ptw_resp_bits_s1_entry_tag[23:15] == 9'h0;
  wire        readResult_resp_hit_tag_match_1_3 =
    io_ptw_resp_bits_s1_entry_tag[34:24] == 11'h0;
  wire        _readResult_resp_hit_level_match_T_14 =
    readResult_resp_hit_tag_match_1_3 & readResult_resp_hit_tag_match_1_2;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      readResult_p_hit_last_REG <= 1'h0;
      readResult_p_hit_last_REG_1 <= 1'h0;
    end
    else begin
      readResult_p_hit_last_REG <=
        (_ptw_just_back_T_12
           ? io_ptw_resp_bits_s1_entry_asid == ((|io_ptw_resp_bits_s2xlate)
                                                  ? _csr_delay_io_out_vsatp_asid
                                                  : _csr_delay_io_out_satp_asid)
             & (~(|io_ptw_resp_bits_s2xlate) | ptw_just_back_vmid_hit)
             & (_ptw_just_back_noS2_hit_level_match_T_21
                  ? _readResult_resp_hit_noS2_hit_level_match_T_3
                    & ~(|(io_ptw_resp_bits_s1_entry_tag[14:6]))
                    & (io_ptw_resp_bits_s1_entry_n
                         ? ~(|(io_ptw_resp_bits_s1_entry_tag[5:1]))
                         : ~(|(io_ptw_resp_bits_s1_entry_tag[5:0])))
                  : _ptw_just_back_noS2_hit_level_match_T_19
                      ? _readResult_resp_hit_noS2_hit_level_match_T_3
                        & ~(|(io_ptw_resp_bits_s1_entry_tag[14:6]))
                      : (_GEN_0 | ~(|(io_ptw_resp_bits_s1_entry_tag[23:15])))
                        & ~(|(io_ptw_resp_bits_s1_entry_tag[34:24])))
             & io_ptw_resp_bits_s1_valididx_0
           : _ptw_just_back_T_13
               ? ptw_just_back_onlyS2_hit_vmid_hit
                 & (_ptw_just_back_onlyS2_hit_level_match_T_21
                      ? _readResult_resp_hit_onlyS2_hit_level_match_T_3
                        & ~(|(io_ptw_resp_bits_s2_entry_tag[17:9]))
                        & (io_ptw_resp_bits_s2_entry_n
                             ? ~(|(io_ptw_resp_bits_s2_entry_tag[8:4]))
                             : ~(|(io_ptw_resp_bits_s2_entry_tag[8:0])))
                      : _ptw_just_back_onlyS2_hit_level_match_T_19
                          ? _readResult_resp_hit_onlyS2_hit_level_match_T_3
                            & ~(|(io_ptw_resp_bits_s2_entry_tag[17:9]))
                          : (_GEN_1 | ~(|(io_ptw_resp_bits_s2_entry_tag[26:18])))
                            & ~(|(io_ptw_resp_bits_s2_entry_tag[37:27])))
               : (readResult_resp_hit_level == 2'h0
                    ? _readResult_resp_hit_level_match_T_3
                      & readResult_resp_hit_tag_match_1
                      & ((_ptw_just_back_n_T_1
                            ? io_ptw_resp_bits_s1_entry_n
                            : io_ptw_resp_bits_s1_entry_n
                              & (|io_ptw_resp_bits_s2_entry_level)
                              | io_ptw_resp_bits_s2_entry_n
                              & (|io_ptw_resp_bits_s1_entry_level)
                              | io_ptw_resp_bits_s1_entry_n & io_ptw_resp_bits_s2_entry_n)
                           ? io_ptw_resp_bits_s1_entry_tag[5:1] == 5'h0
                           : {io_ptw_resp_bits_s1_entry_tag[5:0],
                              io_ptw_resp_bits_s1_addr_low} == 9'h0)
                    : readResult_resp_hit_level == 2'h1
                        ? _readResult_resp_hit_level_match_T_3
                          & readResult_resp_hit_tag_match_1
                        : (readResult_resp_hit_level != 2'h2
                           | readResult_resp_hit_tag_match_2)
                          & readResult_resp_hit_tag_match_3) & ptw_just_back_vmid_hit
                 & ptw_just_back_vasid_hit) & io_ptw_resp_valid
        & (_csr_delay_io_out_priv_virt
             ? ((|_csr_delay_io_out_vsatp_mode) & (|_csr_delay_io_out_hgatp_mode)
                  ? 2'h3
                  : _req_s2xlate_T_16 ? 2'h2 : _GEN)
             : 2'h0) == io_ptw_resp_bits_s2xlate;
      readResult_p_hit_last_REG_1 <=
        (_ptw_just_back_T_12
           ? io_ptw_resp_bits_s1_entry_asid == ((|io_ptw_resp_bits_s2xlate)
                                                  ? _csr_delay_io_out_vsatp_asid
                                                  : _csr_delay_io_out_satp_asid)
             & (~(|io_ptw_resp_bits_s2xlate) | ptw_just_back_vmid_hit)
             & (_ptw_just_back_noS2_hit_level_match_T_21
                  ? _readResult_resp_hit_noS2_hit_level_match_T_14
                    & ~(|(io_ptw_resp_bits_s1_entry_tag[14:6]))
                    & (io_ptw_resp_bits_s1_entry_n
                         ? ~(|(io_ptw_resp_bits_s1_entry_tag[5:1]))
                         : ~(|(io_ptw_resp_bits_s1_entry_tag[5:0])))
                  : _ptw_just_back_noS2_hit_level_match_T_19
                      ? _readResult_resp_hit_noS2_hit_level_match_T_14
                        & ~(|(io_ptw_resp_bits_s1_entry_tag[14:6]))
                      : (_GEN_0 | ~(|(io_ptw_resp_bits_s1_entry_tag[23:15])))
                        & ~(|(io_ptw_resp_bits_s1_entry_tag[34:24])))
             & io_ptw_resp_bits_s1_valididx_0
           : _ptw_just_back_T_13
               ? ptw_just_back_onlyS2_hit_vmid_hit
                 & (_ptw_just_back_onlyS2_hit_level_match_T_21
                      ? _readResult_resp_hit_onlyS2_hit_level_match_T_14
                        & ~(|(io_ptw_resp_bits_s2_entry_tag[17:9]))
                        & (io_ptw_resp_bits_s2_entry_n
                             ? ~(|(io_ptw_resp_bits_s2_entry_tag[8:4]))
                             : ~(|(io_ptw_resp_bits_s2_entry_tag[8:0])))
                      : _ptw_just_back_onlyS2_hit_level_match_T_19
                          ? _readResult_resp_hit_onlyS2_hit_level_match_T_14
                            & ~(|(io_ptw_resp_bits_s2_entry_tag[17:9]))
                          : (_GEN_1 | ~(|(io_ptw_resp_bits_s2_entry_tag[26:18])))
                            & ~(|(io_ptw_resp_bits_s2_entry_tag[37:27])))
               : (readResult_resp_hit_level_1 == 2'h0
                    ? _readResult_resp_hit_level_match_T_14
                      & readResult_resp_hit_tag_match_1_1
                      & ((_ptw_just_back_n_T_1
                            ? io_ptw_resp_bits_s1_entry_n
                            : io_ptw_resp_bits_s1_entry_n
                              & (|io_ptw_resp_bits_s2_entry_level)
                              | io_ptw_resp_bits_s2_entry_n
                              & (|io_ptw_resp_bits_s1_entry_level)
                              | io_ptw_resp_bits_s1_entry_n & io_ptw_resp_bits_s2_entry_n)
                           ? io_ptw_resp_bits_s1_entry_tag[5:1] == 5'h0
                           : {io_ptw_resp_bits_s1_entry_tag[5:0],
                              io_ptw_resp_bits_s1_addr_low} == 9'h0)
                    : readResult_resp_hit_level_1 == 2'h1
                        ? _readResult_resp_hit_level_match_T_14
                          & readResult_resp_hit_tag_match_1_1
                        : (readResult_resp_hit_level_1 != 2'h2
                           | readResult_resp_hit_tag_match_1_2)
                          & readResult_resp_hit_tag_match_1_3) & ptw_just_back_vmid_hit
                 & ptw_just_back_vasid_hit) & io_ptw_resp_valid
        & (_csr_delay_io_out_priv_virt
             ? ((|_csr_delay_io_out_vsatp_mode) & (|_csr_delay_io_out_hgatp_mode)
                  ? 2'h3
                  : _req_s2xlate_T_16 ? 2'h2 : _GEN)
             : 2'h0) == io_ptw_resp_bits_s2xlate;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (io_ptw_resp_valid) begin
      readResult_p_perm_pf <= io_ptw_resp_bits_s1_pf;
      readResult_p_perm_af <= io_ptw_resp_bits_s1_af;
      readResult_p_perm_v <= io_ptw_resp_bits_s1_entry_v;
      readResult_p_perm_a <= io_ptw_resp_bits_s1_entry_perm_a;
      readResult_p_perm_u <= io_ptw_resp_bits_s1_entry_perm_u;
      readResult_p_perm_x <= io_ptw_resp_bits_s1_entry_perm_x;
      readResult_p_perm_w <= io_ptw_resp_bits_s1_entry_perm_w;
      readResult_p_perm_r <= io_ptw_resp_bits_s1_entry_perm_r;
      readResult_p_g_perm_pf <= io_ptw_resp_bits_s2_gpf;
      readResult_p_g_perm_af <= io_ptw_resp_bits_s2_gaf;
      readResult_p_g_perm_a <= io_ptw_resp_bits_s2_entry_perm_a;
      readResult_p_g_perm_x <= io_ptw_resp_bits_s2_entry_perm_x;
      readResult_p_g_perm_r <= io_ptw_resp_bits_s2_entry_perm_r;
      readResult_p_perm_1_pf <= io_ptw_resp_bits_s1_pf;
      readResult_p_perm_1_af <= io_ptw_resp_bits_s1_af;
      readResult_p_perm_1_v <= io_ptw_resp_bits_s1_entry_v;
      readResult_p_perm_1_a <= io_ptw_resp_bits_s1_entry_perm_a;
      readResult_p_perm_1_u <= io_ptw_resp_bits_s1_entry_perm_u;
      readResult_p_perm_1_x <= io_ptw_resp_bits_s1_entry_perm_x;
      readResult_p_perm_1_w <= io_ptw_resp_bits_s1_entry_perm_w;
      readResult_p_perm_1_r <= io_ptw_resp_bits_s1_entry_perm_r;
      readResult_p_g_perm_1_pf <= io_ptw_resp_bits_s2_gpf;
      readResult_p_g_perm_1_af <= io_ptw_resp_bits_s2_gaf;
      readResult_p_g_perm_1_a <= io_ptw_resp_bits_s2_entry_perm_a;
      readResult_p_g_perm_1_x <= io_ptw_resp_bits_s2_entry_perm_x;
      readResult_p_g_perm_1_r <= io_ptw_resp_bits_s2_entry_perm_r;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:45];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h2E; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        readResult_p_hit_last_REG = _RANDOM[6'h17][15];
        readResult_p_perm_pf = _RANDOM[6'h18][22];
        readResult_p_perm_af = _RANDOM[6'h18][23];
        readResult_p_perm_v = _RANDOM[6'h18][24];
        readResult_p_perm_a = _RANDOM[6'h18][26];
        readResult_p_perm_u = _RANDOM[6'h18][28];
        readResult_p_perm_x = _RANDOM[6'h18][29];
        readResult_p_perm_w = _RANDOM[6'h18][30];
        readResult_p_perm_r = _RANDOM[6'h18][31];
        readResult_p_g_perm_pf = _RANDOM[6'h1A][14];
        readResult_p_g_perm_af = _RANDOM[6'h1A][15];
        readResult_p_g_perm_a = _RANDOM[6'h1A][18];
        readResult_p_g_perm_x = _RANDOM[6'h1A][21];
        readResult_p_g_perm_r = _RANDOM[6'h1A][23];
        readResult_p_hit_last_REG_1 = _RANDOM[6'h2A][2];
        readResult_p_perm_1_pf = _RANDOM[6'h2B][9];
        readResult_p_perm_1_af = _RANDOM[6'h2B][10];
        readResult_p_perm_1_v = _RANDOM[6'h2B][11];
        readResult_p_perm_1_a = _RANDOM[6'h2B][13];
        readResult_p_perm_1_u = _RANDOM[6'h2B][15];
        readResult_p_perm_1_x = _RANDOM[6'h2B][16];
        readResult_p_perm_1_w = _RANDOM[6'h2B][17];
        readResult_p_perm_1_r = _RANDOM[6'h2B][18];
        readResult_p_g_perm_1_pf = _RANDOM[6'h2D][1];
        readResult_p_g_perm_1_af = _RANDOM[6'h2D][2];
        readResult_p_g_perm_1_a = _RANDOM[6'h2D][5];
        readResult_p_g_perm_1_x = _RANDOM[6'h2D][8];
        readResult_p_g_perm_1_r = _RANDOM[6'h2D][10];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        readResult_p_hit_last_REG = 1'h0;
        readResult_p_hit_last_REG_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DelayN_9 sfence_delay (
    .clock                 (clock),
    .io_in_valid           (io_sfence_valid),
    .io_in_bits_rs1        (io_sfence_bits_rs1),
    .io_in_bits_rs2        (io_sfence_bits_rs2),
    .io_in_bits_addr       (io_sfence_bits_addr),
    .io_in_bits_id         (io_sfence_bits_id),
    .io_in_bits_flushPipe  (io_sfence_bits_flushPipe),
    .io_in_bits_hv         (io_sfence_bits_hv),
    .io_in_bits_hg         (io_sfence_bits_hg),
    .io_out_valid          (_sfence_delay_io_out_valid),
    .io_out_bits_rs1       (/* unused */),
    .io_out_bits_rs2       (/* unused */),
    .io_out_bits_addr      (/* unused */),
    .io_out_bits_id        (/* unused */),
    .io_out_bits_flushPipe (/* unused */),
    .io_out_bits_hv        (/* unused */),
    .io_out_bits_hg        (/* unused */)
  );
  DelayN_7 csr_delay (
    .clock                (clock),
    .io_in_satp_mode      (io_csr_satp_mode),
    .io_in_satp_asid      (io_csr_satp_asid),
    .io_in_satp_changed   (io_csr_satp_changed),
    .io_in_vsatp_mode     (io_csr_vsatp_mode),
    .io_in_vsatp_asid     (io_csr_vsatp_asid),
    .io_in_vsatp_changed  (io_csr_vsatp_changed),
    .io_in_hgatp_mode     (io_csr_hgatp_mode),
    .io_in_hgatp_vmid     (io_csr_hgatp_vmid),
    .io_in_hgatp_changed  (io_csr_hgatp_changed),
    .io_in_priv_mxr       (io_csr_priv_mxr),
    .io_in_priv_sum       (io_csr_priv_sum),
    .io_in_priv_vmxr      (io_csr_priv_vmxr),
    .io_in_priv_vsum      (io_csr_priv_vsum),
    .io_in_priv_virt      (io_csr_priv_virt),
    .io_in_priv_spvp      (io_csr_priv_spvp),
    .io_in_priv_imode     (io_csr_priv_imode),
    .io_in_priv_dmode     (io_csr_priv_dmode),
    .io_in_pmm_mseccfg    (io_csr_pmm_mseccfg),
    .io_in_pmm_menvcfg    (io_csr_pmm_menvcfg),
    .io_in_pmm_henvcfg    (io_csr_pmm_henvcfg),
    .io_in_pmm_hstatus    (io_csr_pmm_hstatus),
    .io_in_pmm_senvcfg    (io_csr_pmm_senvcfg),
    .io_out_satp_mode     (/* unused */),
    .io_out_satp_asid     (_csr_delay_io_out_satp_asid),
    .io_out_satp_changed  (_csr_delay_io_out_satp_changed),
    .io_out_vsatp_mode    (_csr_delay_io_out_vsatp_mode),
    .io_out_vsatp_asid    (_csr_delay_io_out_vsatp_asid),
    .io_out_vsatp_changed (_csr_delay_io_out_vsatp_changed),
    .io_out_hgatp_mode    (_csr_delay_io_out_hgatp_mode),
    .io_out_hgatp_vmid    (_csr_delay_io_out_hgatp_vmid),
    .io_out_hgatp_changed (_csr_delay_io_out_hgatp_changed),
    .io_out_priv_mxr      (/* unused */),
    .io_out_priv_sum      (/* unused */),
    .io_out_priv_vmxr     (/* unused */),
    .io_out_priv_vsum     (/* unused */),
    .io_out_priv_virt     (_csr_delay_io_out_priv_virt),
    .io_out_priv_spvp     (/* unused */),
    .io_out_priv_imode    (/* unused */),
    .io_out_priv_dmode    (/* unused */),
    .io_out_pmm_mseccfg   (/* unused */),
    .io_out_pmm_menvcfg   (/* unused */),
    .io_out_pmm_henvcfg   (/* unused */),
    .io_out_pmm_hstatus   (/* unused */),
    .io_out_pmm_senvcfg   (/* unused */)
  );
  TlbStorageWrapper_3 entries (
    .clock                          (clock),
    .reset                          (reset),
    .io_r_resp_0_bits_hit           (/* unused */),
    .io_r_resp_0_bits_perm_0_pf     (/* unused */),
    .io_r_resp_0_bits_perm_0_af     (/* unused */),
    .io_r_resp_0_bits_perm_0_v      (/* unused */),
    .io_r_resp_0_bits_perm_0_a      (/* unused */),
    .io_r_resp_0_bits_perm_0_u      (/* unused */),
    .io_r_resp_0_bits_perm_0_x      (/* unused */),
    .io_r_resp_0_bits_perm_0_w      (/* unused */),
    .io_r_resp_0_bits_perm_0_r      (/* unused */),
    .io_r_resp_0_bits_g_perm_0_pf   (/* unused */),
    .io_r_resp_0_bits_g_perm_0_af   (/* unused */),
    .io_r_resp_0_bits_g_perm_0_a    (/* unused */),
    .io_r_resp_0_bits_g_perm_0_x    (/* unused */),
    .io_r_resp_0_bits_g_perm_0_r    (/* unused */),
    .io_r_resp_1_bits_hit           (/* unused */),
    .io_r_resp_1_bits_perm_0_pf     (/* unused */),
    .io_r_resp_1_bits_perm_0_af     (/* unused */),
    .io_r_resp_1_bits_perm_0_v      (/* unused */),
    .io_r_resp_1_bits_perm_0_a      (/* unused */),
    .io_r_resp_1_bits_perm_0_u      (/* unused */),
    .io_r_resp_1_bits_perm_0_x      (/* unused */),
    .io_r_resp_1_bits_perm_0_w      (/* unused */),
    .io_r_resp_1_bits_perm_0_r      (/* unused */),
    .io_r_resp_1_bits_g_perm_0_pf   (/* unused */),
    .io_r_resp_1_bits_g_perm_0_af   (/* unused */),
    .io_r_resp_1_bits_g_perm_0_a    (/* unused */),
    .io_r_resp_1_bits_g_perm_0_x    (/* unused */),
    .io_r_resp_1_bits_g_perm_0_r    (/* unused */),
    .io_w_valid
      (io_ptw_resp_valid & ~io_ptw_resp_bits_getGpa
       & ~(_sfence_delay_io_out_valid | _csr_delay_io_out_satp_changed
           | _csr_delay_io_out_vsatp_changed | _csr_delay_io_out_hgatp_changed)),
    .io_w_bits_data_s1_entry_perm_d (io_ptw_resp_bits_s1_entry_perm_d),
    .io_w_bits_data_s1_entry_perm_a (io_ptw_resp_bits_s1_entry_perm_a),
    .io_w_bits_data_s1_entry_perm_g (io_ptw_resp_bits_s1_entry_perm_g),
    .io_w_bits_data_s1_entry_perm_u (io_ptw_resp_bits_s1_entry_perm_u),
    .io_w_bits_data_s1_entry_perm_x (io_ptw_resp_bits_s1_entry_perm_x),
    .io_w_bits_data_s1_entry_perm_w (io_ptw_resp_bits_s1_entry_perm_w),
    .io_w_bits_data_s1_entry_perm_r (io_ptw_resp_bits_s1_entry_perm_r),
    .io_w_bits_data_s1_entry_v      (io_ptw_resp_bits_s1_entry_v),
    .io_w_bits_data_s1_pf           (io_ptw_resp_bits_s1_pf),
    .io_w_bits_data_s1_af           (io_ptw_resp_bits_s1_af),
    .io_w_bits_data_s2_entry_perm_d (io_ptw_resp_bits_s2_entry_perm_d),
    .io_w_bits_data_s2_entry_perm_a (io_ptw_resp_bits_s2_entry_perm_a),
    .io_w_bits_data_s2_entry_perm_g (io_ptw_resp_bits_s2_entry_perm_g),
    .io_w_bits_data_s2_entry_perm_u (io_ptw_resp_bits_s2_entry_perm_u),
    .io_w_bits_data_s2_entry_perm_x (io_ptw_resp_bits_s2_entry_perm_x),
    .io_w_bits_data_s2_entry_perm_w (io_ptw_resp_bits_s2_entry_perm_w),
    .io_w_bits_data_s2_entry_perm_r (io_ptw_resp_bits_s2_entry_perm_r),
    .io_w_bits_data_s2_gpf          (io_ptw_resp_bits_s2_gpf),
    .io_w_bits_data_s2_gaf          (io_ptw_resp_bits_s2_gaf)
  );
  assign io_ptw_req_0_bits_s2xlate = 2'h0;
  assign io_ptw_req_0_bits_getGpa = 1'h0;
  assign io_ptw_req_1_bits_s2xlate = 2'h0;
  assign io_ptw_req_1_bits_getGpa = 1'h0;
endmodule

