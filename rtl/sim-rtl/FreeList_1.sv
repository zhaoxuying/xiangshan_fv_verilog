// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FreeList_1(
  input        clock,
  input        reset,
  output [2:0] io_allocateSlot_0,
  input        io_doAllocate_0,
  input  [7:0] io_free,
  output [3:0] io_validCount
);

  reg  [2:0]      freeList_0;
  reg  [2:0]      freeList_1;
  reg  [2:0]      freeList_2;
  reg  [2:0]      freeList_3;
  reg  [2:0]      freeList_4;
  reg  [2:0]      freeList_5;
  reg  [2:0]      freeList_6;
  reg  [2:0]      freeList_7;
  reg             headPtr_flag;
  reg  [2:0]      headPtr_value;
  reg             tailPtr_flag;
  reg  [2:0]      tailPtr_value;
  reg  [7:0]      freeMask;
  reg             freeReq_next_nextVec_0_r;
  reg  [7:0]      freeSlotOH_next_nextVec_0_r;
  reg  [3:0]      freeSlotCnt;
  wire [7:0][2:0] _GEN =
    {{freeList_7},
     {freeList_6},
     {freeList_5},
     {freeList_4},
     {freeList_3},
     {freeList_2},
     {freeList_1},
     {freeList_0}};
  wire [7:0]      _remFreeSelMaskVec_T =
    ~(freeReq_next_nextVec_0_r ? freeSlotOH_next_nextVec_0_r : 8'h0);
  wire            _remFreeSelMaskVec_T_2 = freeMask[0] & _remFreeSelMaskVec_T[0];
  wire            _remFreeSelMaskVec_T_3 = freeMask[1] & _remFreeSelMaskVec_T[1];
  wire            _remFreeSelMaskVec_T_4 = freeMask[2] & _remFreeSelMaskVec_T[2];
  wire            _remFreeSelMaskVec_T_5 = freeMask[3] & _remFreeSelMaskVec_T[3];
  wire            _remFreeSelMaskVec_T_6 = freeMask[4] & _remFreeSelMaskVec_T[4];
  wire            _remFreeSelMaskVec_T_7 = freeMask[5] & _remFreeSelMaskVec_T[5];
  wire            _remFreeSelMaskVec_T_8 = freeMask[6] & _remFreeSelMaskVec_T[6];
  wire            _remFreeSelMaskVec_T_9 = freeMask[7] & _remFreeSelMaskVec_T[7];
  wire [7:0]      remFreeSelMaskVec_0 =
    {_remFreeSelMaskVec_T_9,
     _remFreeSelMaskVec_T_8,
     _remFreeSelMaskVec_T_7,
     _remFreeSelMaskVec_T_6,
     _remFreeSelMaskVec_T_5,
     _remFreeSelMaskVec_T_4,
     _remFreeSelMaskVec_T_3,
     _remFreeSelMaskVec_T_2};
  wire [7:0]      _remFreeSelIndexOHVec_highIndexOH_T_8 = {_remFreeSelMaskVec_T_9, 7'h0};
  wire [2:0]      _freeList_T_1 =
    freeSlotOH_next_nextVec_0_r[7:5] | freeSlotOH_next_nextVec_0_r[3:1];
  wire [2:0]      _freeList_T_6 =
    {|(freeSlotOH_next_nextVec_0_r[7:4]),
     |(_freeList_T_1[2:1]),
     _freeList_T_1[2] | _freeList_T_1[0]};
  wire [3:0]      _tailPtrNext_new_ptr_T_1 =
    4'({tailPtr_flag, tailPtr_value} + {3'h0, freeReq_next_nextVec_0_r});
  wire [3:0]      _headPtrNext_new_ptr_T_1 =
    4'({3'h0, io_doAllocate_0} + {headPtr_flag, headPtr_value});
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      freeList_0 <= 3'h0;
      freeList_1 <= 3'h1;
      freeList_2 <= 3'h2;
      freeList_3 <= 3'h3;
      freeList_4 <= 3'h4;
      freeList_5 <= 3'h5;
      freeList_6 <= 3'h6;
      freeList_7 <= 3'h7;
      headPtr_flag <= 1'h0;
      headPtr_value <= 3'h0;
      tailPtr_flag <= 1'h1;
      tailPtr_value <= 3'h0;
      freeMask <= 8'h0;
      freeReq_next_nextVec_0_r <= 1'h0;
      freeSlotOH_next_nextVec_0_r <= 8'h0;
      freeSlotCnt <= 4'h8;
    end
    else begin
      if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h0)
        freeList_0 <= _freeList_T_6;
      if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h1)
        freeList_1 <= _freeList_T_6;
      if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h2)
        freeList_2 <= _freeList_T_6;
      if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h3)
        freeList_3 <= _freeList_T_6;
      if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h4)
        freeList_4 <= _freeList_T_6;
      if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h5)
        freeList_5 <= _freeList_T_6;
      if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h6)
        freeList_6 <= _freeList_T_6;
      if (freeReq_next_nextVec_0_r & (&tailPtr_value))
        freeList_7 <= _freeList_T_6;
      if (io_doAllocate_0) begin
        headPtr_flag <= _headPtrNext_new_ptr_T_1[3];
        headPtr_value <= _headPtrNext_new_ptr_T_1[2:0];
      end
      if (freeReq_next_nextVec_0_r) begin
        tailPtr_flag <= _tailPtrNext_new_ptr_T_1[3];
        tailPtr_value <= _tailPtrNext_new_ptr_T_1[2:0];
      end
      freeMask <= (io_free | freeMask) & _remFreeSelMaskVec_T;
      if (~((|remFreeSelMaskVec_0) == freeReq_next_nextVec_0_r))
        freeReq_next_nextVec_0_r <= |remFreeSelMaskVec_0;
      if (~((_remFreeSelMaskVec_T_2
               ? 8'h1
               : _remFreeSelMaskVec_T_3
                   ? 8'h2
                   : _remFreeSelMaskVec_T_4
                       ? 8'h4
                       : _remFreeSelMaskVec_T_5
                           ? 8'h8
                           : _remFreeSelMaskVec_T_6
                               ? 8'h10
                               : _remFreeSelMaskVec_T_7
                                   ? 8'h20
                                   : _remFreeSelMaskVec_T_8
                                       ? 8'h40
                                       : _remFreeSelIndexOHVec_highIndexOH_T_8) == freeSlotOH_next_nextVec_0_r)) begin
        if (_remFreeSelMaskVec_T_2)
          freeSlotOH_next_nextVec_0_r <= 8'h1;
        else if (_remFreeSelMaskVec_T_3)
          freeSlotOH_next_nextVec_0_r <= 8'h2;
        else if (_remFreeSelMaskVec_T_4)
          freeSlotOH_next_nextVec_0_r <= 8'h4;
        else if (_remFreeSelMaskVec_T_5)
          freeSlotOH_next_nextVec_0_r <= 8'h8;
        else if (_remFreeSelMaskVec_T_6)
          freeSlotOH_next_nextVec_0_r <= 8'h10;
        else if (_remFreeSelMaskVec_T_7)
          freeSlotOH_next_nextVec_0_r <= 8'h20;
        else if (_remFreeSelMaskVec_T_8)
          freeSlotOH_next_nextVec_0_r <= 8'h40;
        else
          freeSlotOH_next_nextVec_0_r <= _remFreeSelIndexOHVec_highIndexOH_T_8;
      end
      freeSlotCnt <=
        _tailPtrNext_new_ptr_T_1[3] == _headPtrNext_new_ptr_T_1[3]
          ? {1'h0, 3'(_tailPtrNext_new_ptr_T_1[2:0] - _headPtrNext_new_ptr_T_1[2:0])}
          : 4'(4'({1'h0, _tailPtrNext_new_ptr_T_1[2:0]} - 4'h8)
               - {1'h0, _headPtrNext_new_ptr_T_1[2:0]});
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        freeList_0 = _RANDOM[1'h0][2:0];
        freeList_1 = _RANDOM[1'h0][5:3];
        freeList_2 = _RANDOM[1'h0][8:6];
        freeList_3 = _RANDOM[1'h0][11:9];
        freeList_4 = _RANDOM[1'h0][14:12];
        freeList_5 = _RANDOM[1'h0][17:15];
        freeList_6 = _RANDOM[1'h0][20:18];
        freeList_7 = _RANDOM[1'h0][23:21];
        headPtr_flag = _RANDOM[1'h0][24];
        headPtr_value = _RANDOM[1'h0][27:25];
        tailPtr_flag = _RANDOM[1'h0][28];
        tailPtr_value = _RANDOM[1'h0][31:29];
        freeMask = _RANDOM[1'h1][7:0];
        freeReq_next_nextVec_0_r = _RANDOM[1'h1][8];
        freeSlotOH_next_nextVec_0_r = _RANDOM[1'h1][16:9];
        freeSlotCnt = _RANDOM[1'h1][20:17];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        freeList_0 = 3'h0;
        freeList_1 = 3'h1;
        freeList_2 = 3'h2;
        freeList_3 = 3'h3;
        freeList_4 = 3'h4;
        freeList_5 = 3'h5;
        freeList_6 = 3'h6;
        freeList_7 = 3'h7;
        headPtr_flag = 1'h0;
        headPtr_value = 3'h0;
        tailPtr_flag = 1'h1;
        tailPtr_value = 3'h0;
        freeMask = 8'h0;
        freeReq_next_nextVec_0_r = 1'h0;
        freeSlotOH_next_nextVec_0_r = 8'h0;
        freeSlotCnt = 4'h8;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_allocateSlot_0 = _GEN[headPtr_value];
  assign io_validCount = 4'(4'h8 - freeSlotCnt);
endmodule

