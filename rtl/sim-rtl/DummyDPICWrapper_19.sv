// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DummyDPICWrapper_19(
  input        clock,
  input [63:0] io_bits_virtMode,
  input [63:0] io_bits_mtval2,
  input [63:0] io_bits_mtinst,
  input [63:0] io_bits_hstatus,
  input [63:0] io_bits_hideleg,
  input [63:0] io_bits_hedeleg,
  input [63:0] io_bits_hcounteren,
  input [63:0] io_bits_htval,
  input [63:0] io_bits_htinst,
  input [63:0] io_bits_hgatp,
  input [63:0] io_bits_vsstatus,
  input [63:0] io_bits_vstvec,
  input [63:0] io_bits_vsepc,
  input [63:0] io_bits_vscause,
  input [63:0] io_bits_vstval,
  input [63:0] io_bits_vsatp,
  input [63:0] io_bits_vsscratch,
  input [7:0]  io_bits_coreid
);

  DiffExtHCSRState dpic (
    .clock         (clock),
    .enable        (1'h1),
    .io_virtMode   (io_bits_virtMode),
    .io_mtval2     (io_bits_mtval2),
    .io_mtinst     (io_bits_mtinst),
    .io_hstatus    (io_bits_hstatus),
    .io_hideleg    (io_bits_hideleg),
    .io_hedeleg    (io_bits_hedeleg),
    .io_hcounteren (io_bits_hcounteren),
    .io_htval      (io_bits_htval),
    .io_htinst     (io_bits_htinst),
    .io_hgatp      (io_bits_hgatp),
    .io_vsstatus   (io_bits_vsstatus),
    .io_vstvec     (io_bits_vstvec),
    .io_vsepc      (io_bits_vsepc),
    .io_vscause    (io_bits_vscause),
    .io_vstval     (io_bits_vstval),
    .io_vsatp      (io_bits_vsatp),
    .io_vsscratch  (io_bits_vsscratch),
    .io_coreid     (io_bits_coreid)
  );
endmodule

