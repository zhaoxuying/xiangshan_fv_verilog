// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DelayReg_12(
  input        clock,
  input        reset,
  input        i_valid,
  input        i_criticalError,
  input  [7:0] i_coreid,
  output       o_valid,
  output       o_criticalError,
  output [7:0] o_coreid
);

  reg       REG_valid;
  reg       REG_criticalError;
  reg [7:0] REG_coreid;
  reg       REG_1_valid;
  reg       REG_1_criticalError;
  reg [7:0] REG_1_coreid;
  reg       REG_2_valid;
  reg       REG_2_criticalError;
  reg [7:0] REG_2_coreid;
  reg       REG_3_valid;
  reg       REG_3_criticalError;
  reg [7:0] REG_3_coreid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      REG_valid <= 1'h0;
      REG_criticalError <= 1'h0;
      REG_coreid <= 8'h0;
      REG_1_valid <= 1'h0;
      REG_1_criticalError <= 1'h0;
      REG_1_coreid <= 8'h0;
      REG_2_valid <= 1'h0;
      REG_2_criticalError <= 1'h0;
      REG_2_coreid <= 8'h0;
      REG_3_valid <= 1'h0;
      REG_3_criticalError <= 1'h0;
      REG_3_coreid <= 8'h0;
    end
    else begin
      REG_valid <= i_valid;
      REG_criticalError <= i_criticalError;
      REG_coreid <= i_coreid;
      REG_1_valid <= REG_valid;
      REG_1_criticalError <= REG_criticalError;
      REG_1_coreid <= REG_coreid;
      REG_2_valid <= REG_1_valid;
      REG_2_criticalError <= REG_1_criticalError;
      REG_2_coreid <= REG_1_coreid;
      REG_3_valid <= REG_2_valid;
      REG_3_criticalError <= REG_2_criticalError;
      REG_3_coreid <= REG_2_coreid;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        REG_valid = _RANDOM[1'h0][0];
        REG_criticalError = _RANDOM[1'h0][1];
        REG_coreid = _RANDOM[1'h0][9:2];
        REG_1_valid = _RANDOM[1'h0][10];
        REG_1_criticalError = _RANDOM[1'h0][11];
        REG_1_coreid = _RANDOM[1'h0][19:12];
        REG_2_valid = _RANDOM[1'h0][20];
        REG_2_criticalError = _RANDOM[1'h0][21];
        REG_2_coreid = _RANDOM[1'h0][29:22];
        REG_3_valid = _RANDOM[1'h0][30];
        REG_3_criticalError = _RANDOM[1'h0][31];
        REG_3_coreid = _RANDOM[1'h1][7:0];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        REG_valid = 1'h0;
        REG_criticalError = 1'h0;
        REG_coreid = 8'h0;
        REG_1_valid = 1'h0;
        REG_1_criticalError = 1'h0;
        REG_1_coreid = 8'h0;
        REG_2_valid = 1'h0;
        REG_2_criticalError = 1'h0;
        REG_2_coreid = 8'h0;
        REG_3_valid = 1'h0;
        REG_3_criticalError = 1'h0;
        REG_3_coreid = 8'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign o_valid = REG_3_valid;
  assign o_criticalError = REG_3_criticalError;
  assign o_coreid = REG_3_coreid;
endmodule

