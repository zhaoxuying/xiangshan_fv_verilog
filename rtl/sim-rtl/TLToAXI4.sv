// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLToAXI4(
  input          clock,
  input          reset,
  output         auto_in_a_ready,
  input          auto_in_a_valid,
  input  [3:0]   auto_in_a_bits_opcode,
  input  [2:0]   auto_in_a_bits_size,
  input  [5:0]   auto_in_a_bits_source,
  input  [47:0]  auto_in_a_bits_address,
  input          auto_in_a_bits_user_amba_prot_bufferable,
  input          auto_in_a_bits_user_amba_prot_modifiable,
  input          auto_in_a_bits_user_amba_prot_readalloc,
  input          auto_in_a_bits_user_amba_prot_writealloc,
  input          auto_in_a_bits_user_amba_prot_privileged,
  input          auto_in_a_bits_user_amba_prot_secure,
  input          auto_in_a_bits_user_amba_prot_fetch,
  input          auto_in_a_bits_echo_blockisdirty,
  input  [31:0]  auto_in_a_bits_mask,
  input  [255:0] auto_in_a_bits_data,
  input          auto_in_d_ready,
  output         auto_in_d_valid,
  output [3:0]   auto_in_d_bits_opcode,
  output [2:0]   auto_in_d_bits_size,
  output [5:0]   auto_in_d_bits_source,
  output         auto_in_d_bits_denied,
  output         auto_in_d_bits_echo_blockisdirty,
  output [255:0] auto_in_d_bits_data,
  output         auto_in_d_bits_corrupt,
  input          auto_out_aw_ready,
  output         auto_out_aw_valid,
  output [5:0]   auto_out_aw_bits_id,
  output [47:0]  auto_out_aw_bits_addr,
  output [7:0]   auto_out_aw_bits_len,
  output [2:0]   auto_out_aw_bits_size,
  output [1:0]   auto_out_aw_bits_burst,
  output         auto_out_aw_bits_lock,
  output [3:0]   auto_out_aw_bits_cache,
  output [2:0]   auto_out_aw_bits_prot,
  output [3:0]   auto_out_aw_bits_qos,
  output         auto_out_aw_bits_echo_blockisdirty,
  output [3:0]   auto_out_aw_bits_echo_tl_state_size,
  output [5:0]   auto_out_aw_bits_echo_tl_state_source,
  input          auto_out_w_ready,
  output         auto_out_w_valid,
  output [255:0] auto_out_w_bits_data,
  output [31:0]  auto_out_w_bits_strb,
  output         auto_out_w_bits_last,
  output         auto_out_b_ready,
  input          auto_out_b_valid,
  input  [5:0]   auto_out_b_bits_id,
  input  [1:0]   auto_out_b_bits_resp,
  input          auto_out_b_bits_echo_blockisdirty,
  input  [3:0]   auto_out_b_bits_echo_tl_state_size,
  input  [5:0]   auto_out_b_bits_echo_tl_state_source,
  input          auto_out_ar_ready,
  output         auto_out_ar_valid,
  output [5:0]   auto_out_ar_bits_id,
  output [47:0]  auto_out_ar_bits_addr,
  output [7:0]   auto_out_ar_bits_len,
  output [2:0]   auto_out_ar_bits_size,
  output [1:0]   auto_out_ar_bits_burst,
  output         auto_out_ar_bits_lock,
  output [3:0]   auto_out_ar_bits_cache,
  output [2:0]   auto_out_ar_bits_prot,
  output [3:0]   auto_out_ar_bits_qos,
  output         auto_out_ar_bits_echo_blockisdirty,
  output [3:0]   auto_out_ar_bits_echo_tl_state_size,
  output [5:0]   auto_out_ar_bits_echo_tl_state_source,
  output         auto_out_r_ready,
  input          auto_out_r_valid,
  input  [5:0]   auto_out_r_bits_id,
  input  [255:0] auto_out_r_bits_data,
  input  [1:0]   auto_out_r_bits_resp,
  input          auto_out_r_bits_echo_blockisdirty,
  input  [3:0]   auto_out_r_bits_echo_tl_state_size,
  input  [5:0]   auto_out_r_bits_echo_tl_state_source,
  input          auto_out_r_bits_last
);

  reg              count_63;
  reg              count_62;
  reg              count_61;
  reg              count_60;
  reg              count_59;
  reg              count_58;
  reg              count_57;
  reg              count_56;
  reg              count_55;
  reg              count_54;
  reg              count_53;
  reg              count_52;
  reg              count_51;
  reg              count_50;
  reg              count_49;
  reg              count_48;
  reg              count_47;
  reg              count_46;
  reg              count_45;
  reg              count_44;
  reg              count_43;
  reg              count_42;
  reg              count_41;
  reg              count_40;
  reg              count_39;
  reg              count_38;
  reg              count_37;
  reg              count_36;
  reg              count_35;
  reg              count_34;
  reg              count_33;
  reg              count_32;
  reg              count_31;
  reg              count_30;
  reg              count_29;
  reg              count_28;
  reg              count_27;
  reg              count_26;
  reg              count_25;
  reg              count_24;
  reg              count_23;
  reg              count_22;
  reg              count_21;
  reg              count_20;
  reg              count_19;
  reg              count_18;
  reg              count_17;
  reg              count_16;
  reg              count_15;
  reg              count_14;
  reg              count_13;
  reg              count_12;
  reg              count_11;
  reg              count_10;
  reg              count_9;
  reg              count_8;
  reg              count_7;
  reg              count_6;
  reg              count_5;
  reg              count_4;
  reg              count_3;
  reg              count_2;
  reg              count_1;
  reg              count;
  wire             _queue_arw_deq_q_io_enq_ready;
  wire             _queue_arw_deq_q_io_deq_valid;
  wire [5:0]       _queue_arw_deq_q_io_deq_bits_id;
  wire [47:0]      _queue_arw_deq_q_io_deq_bits_addr;
  wire [7:0]       _queue_arw_deq_q_io_deq_bits_len;
  wire [2:0]       _queue_arw_deq_q_io_deq_bits_size;
  wire [1:0]       _queue_arw_deq_q_io_deq_bits_burst;
  wire             _queue_arw_deq_q_io_deq_bits_lock;
  wire [3:0]       _queue_arw_deq_q_io_deq_bits_cache;
  wire [2:0]       _queue_arw_deq_q_io_deq_bits_prot;
  wire [3:0]       _queue_arw_deq_q_io_deq_bits_qos;
  wire             _queue_arw_deq_q_io_deq_bits_echo_blockisdirty;
  wire [3:0]       _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  wire [5:0]       _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  wire             _queue_arw_deq_q_io_deq_bits_wen;
  wire             _nodeOut_w_deq_q_io_enq_ready;
  wire [63:0][5:0] _GEN =
    '{6'h3F,
      6'h3E,
      6'h3D,
      6'h3C,
      6'h3B,
      6'h3A,
      6'h39,
      6'h38,
      6'h37,
      6'h36,
      6'h35,
      6'h34,
      6'h33,
      6'h32,
      6'h31,
      6'h30,
      6'h2F,
      6'h2E,
      6'h2D,
      6'h2C,
      6'h2B,
      6'h2A,
      6'h29,
      6'h28,
      6'h27,
      6'h26,
      6'h25,
      6'h24,
      6'h23,
      6'h22,
      6'h21,
      6'h20,
      6'h1F,
      6'h1E,
      6'h1D,
      6'h1C,
      6'h1B,
      6'h1A,
      6'h19,
      6'h18,
      6'h17,
      6'h16,
      6'h15,
      6'h14,
      6'h13,
      6'h12,
      6'h11,
      6'h10,
      6'hF,
      6'hE,
      6'hD,
      6'hC,
      6'hB,
      6'hA,
      6'h9,
      6'h8,
      6'h7,
      6'h6,
      6'h5,
      6'h4,
      6'h3,
      6'h2,
      6'h1,
      6'h0};
  wire [12:0]      _r_beats1_decode_T = 13'h3F << auto_in_a_bits_size;
  wire             r_beats1 = ~(auto_in_a_bits_opcode[2]) & ~(_r_beats1_decode_T[5]);
  reg              r_counter;
  wire             a_last = r_counter | ~r_beats1;
  reg              doneAW;
  wire [19:0]      _out_arw_bits_len_T = 20'h1FFF << auto_in_a_bits_size;
  wire [63:0]      _GEN_0 =
    {{count_63},
     {count_62},
     {count_61},
     {count_60},
     {count_59},
     {count_58},
     {count_57},
     {count_56},
     {count_55},
     {count_54},
     {count_53},
     {count_52},
     {count_51},
     {count_50},
     {count_49},
     {count_48},
     {count_47},
     {count_46},
     {count_45},
     {count_44},
     {count_43},
     {count_42},
     {count_41},
     {count_40},
     {count_39},
     {count_38},
     {count_37},
     {count_36},
     {count_35},
     {count_34},
     {count_33},
     {count_32},
     {count_31},
     {count_30},
     {count_29},
     {count_28},
     {count_27},
     {count_26},
     {count_25},
     {count_24},
     {count_23},
     {count_22},
     {count_21},
     {count_20},
     {count_19},
     {count_18},
     {count_17},
     {count_16},
     {count_15},
     {count_14},
     {count_13},
     {count_12},
     {count_11},
     {count_10},
     {count_9},
     {count_8},
     {count_7},
     {count_6},
     {count_5},
     {count_4},
     {count_3},
     {count_2},
     {count_1},
     {count}};
  wire             stall = _GEN_0[auto_in_a_bits_source] & ~r_counter;
  wire             _out_w_valid_T_3 = doneAW | _queue_arw_deq_q_io_enq_ready;
  wire             nodeIn_a_ready =
    ~stall
    & (auto_in_a_bits_opcode[2]
         ? _queue_arw_deq_q_io_enq_ready
         : _out_w_valid_T_3 & _nodeOut_w_deq_q_io_enq_ready);
  wire             out_arw_valid =
    ~stall & auto_in_a_valid
    & (auto_in_a_bits_opcode[2] | ~doneAW & _nodeOut_w_deq_q_io_enq_ready);
  reg              r_holds_d;
  reg  [2:0]       b_delay;
  wire             r_wins = auto_out_r_valid & b_delay != 3'h7 | r_holds_d;
  wire             nodeOut_r_ready = auto_in_d_ready & r_wins;
  wire             nodeOut_b_ready = auto_in_d_ready & ~r_wins;
  wire             nodeIn_d_valid = r_wins ? auto_out_r_valid : auto_out_b_valid;
  reg              r_first;
  reg              r_denied_r;
  wire             r_denied = r_first ? (&auto_out_r_bits_resp) : r_denied_r;
  wire [5:0]       d_sel_shiftAmount = r_wins ? auto_out_r_bits_id : auto_out_b_bits_id;
  wire             d_last = ~r_wins | auto_out_r_bits_last;
  wire             _inc_T_63 = _queue_arw_deq_q_io_enq_ready & out_arw_valid;
  wire             _dec_T_127 = auto_in_d_ready & nodeIn_d_valid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      r_counter <= 1'h0;
      doneAW <= 1'h0;
      r_holds_d <= 1'h0;
      r_first <= 1'h1;
      count <= 1'h0;
      count_1 <= 1'h0;
      count_2 <= 1'h0;
      count_3 <= 1'h0;
      count_4 <= 1'h0;
      count_5 <= 1'h0;
      count_6 <= 1'h0;
      count_7 <= 1'h0;
      count_8 <= 1'h0;
      count_9 <= 1'h0;
      count_10 <= 1'h0;
      count_11 <= 1'h0;
      count_12 <= 1'h0;
      count_13 <= 1'h0;
      count_14 <= 1'h0;
      count_15 <= 1'h0;
      count_16 <= 1'h0;
      count_17 <= 1'h0;
      count_18 <= 1'h0;
      count_19 <= 1'h0;
      count_20 <= 1'h0;
      count_21 <= 1'h0;
      count_22 <= 1'h0;
      count_23 <= 1'h0;
      count_24 <= 1'h0;
      count_25 <= 1'h0;
      count_26 <= 1'h0;
      count_27 <= 1'h0;
      count_28 <= 1'h0;
      count_29 <= 1'h0;
      count_30 <= 1'h0;
      count_31 <= 1'h0;
      count_32 <= 1'h0;
      count_33 <= 1'h0;
      count_34 <= 1'h0;
      count_35 <= 1'h0;
      count_36 <= 1'h0;
      count_37 <= 1'h0;
      count_38 <= 1'h0;
      count_39 <= 1'h0;
      count_40 <= 1'h0;
      count_41 <= 1'h0;
      count_42 <= 1'h0;
      count_43 <= 1'h0;
      count_44 <= 1'h0;
      count_45 <= 1'h0;
      count_46 <= 1'h0;
      count_47 <= 1'h0;
      count_48 <= 1'h0;
      count_49 <= 1'h0;
      count_50 <= 1'h0;
      count_51 <= 1'h0;
      count_52 <= 1'h0;
      count_53 <= 1'h0;
      count_54 <= 1'h0;
      count_55 <= 1'h0;
      count_56 <= 1'h0;
      count_57 <= 1'h0;
      count_58 <= 1'h0;
      count_59 <= 1'h0;
      count_60 <= 1'h0;
      count_61 <= 1'h0;
      count_62 <= 1'h0;
      count_63 <= 1'h0;
    end
    else begin
      if (nodeIn_a_ready & auto_in_a_valid) begin
        if (r_counter)
          r_counter <= 1'(r_counter - 1'h1);
        else
          r_counter <= r_beats1;
        doneAW <= ~a_last;
      end
      if (nodeOut_r_ready & auto_out_r_valid) begin
        r_holds_d <= ~auto_out_r_bits_last;
        r_first <= auto_out_r_bits_last;
      end
      count <=
        1'(1'(count + (_GEN[auto_in_a_bits_source] == 6'h0 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h0 & d_last & _dec_T_127));
      count_1 <=
        1'(1'(count_1 + (_GEN[auto_in_a_bits_source] == 6'h1 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h1 & d_last & _dec_T_127));
      count_2 <=
        1'(1'(count_2 + (_GEN[auto_in_a_bits_source] == 6'h2 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h2 & d_last & _dec_T_127));
      count_3 <=
        1'(1'(count_3 + (_GEN[auto_in_a_bits_source] == 6'h3 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h3 & d_last & _dec_T_127));
      count_4 <=
        1'(1'(count_4 + (_GEN[auto_in_a_bits_source] == 6'h4 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h4 & d_last & _dec_T_127));
      count_5 <=
        1'(1'(count_5 + (_GEN[auto_in_a_bits_source] == 6'h5 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h5 & d_last & _dec_T_127));
      count_6 <=
        1'(1'(count_6 + (_GEN[auto_in_a_bits_source] == 6'h6 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h6 & d_last & _dec_T_127));
      count_7 <=
        1'(1'(count_7 + (_GEN[auto_in_a_bits_source] == 6'h7 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h7 & d_last & _dec_T_127));
      count_8 <=
        1'(1'(count_8 + (_GEN[auto_in_a_bits_source] == 6'h8 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h8 & d_last & _dec_T_127));
      count_9 <=
        1'(1'(count_9 + (_GEN[auto_in_a_bits_source] == 6'h9 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h9 & d_last & _dec_T_127));
      count_10 <=
        1'(1'(count_10 + (_GEN[auto_in_a_bits_source] == 6'hA & _inc_T_63))
           - (d_sel_shiftAmount == 6'hA & d_last & _dec_T_127));
      count_11 <=
        1'(1'(count_11 + (_GEN[auto_in_a_bits_source] == 6'hB & _inc_T_63))
           - (d_sel_shiftAmount == 6'hB & d_last & _dec_T_127));
      count_12 <=
        1'(1'(count_12 + (_GEN[auto_in_a_bits_source] == 6'hC & _inc_T_63))
           - (d_sel_shiftAmount == 6'hC & d_last & _dec_T_127));
      count_13 <=
        1'(1'(count_13 + (_GEN[auto_in_a_bits_source] == 6'hD & _inc_T_63))
           - (d_sel_shiftAmount == 6'hD & d_last & _dec_T_127));
      count_14 <=
        1'(1'(count_14 + (_GEN[auto_in_a_bits_source] == 6'hE & _inc_T_63))
           - (d_sel_shiftAmount == 6'hE & d_last & _dec_T_127));
      count_15 <=
        1'(1'(count_15 + (_GEN[auto_in_a_bits_source] == 6'hF & _inc_T_63))
           - (d_sel_shiftAmount == 6'hF & d_last & _dec_T_127));
      count_16 <=
        1'(1'(count_16 + (_GEN[auto_in_a_bits_source] == 6'h10 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h10 & d_last & _dec_T_127));
      count_17 <=
        1'(1'(count_17 + (_GEN[auto_in_a_bits_source] == 6'h11 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h11 & d_last & _dec_T_127));
      count_18 <=
        1'(1'(count_18 + (_GEN[auto_in_a_bits_source] == 6'h12 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h12 & d_last & _dec_T_127));
      count_19 <=
        1'(1'(count_19 + (_GEN[auto_in_a_bits_source] == 6'h13 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h13 & d_last & _dec_T_127));
      count_20 <=
        1'(1'(count_20 + (_GEN[auto_in_a_bits_source] == 6'h14 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h14 & d_last & _dec_T_127));
      count_21 <=
        1'(1'(count_21 + (_GEN[auto_in_a_bits_source] == 6'h15 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h15 & d_last & _dec_T_127));
      count_22 <=
        1'(1'(count_22 + (_GEN[auto_in_a_bits_source] == 6'h16 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h16 & d_last & _dec_T_127));
      count_23 <=
        1'(1'(count_23 + (_GEN[auto_in_a_bits_source] == 6'h17 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h17 & d_last & _dec_T_127));
      count_24 <=
        1'(1'(count_24 + (_GEN[auto_in_a_bits_source] == 6'h18 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h18 & d_last & _dec_T_127));
      count_25 <=
        1'(1'(count_25 + (_GEN[auto_in_a_bits_source] == 6'h19 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h19 & d_last & _dec_T_127));
      count_26 <=
        1'(1'(count_26 + (_GEN[auto_in_a_bits_source] == 6'h1A & _inc_T_63))
           - (d_sel_shiftAmount == 6'h1A & d_last & _dec_T_127));
      count_27 <=
        1'(1'(count_27 + (_GEN[auto_in_a_bits_source] == 6'h1B & _inc_T_63))
           - (d_sel_shiftAmount == 6'h1B & d_last & _dec_T_127));
      count_28 <=
        1'(1'(count_28 + (_GEN[auto_in_a_bits_source] == 6'h1C & _inc_T_63))
           - (d_sel_shiftAmount == 6'h1C & d_last & _dec_T_127));
      count_29 <=
        1'(1'(count_29 + (_GEN[auto_in_a_bits_source] == 6'h1D & _inc_T_63))
           - (d_sel_shiftAmount == 6'h1D & d_last & _dec_T_127));
      count_30 <=
        1'(1'(count_30 + (_GEN[auto_in_a_bits_source] == 6'h1E & _inc_T_63))
           - (d_sel_shiftAmount == 6'h1E & d_last & _dec_T_127));
      count_31 <=
        1'(1'(count_31 + (_GEN[auto_in_a_bits_source] == 6'h1F & _inc_T_63))
           - (d_sel_shiftAmount == 6'h1F & d_last & _dec_T_127));
      count_32 <=
        1'(1'(count_32 + (_GEN[auto_in_a_bits_source] == 6'h20 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h20 & d_last & _dec_T_127));
      count_33 <=
        1'(1'(count_33 + (_GEN[auto_in_a_bits_source] == 6'h21 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h21 & d_last & _dec_T_127));
      count_34 <=
        1'(1'(count_34 + (_GEN[auto_in_a_bits_source] == 6'h22 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h22 & d_last & _dec_T_127));
      count_35 <=
        1'(1'(count_35 + (_GEN[auto_in_a_bits_source] == 6'h23 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h23 & d_last & _dec_T_127));
      count_36 <=
        1'(1'(count_36 + (_GEN[auto_in_a_bits_source] == 6'h24 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h24 & d_last & _dec_T_127));
      count_37 <=
        1'(1'(count_37 + (_GEN[auto_in_a_bits_source] == 6'h25 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h25 & d_last & _dec_T_127));
      count_38 <=
        1'(1'(count_38 + (_GEN[auto_in_a_bits_source] == 6'h26 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h26 & d_last & _dec_T_127));
      count_39 <=
        1'(1'(count_39 + (_GEN[auto_in_a_bits_source] == 6'h27 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h27 & d_last & _dec_T_127));
      count_40 <=
        1'(1'(count_40 + (_GEN[auto_in_a_bits_source] == 6'h28 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h28 & d_last & _dec_T_127));
      count_41 <=
        1'(1'(count_41 + (_GEN[auto_in_a_bits_source] == 6'h29 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h29 & d_last & _dec_T_127));
      count_42 <=
        1'(1'(count_42 + (_GEN[auto_in_a_bits_source] == 6'h2A & _inc_T_63))
           - (d_sel_shiftAmount == 6'h2A & d_last & _dec_T_127));
      count_43 <=
        1'(1'(count_43 + (_GEN[auto_in_a_bits_source] == 6'h2B & _inc_T_63))
           - (d_sel_shiftAmount == 6'h2B & d_last & _dec_T_127));
      count_44 <=
        1'(1'(count_44 + (_GEN[auto_in_a_bits_source] == 6'h2C & _inc_T_63))
           - (d_sel_shiftAmount == 6'h2C & d_last & _dec_T_127));
      count_45 <=
        1'(1'(count_45 + (_GEN[auto_in_a_bits_source] == 6'h2D & _inc_T_63))
           - (d_sel_shiftAmount == 6'h2D & d_last & _dec_T_127));
      count_46 <=
        1'(1'(count_46 + (_GEN[auto_in_a_bits_source] == 6'h2E & _inc_T_63))
           - (d_sel_shiftAmount == 6'h2E & d_last & _dec_T_127));
      count_47 <=
        1'(1'(count_47 + (_GEN[auto_in_a_bits_source] == 6'h2F & _inc_T_63))
           - (d_sel_shiftAmount == 6'h2F & d_last & _dec_T_127));
      count_48 <=
        1'(1'(count_48 + (_GEN[auto_in_a_bits_source] == 6'h30 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h30 & d_last & _dec_T_127));
      count_49 <=
        1'(1'(count_49 + (_GEN[auto_in_a_bits_source] == 6'h31 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h31 & d_last & _dec_T_127));
      count_50 <=
        1'(1'(count_50 + (_GEN[auto_in_a_bits_source] == 6'h32 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h32 & d_last & _dec_T_127));
      count_51 <=
        1'(1'(count_51 + (_GEN[auto_in_a_bits_source] == 6'h33 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h33 & d_last & _dec_T_127));
      count_52 <=
        1'(1'(count_52 + (_GEN[auto_in_a_bits_source] == 6'h34 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h34 & d_last & _dec_T_127));
      count_53 <=
        1'(1'(count_53 + (_GEN[auto_in_a_bits_source] == 6'h35 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h35 & d_last & _dec_T_127));
      count_54 <=
        1'(1'(count_54 + (_GEN[auto_in_a_bits_source] == 6'h36 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h36 & d_last & _dec_T_127));
      count_55 <=
        1'(1'(count_55 + (_GEN[auto_in_a_bits_source] == 6'h37 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h37 & d_last & _dec_T_127));
      count_56 <=
        1'(1'(count_56 + (_GEN[auto_in_a_bits_source] == 6'h38 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h38 & d_last & _dec_T_127));
      count_57 <=
        1'(1'(count_57 + (_GEN[auto_in_a_bits_source] == 6'h39 & _inc_T_63))
           - (d_sel_shiftAmount == 6'h39 & d_last & _dec_T_127));
      count_58 <=
        1'(1'(count_58 + (_GEN[auto_in_a_bits_source] == 6'h3A & _inc_T_63))
           - (d_sel_shiftAmount == 6'h3A & d_last & _dec_T_127));
      count_59 <=
        1'(1'(count_59 + (_GEN[auto_in_a_bits_source] == 6'h3B & _inc_T_63))
           - (d_sel_shiftAmount == 6'h3B & d_last & _dec_T_127));
      count_60 <=
        1'(1'(count_60 + (_GEN[auto_in_a_bits_source] == 6'h3C & _inc_T_63))
           - (d_sel_shiftAmount == 6'h3C & d_last & _dec_T_127));
      count_61 <=
        1'(1'(count_61 + (_GEN[auto_in_a_bits_source] == 6'h3D & _inc_T_63))
           - (d_sel_shiftAmount == 6'h3D & d_last & _dec_T_127));
      count_62 <=
        1'(1'(count_62 + (_GEN[auto_in_a_bits_source] == 6'h3E & _inc_T_63))
           - (d_sel_shiftAmount == 6'h3E & d_last & _dec_T_127));
      count_63 <=
        1'(1'(count_63 + ((&_GEN[auto_in_a_bits_source]) & _inc_T_63))
           - ((&d_sel_shiftAmount) & d_last & _dec_T_127));
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (auto_out_b_valid & ~nodeOut_b_ready)
      b_delay <= 3'(b_delay + 3'h1);
    else
      b_delay <= 3'h0;
    if (r_first)
      r_denied_r <= &auto_out_r_bits_resp;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        r_counter = _RANDOM[3'h0][0];
        doneAW = _RANDOM[3'h0][1];
        r_holds_d = _RANDOM[3'h0][2];
        b_delay = _RANDOM[3'h0][5:3];
        r_first = _RANDOM[3'h0][6];
        r_denied_r = _RANDOM[3'h0][7];
        count = _RANDOM[3'h0][8];
        count_1 = _RANDOM[3'h0][10];
        count_2 = _RANDOM[3'h0][12];
        count_3 = _RANDOM[3'h0][14];
        count_4 = _RANDOM[3'h0][16];
        count_5 = _RANDOM[3'h0][18];
        count_6 = _RANDOM[3'h0][20];
        count_7 = _RANDOM[3'h0][22];
        count_8 = _RANDOM[3'h0][24];
        count_9 = _RANDOM[3'h0][26];
        count_10 = _RANDOM[3'h0][28];
        count_11 = _RANDOM[3'h0][30];
        count_12 = _RANDOM[3'h1][0];
        count_13 = _RANDOM[3'h1][2];
        count_14 = _RANDOM[3'h1][4];
        count_15 = _RANDOM[3'h1][6];
        count_16 = _RANDOM[3'h1][8];
        count_17 = _RANDOM[3'h1][10];
        count_18 = _RANDOM[3'h1][12];
        count_19 = _RANDOM[3'h1][14];
        count_20 = _RANDOM[3'h1][16];
        count_21 = _RANDOM[3'h1][18];
        count_22 = _RANDOM[3'h1][20];
        count_23 = _RANDOM[3'h1][22];
        count_24 = _RANDOM[3'h1][24];
        count_25 = _RANDOM[3'h1][26];
        count_26 = _RANDOM[3'h1][28];
        count_27 = _RANDOM[3'h1][30];
        count_28 = _RANDOM[3'h2][0];
        count_29 = _RANDOM[3'h2][2];
        count_30 = _RANDOM[3'h2][4];
        count_31 = _RANDOM[3'h2][6];
        count_32 = _RANDOM[3'h2][8];
        count_33 = _RANDOM[3'h2][10];
        count_34 = _RANDOM[3'h2][12];
        count_35 = _RANDOM[3'h2][14];
        count_36 = _RANDOM[3'h2][16];
        count_37 = _RANDOM[3'h2][18];
        count_38 = _RANDOM[3'h2][20];
        count_39 = _RANDOM[3'h2][22];
        count_40 = _RANDOM[3'h2][24];
        count_41 = _RANDOM[3'h2][26];
        count_42 = _RANDOM[3'h2][28];
        count_43 = _RANDOM[3'h2][30];
        count_44 = _RANDOM[3'h3][0];
        count_45 = _RANDOM[3'h3][2];
        count_46 = _RANDOM[3'h3][4];
        count_47 = _RANDOM[3'h3][6];
        count_48 = _RANDOM[3'h3][8];
        count_49 = _RANDOM[3'h3][10];
        count_50 = _RANDOM[3'h3][12];
        count_51 = _RANDOM[3'h3][14];
        count_52 = _RANDOM[3'h3][16];
        count_53 = _RANDOM[3'h3][18];
        count_54 = _RANDOM[3'h3][20];
        count_55 = _RANDOM[3'h3][22];
        count_56 = _RANDOM[3'h3][24];
        count_57 = _RANDOM[3'h3][26];
        count_58 = _RANDOM[3'h3][28];
        count_59 = _RANDOM[3'h3][30];
        count_60 = _RANDOM[3'h4][0];
        count_61 = _RANDOM[3'h4][2];
        count_62 = _RANDOM[3'h4][4];
        count_63 = _RANDOM[3'h4][6];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        r_counter = 1'h0;
        doneAW = 1'h0;
        r_holds_d = 1'h0;
        r_first = 1'h1;
        count = 1'h0;
        count_1 = 1'h0;
        count_2 = 1'h0;
        count_3 = 1'h0;
        count_4 = 1'h0;
        count_5 = 1'h0;
        count_6 = 1'h0;
        count_7 = 1'h0;
        count_8 = 1'h0;
        count_9 = 1'h0;
        count_10 = 1'h0;
        count_11 = 1'h0;
        count_12 = 1'h0;
        count_13 = 1'h0;
        count_14 = 1'h0;
        count_15 = 1'h0;
        count_16 = 1'h0;
        count_17 = 1'h0;
        count_18 = 1'h0;
        count_19 = 1'h0;
        count_20 = 1'h0;
        count_21 = 1'h0;
        count_22 = 1'h0;
        count_23 = 1'h0;
        count_24 = 1'h0;
        count_25 = 1'h0;
        count_26 = 1'h0;
        count_27 = 1'h0;
        count_28 = 1'h0;
        count_29 = 1'h0;
        count_30 = 1'h0;
        count_31 = 1'h0;
        count_32 = 1'h0;
        count_33 = 1'h0;
        count_34 = 1'h0;
        count_35 = 1'h0;
        count_36 = 1'h0;
        count_37 = 1'h0;
        count_38 = 1'h0;
        count_39 = 1'h0;
        count_40 = 1'h0;
        count_41 = 1'h0;
        count_42 = 1'h0;
        count_43 = 1'h0;
        count_44 = 1'h0;
        count_45 = 1'h0;
        count_46 = 1'h0;
        count_47 = 1'h0;
        count_48 = 1'h0;
        count_49 = 1'h0;
        count_50 = 1'h0;
        count_51 = 1'h0;
        count_52 = 1'h0;
        count_53 = 1'h0;
        count_54 = 1'h0;
        count_55 = 1'h0;
        count_56 = 1'h0;
        count_57 = 1'h0;
        count_58 = 1'h0;
        count_59 = 1'h0;
        count_60 = 1'h0;
        count_61 = 1'h0;
        count_62 = 1'h0;
        count_63 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue1_AXI4BundleW nodeOut_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_nodeOut_w_deq_q_io_enq_ready),
    .io_enq_valid
      (~stall & auto_in_a_valid & ~(auto_in_a_bits_opcode[2]) & _out_w_valid_T_3),
    .io_enq_bits_data (auto_in_a_bits_data),
    .io_enq_bits_strb (auto_in_a_bits_mask),
    .io_enq_bits_last (a_last),
    .io_deq_ready     (auto_out_w_ready),
    .io_deq_valid     (auto_out_w_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (auto_out_w_bits_last)
  );
  Queue1_AXI4BundleARW queue_arw_deq_q (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_ready                     (_queue_arw_deq_q_io_enq_ready),
    .io_enq_valid                     (out_arw_valid),
    .io_enq_bits_id                   (_GEN[auto_in_a_bits_source]),
    .io_enq_bits_addr                 (auto_in_a_bits_address),
    .io_enq_bits_len                  (~(_out_arw_bits_len_T[12:5])),
    .io_enq_bits_size
      (auto_in_a_bits_size > 3'h4 ? 3'h5 : auto_in_a_bits_size),
    .io_enq_bits_cache
      ({auto_in_a_bits_user_amba_prot_writealloc,
        auto_in_a_bits_user_amba_prot_readalloc,
        auto_in_a_bits_user_amba_prot_modifiable,
        auto_in_a_bits_user_amba_prot_bufferable}),
    .io_enq_bits_prot
      ({auto_in_a_bits_user_amba_prot_fetch,
        ~auto_in_a_bits_user_amba_prot_secure,
        auto_in_a_bits_user_amba_prot_privileged}),
    .io_enq_bits_echo_blockisdirty    (auto_in_a_bits_echo_blockisdirty),
    .io_enq_bits_echo_tl_state_size   ({1'h0, auto_in_a_bits_size}),
    .io_enq_bits_echo_tl_state_source (auto_in_a_bits_source),
    .io_enq_bits_wen                  (~(auto_in_a_bits_opcode[2])),
    .io_deq_ready
      (_queue_arw_deq_q_io_deq_bits_wen ? auto_out_aw_ready : auto_out_ar_ready),
    .io_deq_valid                     (_queue_arw_deq_q_io_deq_valid),
    .io_deq_bits_id                   (_queue_arw_deq_q_io_deq_bits_id),
    .io_deq_bits_addr                 (_queue_arw_deq_q_io_deq_bits_addr),
    .io_deq_bits_len                  (_queue_arw_deq_q_io_deq_bits_len),
    .io_deq_bits_size                 (_queue_arw_deq_q_io_deq_bits_size),
    .io_deq_bits_burst                (_queue_arw_deq_q_io_deq_bits_burst),
    .io_deq_bits_lock                 (_queue_arw_deq_q_io_deq_bits_lock),
    .io_deq_bits_cache                (_queue_arw_deq_q_io_deq_bits_cache),
    .io_deq_bits_prot                 (_queue_arw_deq_q_io_deq_bits_prot),
    .io_deq_bits_qos                  (_queue_arw_deq_q_io_deq_bits_qos),
    .io_deq_bits_echo_blockisdirty    (_queue_arw_deq_q_io_deq_bits_echo_blockisdirty),
    .io_deq_bits_echo_tl_state_size   (_queue_arw_deq_q_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_queue_arw_deq_q_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_wen                  (_queue_arw_deq_q_io_deq_bits_wen)
  );
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = {3'h0, r_wins};
  assign auto_in_d_bits_size =
    r_wins
      ? auto_out_r_bits_echo_tl_state_size[2:0]
      : auto_out_b_bits_echo_tl_state_size[2:0];
  assign auto_in_d_bits_source =
    r_wins ? auto_out_r_bits_echo_tl_state_source : auto_out_b_bits_echo_tl_state_source;
  assign auto_in_d_bits_denied = r_wins ? r_denied : (|auto_out_b_bits_resp);
  assign auto_in_d_bits_echo_blockisdirty =
    r_wins ? auto_out_r_bits_echo_blockisdirty : auto_out_b_bits_echo_blockisdirty;
  assign auto_in_d_bits_data = auto_out_r_bits_data;
  assign auto_in_d_bits_corrupt = r_wins & ((|auto_out_r_bits_resp) | r_denied);
  assign auto_out_aw_valid =
    _queue_arw_deq_q_io_deq_valid & _queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_aw_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_aw_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_aw_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_aw_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_aw_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_aw_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_aw_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_aw_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_aw_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_aw_bits_echo_blockisdirty =
    _queue_arw_deq_q_io_deq_bits_echo_blockisdirty;
  assign auto_out_aw_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_aw_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_ar_valid =
    _queue_arw_deq_q_io_deq_valid & ~_queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_ar_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_ar_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_ar_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_ar_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_ar_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_ar_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_ar_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_ar_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_ar_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_ar_bits_echo_blockisdirty =
    _queue_arw_deq_q_io_deq_bits_echo_blockisdirty;
  assign auto_out_ar_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_ar_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_r_ready = nodeOut_r_ready;
endmodule

