// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SyncDataModuleTemplate_FtqPC_8entry(
  input         clock,
  input         reset,
  input  [2:0]  io_raddr_0,
  input  [2:0]  io_raddr_1,
  input  [2:0]  io_raddr_2,
  input  [2:0]  io_raddr_3,
  input  [2:0]  io_raddr_4,
  input  [2:0]  io_raddr_5,
  input  [2:0]  io_raddr_6,
  output [49:0] io_rdata_0_startAddr,
  output [49:0] io_rdata_0_nextLineAddr,
  output        io_rdata_0_fallThruError,
  output [49:0] io_rdata_1_startAddr,
  output [49:0] io_rdata_1_nextLineAddr,
  output        io_rdata_1_fallThruError,
  output [49:0] io_rdata_2_startAddr,
  output [49:0] io_rdata_3_startAddr,
  output [49:0] io_rdata_3_nextLineAddr,
  output [49:0] io_rdata_4_startAddr,
  output [49:0] io_rdata_4_nextLineAddr,
  output [49:0] io_rdata_5_startAddr,
  output [49:0] io_rdata_6_startAddr,
  input         io_wen_0,
  input  [2:0]  io_waddr_0,
  input  [49:0] io_wdata_0_startAddr,
  input  [49:0] io_wdata_0_nextLineAddr,
  input         io_wdata_0_fallThruError
);

  reg [2:0]  raddr_dup_0;
  reg [2:0]  raddr_dup_1;
  reg [2:0]  raddr_dup_2;
  reg [2:0]  raddr_dup_3;
  reg [2:0]  raddr_dup_4;
  reg [2:0]  raddr_dup_5;
  reg [2:0]  raddr_dup_6;
  reg        wen_dup_last_REG;
  reg [2:0]  waddr_dup_0;
  reg [49:0] r_startAddr;
  reg [49:0] r_nextLineAddr;
  reg        r_fallThruError;
  always @(posedge clock) begin
    raddr_dup_0 <= io_raddr_0;
    raddr_dup_1 <= io_raddr_1;
    raddr_dup_2 <= io_raddr_2;
    raddr_dup_3 <= io_raddr_3;
    raddr_dup_4 <= io_raddr_4;
    raddr_dup_5 <= io_raddr_5;
    raddr_dup_6 <= io_raddr_6;
    if (io_wen_0) begin
      waddr_dup_0 <= io_waddr_0;
      r_startAddr <= io_wdata_0_startAddr;
      r_nextLineAddr <= io_wdata_0_nextLineAddr;
      r_fallThruError <= io_wdata_0_fallThruError;
    end
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      wen_dup_last_REG <= 1'h0;
    else
      wen_dup_last_REG <= io_wen_0;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        raddr_dup_0 = _RANDOM[3'h0][2:0];
        raddr_dup_1 = _RANDOM[3'h0][5:3];
        raddr_dup_2 = _RANDOM[3'h0][8:6];
        raddr_dup_3 = _RANDOM[3'h0][11:9];
        raddr_dup_4 = _RANDOM[3'h0][14:12];
        raddr_dup_5 = _RANDOM[3'h0][17:15];
        raddr_dup_6 = _RANDOM[3'h0][20:18];
        wen_dup_last_REG = _RANDOM[3'h0][21];
        waddr_dup_0 = _RANDOM[3'h0][24:22];
        r_startAddr = {_RANDOM[3'h0][31:25], _RANDOM[3'h1], _RANDOM[3'h2][10:0]};
        r_nextLineAddr = {_RANDOM[3'h2][31:11], _RANDOM[3'h3][28:0]};
        r_fallThruError = _RANDOM[3'h4][13];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        wen_dup_last_REG = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DataModule_FtqPC_8entry dataBanks_0 (
    .clock                    (clock),
    .io_raddr_0               (raddr_dup_0),
    .io_raddr_1               (raddr_dup_1),
    .io_raddr_2               (raddr_dup_2),
    .io_raddr_3               (raddr_dup_3),
    .io_raddr_4               (raddr_dup_4),
    .io_raddr_5               (raddr_dup_5),
    .io_raddr_6               (raddr_dup_6),
    .io_rdata_0_startAddr     (io_rdata_0_startAddr),
    .io_rdata_0_nextLineAddr  (io_rdata_0_nextLineAddr),
    .io_rdata_0_fallThruError (io_rdata_0_fallThruError),
    .io_rdata_1_startAddr     (io_rdata_1_startAddr),
    .io_rdata_1_nextLineAddr  (io_rdata_1_nextLineAddr),
    .io_rdata_1_fallThruError (io_rdata_1_fallThruError),
    .io_rdata_2_startAddr     (io_rdata_2_startAddr),
    .io_rdata_3_startAddr     (io_rdata_3_startAddr),
    .io_rdata_3_nextLineAddr  (io_rdata_3_nextLineAddr),
    .io_rdata_4_startAddr     (io_rdata_4_startAddr),
    .io_rdata_4_nextLineAddr  (io_rdata_4_nextLineAddr),
    .io_rdata_5_startAddr     (io_rdata_5_startAddr),
    .io_rdata_6_startAddr     (io_rdata_6_startAddr),
    .io_wen_0                 (wen_dup_last_REG),
    .io_waddr_0               (waddr_dup_0),
    .io_wdata_0_startAddr     (r_startAddr),
    .io_wdata_0_nextLineAddr  (r_nextLineAddr),
    .io_wdata_0_fallThruError (r_fallThruError)
  );
endmodule

