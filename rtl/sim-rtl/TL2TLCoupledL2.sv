// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TL2TLCoupledL2(
  input          clock,
  input          reset,
  output         auto_in_a_ready,
  input          auto_in_a_valid,
  input  [3:0]   auto_in_a_bits_opcode,
  input  [2:0]   auto_in_a_bits_param,
  input  [2:0]   auto_in_a_bits_size,
  input  [5:0]   auto_in_a_bits_source,
  input  [47:0]  auto_in_a_bits_address,
  input  [43:0]  auto_in_a_bits_user_vaddr,
  input          auto_in_a_bits_user_needHint,
  input  [4:0]   auto_in_a_bits_user_reqSource,
  input          auto_in_a_bits_echo_isKeyword,
  input  [31:0]  auto_in_a_bits_mask,
  input  [255:0] auto_in_a_bits_data,
  input          auto_in_a_bits_corrupt,
  input          auto_in_b_ready,
  output         auto_in_b_valid,
  output [2:0]   auto_in_b_bits_opcode,
  output [1:0]   auto_in_b_bits_param,
  output [2:0]   auto_in_b_bits_size,
  output [5:0]   auto_in_b_bits_source,
  output [47:0]  auto_in_b_bits_address,
  output [31:0]  auto_in_b_bits_mask,
  output [255:0] auto_in_b_bits_data,
  output         auto_in_b_bits_corrupt,
  output         auto_in_c_ready,
  input          auto_in_c_valid,
  input  [2:0]   auto_in_c_bits_opcode,
  input  [2:0]   auto_in_c_bits_param,
  input  [2:0]   auto_in_c_bits_size,
  input  [5:0]   auto_in_c_bits_source,
  input  [47:0]  auto_in_c_bits_address,
  input  [43:0]  auto_in_c_bits_user_vaddr,
  input          auto_in_c_bits_user_needHint,
  input  [4:0]   auto_in_c_bits_user_reqSource,
  input          auto_in_c_bits_echo_isKeyword,
  input  [255:0] auto_in_c_bits_data,
  input          auto_in_c_bits_corrupt,
  input          auto_in_d_ready,
  output         auto_in_d_valid,
  output [3:0]   auto_in_d_bits_opcode,
  output [1:0]   auto_in_d_bits_param,
  output [2:0]   auto_in_d_bits_size,
  output [5:0]   auto_in_d_bits_source,
  output [7:0]   auto_in_d_bits_sink,
  output         auto_in_d_bits_denied,
  output         auto_in_d_bits_echo_isKeyword,
  output [255:0] auto_in_d_bits_data,
  output         auto_in_d_bits_corrupt,
  output         auto_in_e_ready,
  input          auto_in_e_valid,
  input  [7:0]   auto_in_e_bits_sink,
  input          auto_out_a_ready,
  output         auto_out_a_valid,
  output [3:0]   auto_out_a_bits_opcode,
  output [2:0]   auto_out_a_bits_param,
  output [2:0]   auto_out_a_bits_size,
  output [7:0]   auto_out_a_bits_source,
  output [47:0]  auto_out_a_bits_address,
  output         auto_out_a_bits_echo_blockisdirty,
  output [31:0]  auto_out_a_bits_mask,
  output [255:0] auto_out_a_bits_data,
  output         auto_out_a_bits_corrupt,
  input          auto_out_c_ready,
  output         auto_out_c_valid,
  output [2:0]   auto_out_c_bits_opcode,
  output [2:0]   auto_out_c_bits_param,
  output [2:0]   auto_out_c_bits_size,
  output [7:0]   auto_out_c_bits_source,
  output [47:0]  auto_out_c_bits_address,
  output         auto_out_c_bits_echo_blockisdirty,
  output [255:0] auto_out_c_bits_data,
  output         auto_out_c_bits_corrupt,
  output         auto_out_d_ready,
  input          auto_out_d_valid,
  input  [3:0]   auto_out_d_bits_opcode,
  input  [1:0]   auto_out_d_bits_param,
  input  [2:0]   auto_out_d_bits_size,
  input  [7:0]   auto_out_d_bits_source,
  input  [2:0]   auto_out_d_bits_sink,
  input          auto_out_d_bits_denied,
  input          auto_out_d_bits_echo_blockisdirty,
  input  [255:0] auto_out_d_bits_data,
  input          auto_out_d_bits_corrupt,
  input          auto_out_e_ready,
  output         auto_out_e_valid,
  output [2:0]   auto_out_e_bits_sink,
  output         io_l2_hint_valid,
  output [31:0]  io_l2_hint_bits_sourceId,
  output         io_l2_hint_bits_isKeyword,
  output         io_l2Miss,
  output [5:0]   io_perf_1_value,
  output [5:0]   io_perf_2_value,
  output [5:0]   io_perf_3_value,
  output [5:0]   io_perf_4_value,
  output [5:0]   io_perf_5_value,
  output [5:0]   io_perf_6_value,
  output [5:0]   io_perf_7_value,
  output [5:0]   io_perf_8_value,
  output [5:0]   io_perf_9_value,
  output [5:0]   io_perf_10_value,
  output [5:0]   io_perf_11_value,
  output [5:0]   io_perf_12_value
);

  reg         l1HintArb_io_out_ready_REG;
  wire        _l1HintArb_io_in_0_ready;
  wire        _l1HintArb_io_out_valid;
  wire [31:0] _l1HintArb_io_out_bits_sourceId;
  wire        _slices_0_io_in_d_valid;
  wire        _slices_0_io_l1Hint_valid;
  wire [31:0] _slices_0_io_l1Hint_bits_sourceId;
  wire        _slices_0_io_l1Hint_bits_isKeyword;
  wire        _slices_0_io_l2Miss;
  wire [5:0]  _slices_0_io_perf_0_value;
  wire [5:0]  _slices_0_io_perf_1_value;
  wire [5:0]  _slices_0_io_perf_3_value;
  wire [5:0]  _slices_0_io_perf_4_value;
  wire [5:0]  _slices_0_io_perf_5_value;
  wire [5:0]  _slices_0_io_perf_6_value;
  wire [5:0]  _slices_0_io_perf_7_value;
  wire [5:0]  _slices_0_io_perf_8_value;
  wire [5:0]  _slices_0_io_perf_9_value;
  wire [5:0]  _slices_0_io_perf_10_value;
  wire [5:0]  _slices_0_io_perf_11_value;
  reg         allCanFire_REG;
  reg         allCanFire_REG_1;
  reg         allCanFire_REG_2;
  reg         allCanFire_REG_3;
  reg         allCanFire_REG_4;
  reg         sliceCanFire_REG;
  reg         sliceCanFire_REG_1;
  reg         sliceCanFire_REG_2;
  reg         sliceCanFire_REG_3;
  reg         sliceCanFire_REG_4;
  wire        sliceCanFire = sliceCanFire_REG_1 | sliceCanFire_REG_4;
  wire        _slice_io_in_d_ready_T =
    sliceCanFire | allCanFire_REG_1 & allCanFire_REG_4 | sliceCanFire
    & ~_slices_0_io_in_d_valid;
  reg  [5:0]  io_perf_1_value_REG;
  reg  [5:0]  io_perf_1_value_REG_1;
  reg  [5:0]  io_perf_2_value_REG;
  reg  [5:0]  io_perf_2_value_REG_1;
  reg  [5:0]  io_perf_3_value_REG;
  reg  [5:0]  io_perf_3_value_REG_1;
  reg  [5:0]  io_perf_4_value_REG;
  reg  [5:0]  io_perf_4_value_REG_1;
  reg  [5:0]  io_perf_5_value_REG;
  reg  [5:0]  io_perf_5_value_REG_1;
  reg  [5:0]  io_perf_6_value_REG;
  reg  [5:0]  io_perf_6_value_REG_1;
  reg  [5:0]  io_perf_7_value_REG;
  reg  [5:0]  io_perf_7_value_REG_1;
  reg  [5:0]  io_perf_8_value_REG;
  reg  [5:0]  io_perf_8_value_REG_1;
  reg  [5:0]  io_perf_9_value_REG;
  reg  [5:0]  io_perf_9_value_REG_1;
  reg  [5:0]  io_perf_10_value_REG;
  reg  [5:0]  io_perf_10_value_REG_1;
  reg  [5:0]  io_perf_11_value_REG;
  reg  [5:0]  io_perf_11_value_REG_1;
  reg  [5:0]  io_perf_12_value_REG;
  reg  [5:0]  io_perf_12_value_REG_1;
  wire        hintFire =
    ~l1HintArb_io_out_ready_REG & _l1HintArb_io_out_valid
    & _l1HintArb_io_out_bits_sourceId[31:4] == 28'h1
    & _l1HintArb_io_out_bits_sourceId[3:1] != 3'h7;
  reg         io_l2Miss_REG;
  always @(posedge clock) begin
    allCanFire_REG <= ~hintFire;
    allCanFire_REG_1 <= allCanFire_REG;
    allCanFire_REG_2 <= ~hintFire;
    allCanFire_REG_3 <= allCanFire_REG_2;
    allCanFire_REG_4 <= allCanFire_REG_3;
    sliceCanFire_REG <= hintFire;
    sliceCanFire_REG_1 <= sliceCanFire_REG;
    sliceCanFire_REG_2 <= hintFire;
    sliceCanFire_REG_3 <= sliceCanFire_REG_2;
    sliceCanFire_REG_4 <= sliceCanFire_REG_3;
    io_perf_1_value_REG <= _slices_0_io_perf_0_value;
    io_perf_1_value_REG_1 <= io_perf_1_value_REG;
    io_perf_2_value_REG <= _slices_0_io_perf_1_value;
    io_perf_2_value_REG_1 <= io_perf_2_value_REG;
    io_perf_3_value_REG <= 6'h0;
    io_perf_3_value_REG_1 <= io_perf_3_value_REG;
    io_perf_4_value_REG <= _slices_0_io_perf_3_value;
    io_perf_4_value_REG_1 <= io_perf_4_value_REG;
    io_perf_5_value_REG <= _slices_0_io_perf_4_value;
    io_perf_5_value_REG_1 <= io_perf_5_value_REG;
    io_perf_6_value_REG <= _slices_0_io_perf_5_value;
    io_perf_6_value_REG_1 <= io_perf_6_value_REG;
    io_perf_7_value_REG <= _slices_0_io_perf_6_value;
    io_perf_7_value_REG_1 <= io_perf_7_value_REG;
    io_perf_8_value_REG <= _slices_0_io_perf_7_value;
    io_perf_8_value_REG_1 <= io_perf_8_value_REG;
    io_perf_9_value_REG <= _slices_0_io_perf_8_value;
    io_perf_9_value_REG_1 <= io_perf_9_value_REG;
    io_perf_10_value_REG <= _slices_0_io_perf_9_value;
    io_perf_10_value_REG_1 <= io_perf_10_value_REG;
    io_perf_11_value_REG <= _slices_0_io_perf_10_value;
    io_perf_11_value_REG_1 <= io_perf_11_value_REG;
    io_perf_12_value_REG <= _slices_0_io_perf_11_value;
    io_perf_12_value_REG_1 <= io_perf_12_value_REG;
    io_l2Miss_REG <= _slices_0_io_l2Miss;
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      l1HintArb_io_out_ready_REG <= 1'h0;
    else
      l1HintArb_io_out_ready_REG <= hintFire;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        allCanFire_REG = _RANDOM[3'h0][0];
        allCanFire_REG_1 = _RANDOM[3'h0][1];
        allCanFire_REG_2 = _RANDOM[3'h0][2];
        allCanFire_REG_3 = _RANDOM[3'h0][3];
        allCanFire_REG_4 = _RANDOM[3'h0][4];
        sliceCanFire_REG = _RANDOM[3'h0][5];
        sliceCanFire_REG_1 = _RANDOM[3'h0][6];
        sliceCanFire_REG_2 = _RANDOM[3'h0][7];
        sliceCanFire_REG_3 = _RANDOM[3'h0][8];
        sliceCanFire_REG_4 = _RANDOM[3'h0][9];
        io_perf_1_value_REG = _RANDOM[3'h0][17:12];
        io_perf_1_value_REG_1 = _RANDOM[3'h0][23:18];
        io_perf_2_value_REG = _RANDOM[3'h0][29:24];
        io_perf_2_value_REG_1 = {_RANDOM[3'h0][31:30], _RANDOM[3'h1][3:0]};
        io_perf_3_value_REG = _RANDOM[3'h1][9:4];
        io_perf_3_value_REG_1 = _RANDOM[3'h1][15:10];
        io_perf_4_value_REG = _RANDOM[3'h1][21:16];
        io_perf_4_value_REG_1 = _RANDOM[3'h1][27:22];
        io_perf_5_value_REG = {_RANDOM[3'h1][31:28], _RANDOM[3'h2][1:0]};
        io_perf_5_value_REG_1 = _RANDOM[3'h2][7:2];
        io_perf_6_value_REG = _RANDOM[3'h2][13:8];
        io_perf_6_value_REG_1 = _RANDOM[3'h2][19:14];
        io_perf_7_value_REG = _RANDOM[3'h2][25:20];
        io_perf_7_value_REG_1 = _RANDOM[3'h2][31:26];
        io_perf_8_value_REG = _RANDOM[3'h3][5:0];
        io_perf_8_value_REG_1 = _RANDOM[3'h3][11:6];
        io_perf_9_value_REG = _RANDOM[3'h3][17:12];
        io_perf_9_value_REG_1 = _RANDOM[3'h3][23:18];
        io_perf_10_value_REG = _RANDOM[3'h3][29:24];
        io_perf_10_value_REG_1 = {_RANDOM[3'h3][31:30], _RANDOM[3'h4][3:0]};
        io_perf_11_value_REG = _RANDOM[3'h4][9:4];
        io_perf_11_value_REG_1 = _RANDOM[3'h4][15:10];
        io_perf_12_value_REG = _RANDOM[3'h4][21:16];
        io_perf_12_value_REG_1 = _RANDOM[3'h4][27:22];
        l1HintArb_io_out_ready_REG = _RANDOM[3'h4][28];
        io_l2Miss_REG = _RANDOM[3'h4][29];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        l1HintArb_io_out_ready_REG = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Slice slices_0 (
    .clock                           (clock),
    .reset                           (reset),
    .io_in_a_ready                   (auto_in_a_ready),
    .io_in_a_valid                   (auto_in_a_valid),
    .io_in_a_bits_opcode             (auto_in_a_bits_opcode),
    .io_in_a_bits_param              (auto_in_a_bits_param),
    .io_in_a_bits_size               (auto_in_a_bits_size),
    .io_in_a_bits_source             (auto_in_a_bits_source),
    .io_in_a_bits_address            (auto_in_a_bits_address),
    .io_in_a_bits_user_vaddr         (auto_in_a_bits_user_vaddr),
    .io_in_a_bits_user_needHint      (auto_in_a_bits_user_needHint),
    .io_in_a_bits_user_reqSource     (auto_in_a_bits_user_reqSource),
    .io_in_a_bits_echo_isKeyword     (auto_in_a_bits_echo_isKeyword),
    .io_in_a_bits_mask               (auto_in_a_bits_mask),
    .io_in_a_bits_data               (auto_in_a_bits_data),
    .io_in_a_bits_corrupt            (auto_in_a_bits_corrupt),
    .io_in_b_ready                   (auto_in_b_ready),
    .io_in_b_valid                   (auto_in_b_valid),
    .io_in_b_bits_opcode             (auto_in_b_bits_opcode),
    .io_in_b_bits_param              (auto_in_b_bits_param),
    .io_in_b_bits_size               (auto_in_b_bits_size),
    .io_in_b_bits_source             (auto_in_b_bits_source),
    .io_in_b_bits_address            (auto_in_b_bits_address),
    .io_in_b_bits_mask               (auto_in_b_bits_mask),
    .io_in_b_bits_data               (auto_in_b_bits_data),
    .io_in_b_bits_corrupt            (auto_in_b_bits_corrupt),
    .io_in_c_ready                   (auto_in_c_ready),
    .io_in_c_valid                   (auto_in_c_valid),
    .io_in_c_bits_opcode             (auto_in_c_bits_opcode),
    .io_in_c_bits_param              (auto_in_c_bits_param),
    .io_in_c_bits_size               (auto_in_c_bits_size),
    .io_in_c_bits_source             (auto_in_c_bits_source),
    .io_in_c_bits_address            (auto_in_c_bits_address),
    .io_in_c_bits_user_vaddr         (auto_in_c_bits_user_vaddr),
    .io_in_c_bits_user_needHint      (auto_in_c_bits_user_needHint),
    .io_in_c_bits_user_reqSource     (auto_in_c_bits_user_reqSource),
    .io_in_c_bits_echo_isKeyword     (auto_in_c_bits_echo_isKeyword),
    .io_in_c_bits_data               (auto_in_c_bits_data),
    .io_in_c_bits_corrupt            (auto_in_c_bits_corrupt),
    .io_in_d_ready                   (auto_in_d_ready & _slice_io_in_d_ready_T),
    .io_in_d_valid                   (_slices_0_io_in_d_valid),
    .io_in_d_bits_opcode             (auto_in_d_bits_opcode),
    .io_in_d_bits_param              (auto_in_d_bits_param),
    .io_in_d_bits_size               (auto_in_d_bits_size),
    .io_in_d_bits_source             (auto_in_d_bits_source),
    .io_in_d_bits_sink               (auto_in_d_bits_sink),
    .io_in_d_bits_denied             (auto_in_d_bits_denied),
    .io_in_d_bits_echo_isKeyword     (auto_in_d_bits_echo_isKeyword),
    .io_in_d_bits_data               (auto_in_d_bits_data),
    .io_in_d_bits_corrupt            (auto_in_d_bits_corrupt),
    .io_in_e_ready                   (auto_in_e_ready),
    .io_in_e_valid                   (auto_in_e_valid),
    .io_in_e_bits_sink               (auto_in_e_bits_sink),
    .io_l1Hint_ready                 (_l1HintArb_io_in_0_ready),
    .io_l1Hint_valid                 (_slices_0_io_l1Hint_valid),
    .io_l1Hint_bits_sourceId         (_slices_0_io_l1Hint_bits_sourceId),
    .io_l1Hint_bits_isKeyword        (_slices_0_io_l1Hint_bits_isKeyword),
    .io_l2Miss                       (_slices_0_io_l2Miss),
    .io_out_a_ready                  (auto_out_a_ready),
    .io_out_a_valid                  (auto_out_a_valid),
    .io_out_a_bits_opcode            (auto_out_a_bits_opcode),
    .io_out_a_bits_param             (auto_out_a_bits_param),
    .io_out_a_bits_size              (auto_out_a_bits_size),
    .io_out_a_bits_source            (auto_out_a_bits_source),
    .io_out_a_bits_address           (auto_out_a_bits_address),
    .io_out_a_bits_echo_blockisdirty (auto_out_a_bits_echo_blockisdirty),
    .io_out_a_bits_mask              (auto_out_a_bits_mask),
    .io_out_a_bits_data              (auto_out_a_bits_data),
    .io_out_a_bits_corrupt           (auto_out_a_bits_corrupt),
    .io_out_b_ready                  (/* unused */),
    .io_out_b_valid                  (1'h0),
    .io_out_b_bits_opcode            (3'h0),
    .io_out_b_bits_param             (2'h0),
    .io_out_b_bits_size              (3'h0),
    .io_out_b_bits_source            (8'h0),
    .io_out_b_bits_address           (48'h0),
    .io_out_b_bits_mask              (32'h0),
    .io_out_b_bits_data              (256'h0),
    .io_out_b_bits_corrupt           (1'h0),
    .io_out_c_ready                  (auto_out_c_ready),
    .io_out_c_valid                  (auto_out_c_valid),
    .io_out_c_bits_opcode            (auto_out_c_bits_opcode),
    .io_out_c_bits_param             (auto_out_c_bits_param),
    .io_out_c_bits_size              (auto_out_c_bits_size),
    .io_out_c_bits_source            (auto_out_c_bits_source),
    .io_out_c_bits_address           (auto_out_c_bits_address),
    .io_out_c_bits_echo_blockisdirty (auto_out_c_bits_echo_blockisdirty),
    .io_out_c_bits_data              (auto_out_c_bits_data),
    .io_out_c_bits_corrupt           (auto_out_c_bits_corrupt),
    .io_out_d_ready                  (auto_out_d_ready),
    .io_out_d_valid                  (auto_out_d_valid),
    .io_out_d_bits_opcode            (auto_out_d_bits_opcode),
    .io_out_d_bits_param             (auto_out_d_bits_param),
    .io_out_d_bits_size              (auto_out_d_bits_size),
    .io_out_d_bits_source            (auto_out_d_bits_source),
    .io_out_d_bits_sink              (auto_out_d_bits_sink),
    .io_out_d_bits_denied            (auto_out_d_bits_denied),
    .io_out_d_bits_echo_blockisdirty (auto_out_d_bits_echo_blockisdirty),
    .io_out_d_bits_data              (auto_out_d_bits_data),
    .io_out_d_bits_corrupt           (auto_out_d_bits_corrupt),
    .io_out_e_ready                  (auto_out_e_ready),
    .io_out_e_valid                  (auto_out_e_valid),
    .io_out_e_bits_sink              (auto_out_e_bits_sink),
    .io_perf_0_value                 (_slices_0_io_perf_0_value),
    .io_perf_1_value                 (_slices_0_io_perf_1_value),
    .io_perf_3_value                 (_slices_0_io_perf_3_value),
    .io_perf_4_value                 (_slices_0_io_perf_4_value),
    .io_perf_5_value                 (_slices_0_io_perf_5_value),
    .io_perf_6_value                 (_slices_0_io_perf_6_value),
    .io_perf_7_value                 (_slices_0_io_perf_7_value),
    .io_perf_8_value                 (_slices_0_io_perf_8_value),
    .io_perf_9_value                 (_slices_0_io_perf_9_value),
    .io_perf_10_value                (_slices_0_io_perf_10_value),
    .io_perf_11_value                (_slices_0_io_perf_11_value)
  );
  Arbiter1_L2ToL1Hint l1HintArb (
    .io_in_0_ready          (_l1HintArb_io_in_0_ready),
    .io_in_0_valid          (_slices_0_io_l1Hint_valid),
    .io_in_0_bits_sourceId  (_slices_0_io_l1Hint_bits_sourceId),
    .io_in_0_bits_isKeyword (_slices_0_io_l1Hint_bits_isKeyword),
    .io_out_ready           (~l1HintArb_io_out_ready_REG),
    .io_out_valid           (_l1HintArb_io_out_valid),
    .io_out_bits_sourceId   (_l1HintArb_io_out_bits_sourceId),
    .io_out_bits_isKeyword  (io_l2_hint_bits_isKeyword)
  );
  assign auto_in_d_valid = _slices_0_io_in_d_valid & _slice_io_in_d_ready_T;
  assign io_l2_hint_valid = hintFire;
  assign io_l2_hint_bits_sourceId = 32'(_l1HintArb_io_out_bits_sourceId - 32'h10);
  assign io_l2Miss = io_l2Miss_REG;
  assign io_perf_1_value = io_perf_1_value_REG_1;
  assign io_perf_2_value = io_perf_2_value_REG_1;
  assign io_perf_3_value = io_perf_3_value_REG_1;
  assign io_perf_4_value = io_perf_4_value_REG_1;
  assign io_perf_5_value = io_perf_5_value_REG_1;
  assign io_perf_6_value = io_perf_6_value_REG_1;
  assign io_perf_7_value = io_perf_7_value_REG_1;
  assign io_perf_8_value = io_perf_8_value_REG_1;
  assign io_perf_9_value = io_perf_9_value_REG_1;
  assign io_perf_10_value = io_perf_10_value_REG_1;
  assign io_perf_11_value = io_perf_11_value_REG_1;
  assign io_perf_12_value = io_perf_12_value_REG_1;
endmodule

