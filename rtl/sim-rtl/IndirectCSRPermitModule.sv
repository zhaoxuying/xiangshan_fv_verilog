// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IndirectCSRPermitModule(
  input  [11:0] io_in_csrAccess_addr,
  input  [1:0]  io_in_privState_PRVM,
  input         io_in_privState_V,
  input  [63:0] io_in_aia_miselect,
  input  [63:0] io_in_aia_siselect,
  input  [63:0] io_in_aia_vsiselect,
  input         io_in_aia_mvienSEIE,
  input         io_in_xstateen_mstateen0_AIA,
  input         io_in_xstateen_mstateen0_IMSIC,
  input         io_in_xstateen_hstateen0_IMSIC,
  output        io_out_indirectCSR_EX_II,
  output        io_out_indirectCSR_EX_VI
);

  wire _rwMireg_EX_II_T_6 = io_in_aia_miselect > 64'h2F;
  wire _rwMireg_EX_II_T_7 = io_in_aia_miselect < 64'h40;
  wire _rwSireg_EX_II_T_26 = io_in_aia_siselect > 64'h2F;
  wire _rwSireg_EX_II_T_27 = io_in_aia_siselect < 64'h40;
  wire _rwSireg_EX_II_T_34 = io_in_aia_siselect > 64'h6F;
  wire _rwSireg_EX_II_T_35 = io_in_aia_siselect < 64'h100;
  wire PrvmIsS = io_in_privState_PRVM == 2'h1;
  wire rwSireg_EX_II_isModeHS = ~io_in_privState_V & PrvmIsS;
  wire _rwSireg2_6_EX_VI_T_2 = io_in_aia_vsiselect > 64'h2F;
  wire _rwSireg2_6_EX_VI_T_3 = io_in_aia_vsiselect < 64'h40;
  wire _rwVSireg_EX_II_T = io_in_aia_vsiselect > 64'h6F;
  wire _rwVSireg_EX_II_T_1 = io_in_aia_vsiselect < 64'h100;
  wire _rwSireg_EX_VI_T_14 = io_in_csrAccess_addr == 12'h151;
  wire _rwSireg2_6_EX_II_T = io_in_csrAccess_addr > 12'h151;
  wire _rwSireg2_6_EX_II_T_1 = io_in_csrAccess_addr < 12'h158;
  wire _rwSireg2_6_EX_II_T_3 = io_in_csrAccess_addr != 12'h154;
  wire rwSireg2_6_EX_VI =
    io_in_privState_V
    & (_rwSireg2_6_EX_VI_T_2 & _rwSireg2_6_EX_VI_T_3 | _rwVSireg_EX_II_T
       & _rwVSireg_EX_II_T_1) & _rwSireg2_6_EX_II_T & _rwSireg2_6_EX_II_T_1
    & _rwSireg2_6_EX_II_T_3;
  wire rwVSireg_EX_II_v_PrvmIsM = &io_in_privState_PRVM;
  wire rwVSireg_EX_II_isModeM = rwVSireg_EX_II_v_PrvmIsM;
  assign io_out_indirectCSR_EX_II =
    (_rwMireg_EX_II_T_6 & _rwMireg_EX_II_T_7 & io_in_aia_miselect[0]
     | ~(_rwMireg_EX_II_T_6 & _rwMireg_EX_II_T_7 | io_in_aia_miselect > 64'h6F
         & io_in_aia_miselect < 64'h100)) & io_in_csrAccess_addr == 12'h351
    | io_in_csrAccess_addr > 12'h351 & io_in_csrAccess_addr < 12'h358
    & io_in_csrAccess_addr != 12'h354
    | (~io_in_privState_V
       & (_rwSireg_EX_II_T_26 & _rwSireg_EX_II_T_27 & io_in_aia_siselect[0]
          | ~(_rwSireg_EX_II_T_26 & _rwSireg_EX_II_T_27 | _rwSireg_EX_II_T_34
              & _rwSireg_EX_II_T_35)) | rwSireg_EX_II_isModeHS
       & (io_in_aia_mvienSEIE & _rwSireg_EX_II_T_34 & _rwSireg_EX_II_T_35
          | ~io_in_xstateen_mstateen0_AIA & _rwSireg_EX_II_T_26 & _rwSireg_EX_II_T_27
          | ~io_in_xstateen_mstateen0_IMSIC & _rwSireg_EX_II_T_34 & _rwSireg_EX_II_T_35)
       | io_in_privState_V
       & (~(_rwSireg2_6_EX_VI_T_2 & _rwSireg2_6_EX_VI_T_3 | _rwVSireg_EX_II_T
            & _rwVSireg_EX_II_T_1) | ~io_in_xstateen_mstateen0_AIA & _rwSireg2_6_EX_VI_T_2
          & _rwSireg2_6_EX_VI_T_3 | ~io_in_xstateen_mstateen0_IMSIC & _rwVSireg_EX_II_T
          & _rwVSireg_EX_II_T_1)) & _rwSireg_EX_VI_T_14 | _rwSireg2_6_EX_II_T
    & _rwSireg2_6_EX_II_T_1 & _rwSireg2_6_EX_II_T_3 & ~rwSireg2_6_EX_VI
    | (~(_rwVSireg_EX_II_T & _rwVSireg_EX_II_T_1) | ~rwVSireg_EX_II_isModeM
       & ~io_in_xstateen_mstateen0_IMSIC) & io_in_csrAccess_addr == 12'h251
    | io_in_csrAccess_addr > 12'h251 & io_in_csrAccess_addr < 12'h258
    & io_in_csrAccess_addr != 12'h254;
  assign io_out_indirectCSR_EX_VI =
    io_in_privState_V
    & (_rwSireg2_6_EX_VI_T_2 & _rwSireg2_6_EX_VI_T_3 | _rwVSireg_EX_II_T
       & _rwVSireg_EX_II_T_1 & ~io_in_xstateen_hstateen0_IMSIC) & _rwSireg_EX_VI_T_14
    | rwSireg2_6_EX_VI;
endmodule

