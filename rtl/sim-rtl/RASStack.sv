// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module RASStack(
  input         clock,
  input         reset,
  input         io_spec_push_valid,
  input         io_spec_pop_valid,
  input  [49:0] io_spec_push_addr,
  input         io_s2_fire,
  input         io_s3_fire,
  input         io_s3_cancel,
  input  [2:0]  io_s3_meta_ssp,
  input  [2:0]  io_s3_meta_sctr,
  input         io_s3_meta_TOSW_flag,
  input  [3:0]  io_s3_meta_TOSW_value,
  input         io_s3_meta_TOSR_flag,
  input  [3:0]  io_s3_meta_TOSR_value,
  input         io_s3_meta_NOS_flag,
  input  [3:0]  io_s3_meta_NOS_value,
  input         io_s3_missed_pop,
  input         io_s3_missed_push,
  input  [49:0] io_s3_pushAddr,
  output [49:0] io_spec_pop_addr,
  input         io_commit_valid,
  input         io_commit_push_valid,
  input         io_commit_pop_valid,
  input         io_commit_meta_TOSW_flag,
  input  [3:0]  io_commit_meta_TOSW_value,
  input  [2:0]  io_commit_meta_ssp,
  input         io_redirect_valid,
  input         io_redirect_isCall,
  input         io_redirect_isRet,
  input  [2:0]  io_redirect_meta_ssp,
  input  [2:0]  io_redirect_meta_sctr,
  input         io_redirect_meta_TOSW_flag,
  input  [3:0]  io_redirect_meta_TOSW_value,
  input         io_redirect_meta_TOSR_flag,
  input  [3:0]  io_redirect_meta_TOSR_value,
  input         io_redirect_meta_NOS_flag,
  input  [3:0]  io_redirect_meta_NOS_value,
  input  [49:0] io_redirect_callAddr,
  output [2:0]  io_ssp,
  output [2:0]  io_sctr,
  output        io_TOSR_flag,
  output [3:0]  io_TOSR_value,
  output        io_TOSW_flag,
  output [3:0]  io_TOSW_value,
  output        io_NOS_flag,
  output [3:0]  io_NOS_value,
  output        io_spec_near_overflow
);

  reg  [49:0]       commit_stack_0_retAddr;
  reg  [2:0]        commit_stack_0_ctr;
  reg  [49:0]       commit_stack_1_retAddr;
  reg  [2:0]        commit_stack_1_ctr;
  reg  [49:0]       commit_stack_2_retAddr;
  reg  [2:0]        commit_stack_2_ctr;
  reg  [49:0]       commit_stack_3_retAddr;
  reg  [2:0]        commit_stack_3_ctr;
  reg  [49:0]       commit_stack_4_retAddr;
  reg  [2:0]        commit_stack_4_ctr;
  reg  [49:0]       commit_stack_5_retAddr;
  reg  [2:0]        commit_stack_5_ctr;
  reg  [49:0]       commit_stack_6_retAddr;
  reg  [2:0]        commit_stack_6_ctr;
  reg  [49:0]       commit_stack_7_retAddr;
  reg  [2:0]        commit_stack_7_ctr;
  reg  [49:0]       spec_queue_0_retAddr;
  reg  [2:0]        spec_queue_0_ctr;
  reg  [49:0]       spec_queue_1_retAddr;
  reg  [2:0]        spec_queue_1_ctr;
  reg  [49:0]       spec_queue_2_retAddr;
  reg  [2:0]        spec_queue_2_ctr;
  reg  [49:0]       spec_queue_3_retAddr;
  reg  [2:0]        spec_queue_3_ctr;
  reg  [49:0]       spec_queue_4_retAddr;
  reg  [2:0]        spec_queue_4_ctr;
  reg  [49:0]       spec_queue_5_retAddr;
  reg  [2:0]        spec_queue_5_ctr;
  reg  [49:0]       spec_queue_6_retAddr;
  reg  [2:0]        spec_queue_6_ctr;
  reg  [49:0]       spec_queue_7_retAddr;
  reg  [2:0]        spec_queue_7_ctr;
  reg  [49:0]       spec_queue_8_retAddr;
  reg  [2:0]        spec_queue_8_ctr;
  reg  [49:0]       spec_queue_9_retAddr;
  reg  [2:0]        spec_queue_9_ctr;
  reg  [49:0]       spec_queue_10_retAddr;
  reg  [2:0]        spec_queue_10_ctr;
  reg  [49:0]       spec_queue_11_retAddr;
  reg  [2:0]        spec_queue_11_ctr;
  reg  [49:0]       spec_queue_12_retAddr;
  reg  [2:0]        spec_queue_12_ctr;
  reg  [49:0]       spec_queue_13_retAddr;
  reg  [2:0]        spec_queue_13_ctr;
  reg  [49:0]       spec_queue_14_retAddr;
  reg  [2:0]        spec_queue_14_ctr;
  reg  [49:0]       spec_queue_15_retAddr;
  reg  [2:0]        spec_queue_15_ctr;
  reg               spec_nos_0_flag;
  reg  [3:0]        spec_nos_0_value;
  reg               spec_nos_1_flag;
  reg  [3:0]        spec_nos_1_value;
  reg               spec_nos_2_flag;
  reg  [3:0]        spec_nos_2_value;
  reg               spec_nos_3_flag;
  reg  [3:0]        spec_nos_3_value;
  reg               spec_nos_4_flag;
  reg  [3:0]        spec_nos_4_value;
  reg               spec_nos_5_flag;
  reg  [3:0]        spec_nos_5_value;
  reg               spec_nos_6_flag;
  reg  [3:0]        spec_nos_6_value;
  reg               spec_nos_7_flag;
  reg  [3:0]        spec_nos_7_value;
  reg               spec_nos_8_flag;
  reg  [3:0]        spec_nos_8_value;
  reg               spec_nos_9_flag;
  reg  [3:0]        spec_nos_9_value;
  reg               spec_nos_10_flag;
  reg  [3:0]        spec_nos_10_value;
  reg               spec_nos_11_flag;
  reg  [3:0]        spec_nos_11_value;
  reg               spec_nos_12_flag;
  reg  [3:0]        spec_nos_12_value;
  reg               spec_nos_13_flag;
  reg  [3:0]        spec_nos_13_value;
  reg               spec_nos_14_flag;
  reg  [3:0]        spec_nos_14_value;
  reg               spec_nos_15_flag;
  reg  [3:0]        spec_nos_15_value;
  reg  [2:0]        nsp;
  reg  [2:0]        ssp;
  reg  [2:0]        sctr;
  reg               TOSR_flag;
  reg  [3:0]        TOSR_value;
  reg               TOSW_flag;
  reg  [3:0]        TOSW_value;
  reg               BOS_flag;
  reg  [3:0]        BOS_value;
  reg               spec_near_overflowed;
  reg  [49:0]       writeBypassEntry_retAddr;
  reg  [2:0]        writeBypassEntry_ctr;
  reg               writeBypassNos_flag;
  reg  [3:0]        writeBypassNos_value;
  reg               writeBypassValid;
  wire              _realPush_T_4 = io_redirect_valid & io_redirect_isCall;
  wire              _GEN = TOSR_value >= BOS_value;
  wire              topEntry_inflightValid =
    (TOSR_flag ^ BOS_flag ^ _GEN) & (TOSR_flag ^ TOSW_flag ^ TOSR_value < TOSW_value);
  wire [15:0][49:0] _GEN_0 =
    {{spec_queue_15_retAddr},
     {spec_queue_14_retAddr},
     {spec_queue_13_retAddr},
     {spec_queue_12_retAddr},
     {spec_queue_11_retAddr},
     {spec_queue_10_retAddr},
     {spec_queue_9_retAddr},
     {spec_queue_8_retAddr},
     {spec_queue_7_retAddr},
     {spec_queue_6_retAddr},
     {spec_queue_5_retAddr},
     {spec_queue_4_retAddr},
     {spec_queue_3_retAddr},
     {spec_queue_2_retAddr},
     {spec_queue_1_retAddr},
     {spec_queue_0_retAddr}};
  wire [49:0]       _GEN_1 = _GEN_0[TOSR_value];
  wire [15:0][2:0]  _GEN_2 =
    {{spec_queue_15_ctr},
     {spec_queue_14_ctr},
     {spec_queue_13_ctr},
     {spec_queue_12_ctr},
     {spec_queue_11_ctr},
     {spec_queue_10_ctr},
     {spec_queue_9_ctr},
     {spec_queue_8_ctr},
     {spec_queue_7_ctr},
     {spec_queue_6_ctr},
     {spec_queue_5_ctr},
     {spec_queue_4_ctr},
     {spec_queue_3_ctr},
     {spec_queue_2_ctr},
     {spec_queue_1_ctr},
     {spec_queue_0_ctr}};
  wire [7:0][49:0]  _GEN_3 =
    {{commit_stack_7_retAddr},
     {commit_stack_6_retAddr},
     {commit_stack_5_retAddr},
     {commit_stack_4_retAddr},
     {commit_stack_3_retAddr},
     {commit_stack_2_retAddr},
     {commit_stack_1_retAddr},
     {commit_stack_0_retAddr}};
  wire [49:0]       _GEN_4 = _GEN_3[ssp];
  wire [7:0][2:0]   _GEN_5 =
    {{commit_stack_7_ctr},
     {commit_stack_6_ctr},
     {commit_stack_5_ctr},
     {commit_stack_4_ctr},
     {commit_stack_3_ctr},
     {commit_stack_2_ctr},
     {commit_stack_1_ctr},
     {commit_stack_0_ctr}};
  wire [15:0]       _GEN_6 =
    {{spec_nos_15_flag},
     {spec_nos_14_flag},
     {spec_nos_13_flag},
     {spec_nos_12_flag},
     {spec_nos_11_flag},
     {spec_nos_10_flag},
     {spec_nos_9_flag},
     {spec_nos_8_flag},
     {spec_nos_7_flag},
     {spec_nos_6_flag},
     {spec_nos_5_flag},
     {spec_nos_4_flag},
     {spec_nos_3_flag},
     {spec_nos_2_flag},
     {spec_nos_1_flag},
     {spec_nos_0_flag}};
  wire [15:0][3:0]  _GEN_7 =
    {{spec_nos_15_value},
     {spec_nos_14_value},
     {spec_nos_13_value},
     {spec_nos_12_value},
     {spec_nos_11_value},
     {spec_nos_10_value},
     {spec_nos_9_value},
     {spec_nos_8_value},
     {spec_nos_7_value},
     {spec_nos_6_value},
     {spec_nos_5_value},
     {spec_nos_4_value},
     {spec_nos_3_value},
     {spec_nos_2_value},
     {spec_nos_1_value},
     {spec_nos_0_value}};
  wire [3:0]        _GEN_8 = _GEN_7[TOSR_value];
  wire              topNos_flag =
    writeBypassValid ? writeBypassNos_flag : _GEN_6[TOSR_value];
  wire [3:0]        topNos_value = writeBypassValid ? writeBypassNos_value : _GEN_8;
  wire              differentFlag_14 = io_redirect_meta_TOSR_flag ^ BOS_flag;
  wire              compare_14 = io_redirect_meta_TOSR_value < BOS_value;
  wire              differentFlag_15 =
    io_redirect_meta_TOSR_flag ^ io_redirect_meta_TOSW_flag;
  wire              compare_15 =
    io_redirect_meta_TOSR_value < io_redirect_meta_TOSW_value;
  wire              redirectTopEntry_inflightValid =
    (differentFlag_14 ^ ~compare_14) & (differentFlag_15 ^ compare_15);
  wire [49:0]       writeEntry_retAddr =
    _realPush_T_4 ? io_redirect_callAddr : io_spec_push_addr;
  wire              _writeEntry_ctr_T_1 =
    (redirectTopEntry_inflightValid
       ? _GEN_0[io_redirect_meta_TOSR_value]
       : _GEN_3[io_redirect_meta_ssp]) == io_redirect_callAddr;
  wire [2:0]        _sctr_T_12 = 3'(io_redirect_meta_sctr + 3'h1);
  wire              _writeEntry_ctr_T_7 =
    (writeBypassValid
       ? writeBypassEntry_retAddr
       : topEntry_inflightValid ? _GEN_1 : _GEN_4) == io_spec_push_addr;
  wire [2:0]        _sctr_T = 3'(sctr + 3'h1);
  reg  [49:0]       timingTop_retAddr;
  reg  [49:0]       realWriteEntry_next_retAddr;
  reg  [2:0]        realWriteEntry_next_ctr;
  wire              _GEN_9 = io_redirect_isCall | ~io_s3_missed_push;
  wire [49:0]       realWriteEntry_retAddr =
    _GEN_9 ? realWriteEntry_next_retAddr : io_s3_pushAddr;
  reg  [3:0]        realWriteAddr_next_value;
  reg               realNos_next_flag;
  reg  [3:0]        realNos_next_value;
  reg               realPush_r;
  reg               realPush_REG;
  wire              realPush =
    io_s3_fire & (~io_s3_cancel & realPush_r | io_s3_missed_push) | realPush_REG;
  wire [4:0]        _BOS_flipped_new_ptr_new_ptr_T_1 =
    5'({io_commit_meta_TOSW_flag, io_commit_meta_TOSW_value} + 5'hF);
  wire [4:0]        _GEN_10 =
    5'({io_redirect_meta_TOSW_flag, io_redirect_meta_TOSW_value} + 5'h1);
  wire              _GEN_11 = _writeEntry_ctr_T_1 & io_redirect_meta_sctr != 3'h7;
  wire              _GEN_12 =
    io_redirect_isRet & (differentFlag_14 ^ ~compare_14)
    & (differentFlag_15 ^ compare_15);
  wire [2:0]        _sctr_T_16 = 3'(io_redirect_meta_ssp - 3'h1);
  wire [2:0]        _sctr_T_8 = 3'(io_s3_meta_ssp - 3'h1);
  wire [4:0]        _GEN_13 = 5'({io_s3_meta_TOSW_flag, io_s3_meta_TOSW_value} + 5'h1);
  wire [4:0]        _GEN_14 = 5'({TOSW_flag, TOSW_value} + 5'h1);
  wire              _GEN_15 = _writeEntry_ctr_T_7 & sctr != 3'h7;
  wire [2:0]        _sctr_T_4 = 3'(ssp - 3'h1);
  wire              writeBypassValidWire =
    _realPush_T_4 | ~io_redirect_valid
    & (io_s2_fire ? io_spec_push_valid : ~io_s3_fire & writeBypassValid);
  wire              differentFlag_10 = io_s3_meta_TOSR_flag ^ BOS_flag;
  wire              compare_10 = io_s3_meta_TOSR_value < BOS_value;
  wire              differentFlag_11 = io_s3_meta_TOSR_flag ^ io_s3_meta_TOSW_flag;
  wire              compare_11 = io_s3_meta_TOSR_value < io_s3_meta_TOSW_value;
  wire              s3TopEntry_inflightValid =
    (differentFlag_10 ^ ~compare_10) & (differentFlag_11 ^ compare_11);
  wire              _GEN_16 = io_redirect_meta_NOS_value >= BOS_value;
  wire              _GEN_17 = io_redirect_meta_NOS_flag ^ BOS_flag ^ _GEN_16;
  wire              _GEN_18 = topNos_value >= BOS_value;
  wire              _GEN_19 = topNos_flag ^ BOS_flag ^ _GEN_18;
  wire              _GEN_20 = io_s3_meta_NOS_value >= BOS_value;
  wire              _GEN_21 = io_s3_meta_NOS_flag ^ BOS_flag ^ _GEN_20;
  wire              _s3_missPushEntry_ctr_T =
    (s3TopEntry_inflightValid
       ? _GEN_0[io_s3_meta_TOSR_value]
       : _GEN_3[io_s3_meta_ssp]) == io_s3_pushAddr;
  wire              _s3_missPushEntry_ctr_T_2 =
    _s3_missPushEntry_ctr_T
    & (s3TopEntry_inflightValid
         ? _GEN_2[io_s3_meta_TOSR_value]
         : _GEN_5[io_s3_meta_ssp]) != 3'h7;
  wire [2:0]        _sctr_T_10 = 3'(io_s3_meta_sctr + 3'h1);
  wire [3:0]        realWriteAddr_value =
    _GEN_9 ? realWriteAddr_next_value : io_s3_meta_TOSW_value;
  wire              realNos_flag = _GEN_9 ? realNos_next_flag : io_s3_meta_TOSR_flag;
  wire [3:0]        realNos_value = _GEN_9 ? realNos_next_value : io_s3_meta_TOSR_value;
  wire [2:0]        _GEN_22 = _GEN_5[nsp];
  wire [2:0]        _commit_stack_ctr_T = 3'(_GEN_22 - 3'h1);
  wire              _GEN_23 = io_commit_meta_ssp == 3'h0;
  wire              _GEN_24 = io_commit_pop_valid & (|_GEN_22) & _GEN_23;
  wire              _GEN_25 = io_commit_meta_ssp == 3'h1;
  wire              _GEN_26 = io_commit_pop_valid & (|_GEN_22) & _GEN_25;
  wire              _GEN_27 = io_commit_meta_ssp == 3'h2;
  wire              _GEN_28 = io_commit_pop_valid & (|_GEN_22) & _GEN_27;
  wire              _GEN_29 = io_commit_meta_ssp == 3'h3;
  wire              _GEN_30 = io_commit_pop_valid & (|_GEN_22) & _GEN_29;
  wire              _GEN_31 = io_commit_meta_ssp == 3'h4;
  wire              _GEN_32 = io_commit_pop_valid & (|_GEN_22) & _GEN_31;
  wire              _GEN_33 = io_commit_meta_ssp == 3'h5;
  wire              _GEN_34 = io_commit_pop_valid & (|_GEN_22) & _GEN_33;
  wire              _GEN_35 = io_commit_meta_ssp == 3'h6;
  wire              _GEN_36 = io_commit_pop_valid & (|_GEN_22) & _GEN_35;
  wire              _GEN_37 = io_commit_pop_valid & (|_GEN_22) & (&io_commit_meta_ssp);
  wire              _GEN_38 =
    _GEN_22 != 3'h7 & _GEN_3[nsp] == _GEN_0[io_commit_meta_TOSW_value];
  wire [2:0]        _nsp_T_2 = 3'(io_commit_meta_ssp + 3'h1);
  wire              _GEN_39 = _nsp_T_2 == 3'h0;
  wire              _GEN_40 = _nsp_T_2 == 3'h1;
  wire              _GEN_41 = _nsp_T_2 == 3'h2;
  wire              _GEN_42 = _nsp_T_2 == 3'h3;
  wire              _GEN_43 = _nsp_T_2 == 3'h4;
  wire              _GEN_44 = _nsp_T_2 == 3'h5;
  wire              _GEN_45 = _nsp_T_2 == 3'h6;
  wire [4:0]        _GEN_46 = {1'h0, BOS_value};
  wire [2:0]        _commit_stack_ctr_T_2 = 3'(_GEN_22 + 3'h1);
  wire              inflightValid_8 =
    _GEN_17
    & (io_redirect_meta_NOS_flag ^ io_redirect_meta_TOSW_flag
       ^ io_redirect_meta_NOS_value < io_redirect_meta_TOSW_value);
  wire              _GEN_47 =
    io_s3_missed_pop & (differentFlag_10 ^ ~compare_10) & (differentFlag_11 ^ compare_11);
  wire              inflightValid_6 =
    _GEN_21
    & (io_s3_meta_NOS_flag ^ io_s3_meta_TOSW_flag
       ^ io_s3_meta_NOS_value < io_s3_meta_TOSW_value);
  wire              _GEN_48 = _s3_missPushEntry_ctr_T & io_s3_meta_sctr != 3'h7;
  wire              inflightValid_4 =
    _GEN_19 & (topNos_flag ^ TOSW_flag ^ topNos_value < TOSW_value);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      commit_stack_0_retAddr <= 50'h0;
      commit_stack_0_ctr <= 3'h0;
      commit_stack_1_retAddr <= 50'h0;
      commit_stack_1_ctr <= 3'h0;
      commit_stack_2_retAddr <= 50'h0;
      commit_stack_2_ctr <= 3'h0;
      commit_stack_3_retAddr <= 50'h0;
      commit_stack_3_ctr <= 3'h0;
      commit_stack_4_retAddr <= 50'h0;
      commit_stack_4_ctr <= 3'h0;
      commit_stack_5_retAddr <= 50'h0;
      commit_stack_5_ctr <= 3'h0;
      commit_stack_6_retAddr <= 50'h0;
      commit_stack_6_ctr <= 3'h0;
      commit_stack_7_retAddr <= 50'h0;
      commit_stack_7_ctr <= 3'h0;
      spec_queue_0_retAddr <= 50'h0;
      spec_queue_0_ctr <= 3'h0;
      spec_queue_1_retAddr <= 50'h0;
      spec_queue_1_ctr <= 3'h0;
      spec_queue_2_retAddr <= 50'h0;
      spec_queue_2_ctr <= 3'h0;
      spec_queue_3_retAddr <= 50'h0;
      spec_queue_3_ctr <= 3'h0;
      spec_queue_4_retAddr <= 50'h0;
      spec_queue_4_ctr <= 3'h0;
      spec_queue_5_retAddr <= 50'h0;
      spec_queue_5_ctr <= 3'h0;
      spec_queue_6_retAddr <= 50'h0;
      spec_queue_6_ctr <= 3'h0;
      spec_queue_7_retAddr <= 50'h0;
      spec_queue_7_ctr <= 3'h0;
      spec_queue_8_retAddr <= 50'h0;
      spec_queue_8_ctr <= 3'h0;
      spec_queue_9_retAddr <= 50'h0;
      spec_queue_9_ctr <= 3'h0;
      spec_queue_10_retAddr <= 50'h0;
      spec_queue_10_ctr <= 3'h0;
      spec_queue_11_retAddr <= 50'h0;
      spec_queue_11_ctr <= 3'h0;
      spec_queue_12_retAddr <= 50'h0;
      spec_queue_12_ctr <= 3'h0;
      spec_queue_13_retAddr <= 50'h0;
      spec_queue_13_ctr <= 3'h0;
      spec_queue_14_retAddr <= 50'h0;
      spec_queue_14_ctr <= 3'h0;
      spec_queue_15_retAddr <= 50'h0;
      spec_queue_15_ctr <= 3'h0;
      spec_nos_0_flag <= 1'h0;
      spec_nos_0_value <= 4'h0;
      spec_nos_1_flag <= 1'h0;
      spec_nos_1_value <= 4'h0;
      spec_nos_2_flag <= 1'h0;
      spec_nos_2_value <= 4'h0;
      spec_nos_3_flag <= 1'h0;
      spec_nos_3_value <= 4'h0;
      spec_nos_4_flag <= 1'h0;
      spec_nos_4_value <= 4'h0;
      spec_nos_5_flag <= 1'h0;
      spec_nos_5_value <= 4'h0;
      spec_nos_6_flag <= 1'h0;
      spec_nos_6_value <= 4'h0;
      spec_nos_7_flag <= 1'h0;
      spec_nos_7_value <= 4'h0;
      spec_nos_8_flag <= 1'h0;
      spec_nos_8_value <= 4'h0;
      spec_nos_9_flag <= 1'h0;
      spec_nos_9_value <= 4'h0;
      spec_nos_10_flag <= 1'h0;
      spec_nos_10_value <= 4'h0;
      spec_nos_11_flag <= 1'h0;
      spec_nos_11_value <= 4'h0;
      spec_nos_12_flag <= 1'h0;
      spec_nos_12_value <= 4'h0;
      spec_nos_13_flag <= 1'h0;
      spec_nos_13_value <= 4'h0;
      spec_nos_14_flag <= 1'h0;
      spec_nos_14_value <= 4'h0;
      spec_nos_15_flag <= 1'h0;
      spec_nos_15_value <= 4'h0;
      nsp <= 3'h0;
      ssp <= 3'h0;
      sctr <= 3'h0;
      TOSR_flag <= 1'h1;
      TOSR_value <= 4'hF;
      TOSW_flag <= 1'h0;
      TOSW_value <= 4'h0;
      BOS_flag <= 1'h0;
      BOS_value <= 4'h0;
      spec_near_overflowed <= 1'h0;
      writeBypassValid <= 1'h0;
      timingTop_retAddr <= 50'h0;
    end
    else begin
      if (~io_commit_push_valid | _GEN_38 | ~_GEN_39) begin
      end
      else
        commit_stack_0_retAddr <= _GEN_0[io_commit_meta_TOSW_value];
      if (io_commit_push_valid) begin
        if (_GEN_38) begin
          if (_GEN_23)
            commit_stack_0_ctr <= _commit_stack_ctr_T_2;
          else if (_GEN_24)
            commit_stack_0_ctr <= _commit_stack_ctr_T;
          if (_GEN_25)
            commit_stack_1_ctr <= _commit_stack_ctr_T_2;
          else if (_GEN_26)
            commit_stack_1_ctr <= _commit_stack_ctr_T;
          if (_GEN_27)
            commit_stack_2_ctr <= _commit_stack_ctr_T_2;
          else if (_GEN_28)
            commit_stack_2_ctr <= _commit_stack_ctr_T;
          if (_GEN_29)
            commit_stack_3_ctr <= _commit_stack_ctr_T_2;
          else if (_GEN_30)
            commit_stack_3_ctr <= _commit_stack_ctr_T;
          if (_GEN_31)
            commit_stack_4_ctr <= _commit_stack_ctr_T_2;
          else if (_GEN_32)
            commit_stack_4_ctr <= _commit_stack_ctr_T;
          if (_GEN_33)
            commit_stack_5_ctr <= _commit_stack_ctr_T_2;
          else if (_GEN_34)
            commit_stack_5_ctr <= _commit_stack_ctr_T;
          if (_GEN_35)
            commit_stack_6_ctr <= _commit_stack_ctr_T_2;
          else if (_GEN_36)
            commit_stack_6_ctr <= _commit_stack_ctr_T;
          if (&io_commit_meta_ssp)
            commit_stack_7_ctr <= _commit_stack_ctr_T_2;
          else if (_GEN_37)
            commit_stack_7_ctr <= _commit_stack_ctr_T;
          nsp <= io_commit_meta_ssp;
        end
        else begin
          if (_GEN_39)
            commit_stack_0_ctr <= 3'h0;
          else if (_GEN_24)
            commit_stack_0_ctr <= _commit_stack_ctr_T;
          if (_GEN_40)
            commit_stack_1_ctr <= 3'h0;
          else if (_GEN_26)
            commit_stack_1_ctr <= _commit_stack_ctr_T;
          if (_GEN_41)
            commit_stack_2_ctr <= 3'h0;
          else if (_GEN_28)
            commit_stack_2_ctr <= _commit_stack_ctr_T;
          if (_GEN_42)
            commit_stack_3_ctr <= 3'h0;
          else if (_GEN_30)
            commit_stack_3_ctr <= _commit_stack_ctr_T;
          if (_GEN_43)
            commit_stack_4_ctr <= 3'h0;
          else if (_GEN_32)
            commit_stack_4_ctr <= _commit_stack_ctr_T;
          if (_GEN_44)
            commit_stack_5_ctr <= 3'h0;
          else if (_GEN_34)
            commit_stack_5_ctr <= _commit_stack_ctr_T;
          if (_GEN_45)
            commit_stack_6_ctr <= 3'h0;
          else if (_GEN_36)
            commit_stack_6_ctr <= _commit_stack_ctr_T;
          if (&_nsp_T_2)
            commit_stack_7_ctr <= 3'h0;
          else if (_GEN_37)
            commit_stack_7_ctr <= _commit_stack_ctr_T;
          nsp <= _nsp_T_2;
        end
        BOS_flag <= io_commit_meta_TOSW_flag;
        BOS_value <= io_commit_meta_TOSW_value;
      end
      else begin
        if (_GEN_24)
          commit_stack_0_ctr <= _commit_stack_ctr_T;
        if (_GEN_26)
          commit_stack_1_ctr <= _commit_stack_ctr_T;
        if (_GEN_28)
          commit_stack_2_ctr <= _commit_stack_ctr_T;
        if (_GEN_30)
          commit_stack_3_ctr <= _commit_stack_ctr_T;
        if (_GEN_32)
          commit_stack_4_ctr <= _commit_stack_ctr_T;
        if (_GEN_34)
          commit_stack_5_ctr <= _commit_stack_ctr_T;
        if (_GEN_36)
          commit_stack_6_ctr <= _commit_stack_ctr_T;
        if (_GEN_37)
          commit_stack_7_ctr <= _commit_stack_ctr_T;
        if (io_commit_pop_valid) begin
          if (|_GEN_22)
            nsp <= io_commit_meta_ssp;
          else
            nsp <= 3'(io_commit_meta_ssp - 3'h1);
        end
        if (io_commit_valid
            & (io_commit_meta_TOSW_flag == BOS_flag
                 ? {1'h0, 4'(io_commit_meta_TOSW_value - BOS_value)}
                 : 5'(5'({1'h0, io_commit_meta_TOSW_value} - 5'h10)
                      - _GEN_46)) > 5'h2) begin
          BOS_flag <= ~(_BOS_flipped_new_ptr_new_ptr_T_1[4]);
          BOS_value <= _BOS_flipped_new_ptr_new_ptr_T_1[3:0];
        end
      end
      if (~io_commit_push_valid | _GEN_38 | ~_GEN_40) begin
      end
      else
        commit_stack_1_retAddr <= _GEN_0[io_commit_meta_TOSW_value];
      if (~io_commit_push_valid | _GEN_38 | ~_GEN_41) begin
      end
      else
        commit_stack_2_retAddr <= _GEN_0[io_commit_meta_TOSW_value];
      if (~io_commit_push_valid | _GEN_38 | ~_GEN_42) begin
      end
      else
        commit_stack_3_retAddr <= _GEN_0[io_commit_meta_TOSW_value];
      if (~io_commit_push_valid | _GEN_38 | ~_GEN_43) begin
      end
      else
        commit_stack_4_retAddr <= _GEN_0[io_commit_meta_TOSW_value];
      if (~io_commit_push_valid | _GEN_38 | ~_GEN_44) begin
      end
      else
        commit_stack_5_retAddr <= _GEN_0[io_commit_meta_TOSW_value];
      if (~io_commit_push_valid | _GEN_38 | ~_GEN_45) begin
      end
      else
        commit_stack_6_retAddr <= _GEN_0[io_commit_meta_TOSW_value];
      if (~io_commit_push_valid | _GEN_38 | ~(&_nsp_T_2)) begin
      end
      else
        commit_stack_7_retAddr <= _GEN_0[io_commit_meta_TOSW_value];
      if (realPush & realWriteAddr_value == 4'h0) begin
        spec_queue_0_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_0_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_0_ctr <= _sctr_T_10;
        else
          spec_queue_0_ctr <= 3'h0;
        spec_nos_0_flag <= realNos_flag;
        spec_nos_0_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'h1) begin
        spec_queue_1_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_1_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_1_ctr <= _sctr_T_10;
        else
          spec_queue_1_ctr <= 3'h0;
        spec_nos_1_flag <= realNos_flag;
        spec_nos_1_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'h2) begin
        spec_queue_2_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_2_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_2_ctr <= _sctr_T_10;
        else
          spec_queue_2_ctr <= 3'h0;
        spec_nos_2_flag <= realNos_flag;
        spec_nos_2_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'h3) begin
        spec_queue_3_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_3_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_3_ctr <= _sctr_T_10;
        else
          spec_queue_3_ctr <= 3'h0;
        spec_nos_3_flag <= realNos_flag;
        spec_nos_3_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'h4) begin
        spec_queue_4_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_4_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_4_ctr <= _sctr_T_10;
        else
          spec_queue_4_ctr <= 3'h0;
        spec_nos_4_flag <= realNos_flag;
        spec_nos_4_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'h5) begin
        spec_queue_5_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_5_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_5_ctr <= _sctr_T_10;
        else
          spec_queue_5_ctr <= 3'h0;
        spec_nos_5_flag <= realNos_flag;
        spec_nos_5_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'h6) begin
        spec_queue_6_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_6_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_6_ctr <= _sctr_T_10;
        else
          spec_queue_6_ctr <= 3'h0;
        spec_nos_6_flag <= realNos_flag;
        spec_nos_6_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'h7) begin
        spec_queue_7_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_7_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_7_ctr <= _sctr_T_10;
        else
          spec_queue_7_ctr <= 3'h0;
        spec_nos_7_flag <= realNos_flag;
        spec_nos_7_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'h8) begin
        spec_queue_8_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_8_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_8_ctr <= _sctr_T_10;
        else
          spec_queue_8_ctr <= 3'h0;
        spec_nos_8_flag <= realNos_flag;
        spec_nos_8_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'h9) begin
        spec_queue_9_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_9_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_9_ctr <= _sctr_T_10;
        else
          spec_queue_9_ctr <= 3'h0;
        spec_nos_9_flag <= realNos_flag;
        spec_nos_9_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'hA) begin
        spec_queue_10_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_10_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_10_ctr <= _sctr_T_10;
        else
          spec_queue_10_ctr <= 3'h0;
        spec_nos_10_flag <= realNos_flag;
        spec_nos_10_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'hB) begin
        spec_queue_11_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_11_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_11_ctr <= _sctr_T_10;
        else
          spec_queue_11_ctr <= 3'h0;
        spec_nos_11_flag <= realNos_flag;
        spec_nos_11_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'hC) begin
        spec_queue_12_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_12_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_12_ctr <= _sctr_T_10;
        else
          spec_queue_12_ctr <= 3'h0;
        spec_nos_12_flag <= realNos_flag;
        spec_nos_12_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'hD) begin
        spec_queue_13_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_13_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_13_ctr <= _sctr_T_10;
        else
          spec_queue_13_ctr <= 3'h0;
        spec_nos_13_flag <= realNos_flag;
        spec_nos_13_value <= realNos_value;
      end
      if (realPush & realWriteAddr_value == 4'hE) begin
        spec_queue_14_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_14_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_14_ctr <= _sctr_T_10;
        else
          spec_queue_14_ctr <= 3'h0;
        spec_nos_14_flag <= realNos_flag;
        spec_nos_14_value <= realNos_value;
      end
      if (realPush & (&realWriteAddr_value)) begin
        spec_queue_15_retAddr <= realWriteEntry_retAddr;
        if (_GEN_9)
          spec_queue_15_ctr <= realWriteEntry_next_ctr;
        else if (_s3_missPushEntry_ctr_T_2)
          spec_queue_15_ctr <= _sctr_T_10;
        else
          spec_queue_15_ctr <= 3'h0;
        spec_nos_15_flag <= realNos_flag;
        spec_nos_15_value <= realNos_value;
      end
      if (io_redirect_valid) begin
        ssp <=
          ~io_redirect_isRet | (|io_redirect_meta_sctr)
            ? (~io_redirect_isCall | _GEN_11
                 ? io_redirect_meta_ssp
                 : 3'(io_redirect_meta_ssp + 3'h1))
            : inflightValid_8 ? 3'(io_redirect_meta_ssp - 3'h1) : _sctr_T_16;
        sctr <=
          io_redirect_isRet
            ? ((|io_redirect_meta_sctr)
                 ? 3'(io_redirect_meta_sctr - 3'h1)
                 : inflightValid_8
                     ? _GEN_2[io_redirect_meta_NOS_value]
                     : _GEN_5[_sctr_T_16])
            : io_redirect_isCall ? (_GEN_11 ? _sctr_T_12 : 3'h0) : io_redirect_meta_sctr;
        TOSR_flag <=
          _GEN_12
            ? io_redirect_meta_NOS_flag
            : io_redirect_isCall
                ? io_redirect_meta_TOSW_flag
                : io_redirect_meta_TOSR_flag;
        TOSR_value <=
          _GEN_12
            ? io_redirect_meta_NOS_value
            : io_redirect_isCall
                ? io_redirect_meta_TOSW_value
                : io_redirect_meta_TOSR_value;
        TOSW_flag <= io_redirect_isCall ? _GEN_10[4] : io_redirect_meta_TOSW_flag;
        TOSW_value <= io_redirect_isCall ? _GEN_10[3:0] : io_redirect_meta_TOSW_value;
      end
      else if (io_s3_cancel) begin
        ssp <=
          ~io_s3_missed_push | _GEN_48
            ? (~io_s3_missed_pop | (|io_s3_meta_sctr)
                 ? io_s3_meta_ssp
                 : inflightValid_6 ? 3'(io_s3_meta_ssp - 3'h1) : _sctr_T_8)
            : 3'(io_s3_meta_ssp + 3'h1);
        sctr <=
          io_s3_missed_push
            ? (_GEN_48 ? _sctr_T_10 : 3'h0)
            : io_s3_missed_pop
                ? ((|io_s3_meta_sctr)
                     ? 3'(io_s3_meta_sctr - 3'h1)
                     : inflightValid_6 ? _GEN_2[io_s3_meta_NOS_value] : _GEN_5[_sctr_T_8])
                : io_s3_meta_sctr;
        TOSR_flag <=
          io_s3_missed_push
            ? io_s3_meta_TOSW_flag
            : _GEN_47 ? io_s3_meta_NOS_flag : io_s3_meta_TOSR_flag;
        TOSR_value <=
          io_s3_missed_push
            ? io_s3_meta_TOSW_value
            : _GEN_47 ? io_s3_meta_NOS_value : io_s3_meta_TOSR_value;
        TOSW_flag <= io_s3_missed_push ? _GEN_13[4] : io_s3_meta_TOSW_flag;
        TOSW_value <= io_s3_missed_push ? _GEN_13[3:0] : io_s3_meta_TOSW_value;
      end
      else begin
        if (~io_spec_pop_valid | (|sctr)) begin
          if (~io_spec_push_valid | _GEN_15) begin
          end
          else
            ssp <= 3'(ssp + 3'h1);
        end
        else if (inflightValid_4)
          ssp <= 3'(ssp - 3'h1);
        else
          ssp <= _sctr_T_4;
        if (io_spec_pop_valid) begin
          if (|sctr)
            sctr <= 3'(sctr - 3'h1);
          else
            sctr <= inflightValid_4 ? _GEN_2[topNos_value] : _GEN_5[_sctr_T_4];
        end
        else if (io_spec_push_valid) begin
          if (_GEN_15)
            sctr <= _sctr_T;
          else
            sctr <= 3'h0;
        end
        if (io_spec_pop_valid & (TOSR_flag ^ BOS_flag ^ _GEN)
            & (TOSR_flag ^ TOSW_flag ^ TOSR_value < TOSW_value)) begin
          TOSR_flag <= topNos_flag;
          if (writeBypassValid)
            TOSR_value <= writeBypassNos_value;
          else
            TOSR_value <= _GEN_8;
        end
        else if (io_spec_push_valid) begin
          TOSR_flag <= TOSW_flag;
          TOSR_value <= TOSW_value;
        end
        if (io_spec_push_valid) begin
          TOSW_flag <= _GEN_14[4];
          TOSW_value <= _GEN_14[3:0];
        end
      end
      spec_near_overflowed <=
        (TOSW_flag == BOS_flag
           ? {1'h0, 4'(TOSW_value - BOS_value)}
           : 5'(5'({1'h0, TOSW_value} - 5'h10) - _GEN_46)) > 5'hE;
      writeBypassValid <= writeBypassValidWire;
      timingTop_retAddr <=
        writeBypassValidWire
          ? (_realPush_T_4 | io_spec_push_valid
               ? writeEntry_retAddr
               : writeBypassEntry_retAddr)
          : io_redirect_valid & io_redirect_isRet
              ? ((io_redirect_meta_NOS_flag ^ BOS_flag ^ _GEN_16)
                 & (io_redirect_meta_NOS_flag ^ io_redirect_meta_TOSW_flag
                    ^ io_redirect_meta_NOS_value < io_redirect_meta_TOSW_value)
                   ? _GEN_0[io_redirect_meta_NOS_value]
                   : _GEN_3[(|io_redirect_meta_sctr)
                              ? io_redirect_meta_ssp
                              : _GEN_17
                                & (io_redirect_meta_NOS_flag ^ TOSW_flag
                                   ^ io_redirect_meta_NOS_value < TOSW_value)
                                  ? 3'(io_redirect_meta_ssp - 3'h1)
                                  : 3'(io_redirect_meta_ssp - 3'h1)])
              : io_redirect_valid
                  ? ((differentFlag_14 ^ ~compare_14) & (differentFlag_15 ^ compare_15)
                       ? _GEN_0[io_redirect_meta_TOSR_value]
                       : _GEN_3[io_redirect_meta_ssp])
                  : io_spec_pop_valid
                      ? ((topNos_flag ^ BOS_flag ^ _GEN_18)
                         & (topNos_flag ^ TOSW_flag ^ topNos_value < TOSW_value)
                           ? _GEN_0[topNos_value]
                           : _GEN_3[(|sctr)
                                      ? ssp
                                      : _GEN_19
                                        & (topNos_flag ^ TOSW_flag
                                           ^ topNos_value < TOSW_value)
                                          ? 3'(ssp - 3'h1)
                                          : 3'(ssp - 3'h1)])
                      : realPush
                          ? realWriteEntry_retAddr
                          : io_s3_cancel
                              ? (io_s3_missed_push
                                   ? io_s3_pushAddr
                                   : io_s3_missed_pop
                                       ? ((io_s3_meta_NOS_flag ^ BOS_flag ^ _GEN_20)
                                          & (io_s3_meta_NOS_flag ^ io_s3_meta_TOSW_flag
                                             ^ io_s3_meta_NOS_value < io_s3_meta_TOSW_value)
                                            ? _GEN_0[io_s3_meta_NOS_value]
                                            : _GEN_3[(|io_s3_meta_sctr)
                                                       ? io_s3_meta_ssp
                                                       : _GEN_21
                                                         & (io_s3_meta_NOS_flag
                                                            ^ io_s3_meta_TOSW_flag
                                                            ^ io_s3_meta_NOS_value < io_s3_meta_TOSW_value)
                                                           ? 3'(io_s3_meta_ssp - 3'h1)
                                                           : 3'(io_s3_meta_ssp - 3'h1)])
                                       : (differentFlag_10 ^ ~compare_10)
                                         & (differentFlag_11 ^ compare_11)
                                           ? _GEN_0[io_s3_meta_TOSR_value]
                                           : _GEN_3[io_s3_meta_ssp])
                              : (TOSR_flag ^ BOS_flag ^ _GEN)
                                & (TOSR_flag ^ TOSW_flag ^ TOSR_value < TOSW_value)
                                  ? _GEN_1
                                  : _GEN_4;
    end
  end // always @(posedge, posedge)
  wire [2:0]        _writeEntry_ctr_T_6 =
    _writeEntry_ctr_T_1
    & (redirectTopEntry_inflightValid
         ? _GEN_2[io_redirect_meta_TOSR_value]
         : _GEN_5[io_redirect_meta_ssp]) != 3'h7
      ? _sctr_T_12
      : 3'h0;
  wire              _writeEntry_ctr_T_9 =
    _writeEntry_ctr_T_7
    & (writeBypassValid
         ? writeBypassEntry_ctr
         : topEntry_inflightValid ? _GEN_2[TOSR_value] : _GEN_5[ssp]) != 3'h7;
  always @(posedge clock) begin
    if (io_spec_push_valid | _realPush_T_4) begin
      writeBypassEntry_retAddr <= writeEntry_retAddr;
      if (_realPush_T_4)
        writeBypassEntry_ctr <= _writeEntry_ctr_T_6;
      else if (_writeEntry_ctr_T_9)
        writeBypassEntry_ctr <= _sctr_T;
      else
        writeBypassEntry_ctr <= 3'h0;
      writeBypassNos_flag <= _realPush_T_4 ? io_redirect_meta_TOSR_flag : TOSR_flag;
      writeBypassNos_value <= _realPush_T_4 ? io_redirect_meta_TOSR_value : TOSR_value;
    end
    if (io_s2_fire | io_redirect_isCall) begin
      realWriteEntry_next_retAddr <= writeEntry_retAddr;
      realWriteEntry_next_ctr <=
        _realPush_T_4 ? _writeEntry_ctr_T_6 : _writeEntry_ctr_T_9 ? _sctr_T : 3'h0;
    end
    if (io_s2_fire | _realPush_T_4)
      realWriteAddr_next_value <=
        _realPush_T_4 ? io_redirect_meta_TOSW_value : TOSW_value;
    if (io_s2_fire | _realPush_T_4) begin
      realNos_next_flag <= _realPush_T_4 ? io_redirect_meta_TOSR_flag : TOSR_flag;
      realNos_next_value <= _realPush_T_4 ? io_redirect_meta_TOSR_value : TOSR_value;
    end
    if (io_s2_fire)
      realPush_r <= io_spec_push_valid;
    realPush_REG <= _realPush_T_4;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:48];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h31; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        commit_stack_0_retAddr = {_RANDOM[6'h0], _RANDOM[6'h1][17:0]};
        commit_stack_0_ctr = _RANDOM[6'h1][20:18];
        commit_stack_1_retAddr =
          {_RANDOM[6'h1][31:21], _RANDOM[6'h2], _RANDOM[6'h3][6:0]};
        commit_stack_1_ctr = _RANDOM[6'h3][9:7];
        commit_stack_2_retAddr = {_RANDOM[6'h3][31:10], _RANDOM[6'h4][27:0]};
        commit_stack_2_ctr = _RANDOM[6'h4][30:28];
        commit_stack_3_retAddr = {_RANDOM[6'h4][31], _RANDOM[6'h5], _RANDOM[6'h6][16:0]};
        commit_stack_3_ctr = _RANDOM[6'h6][19:17];
        commit_stack_4_retAddr =
          {_RANDOM[6'h6][31:20], _RANDOM[6'h7], _RANDOM[6'h8][5:0]};
        commit_stack_4_ctr = _RANDOM[6'h8][8:6];
        commit_stack_5_retAddr = {_RANDOM[6'h8][31:9], _RANDOM[6'h9][26:0]};
        commit_stack_5_ctr = _RANDOM[6'h9][29:27];
        commit_stack_6_retAddr =
          {_RANDOM[6'h9][31:30], _RANDOM[6'hA], _RANDOM[6'hB][15:0]};
        commit_stack_6_ctr = _RANDOM[6'hB][18:16];
        commit_stack_7_retAddr =
          {_RANDOM[6'hB][31:19], _RANDOM[6'hC], _RANDOM[6'hD][4:0]};
        commit_stack_7_ctr = _RANDOM[6'hD][7:5];
        spec_queue_0_retAddr = {_RANDOM[6'hD][31:8], _RANDOM[6'hE][25:0]};
        spec_queue_0_ctr = _RANDOM[6'hE][28:26];
        spec_queue_1_retAddr =
          {_RANDOM[6'hE][31:29], _RANDOM[6'hF], _RANDOM[6'h10][14:0]};
        spec_queue_1_ctr = _RANDOM[6'h10][17:15];
        spec_queue_2_retAddr =
          {_RANDOM[6'h10][31:18], _RANDOM[6'h11], _RANDOM[6'h12][3:0]};
        spec_queue_2_ctr = _RANDOM[6'h12][6:4];
        spec_queue_3_retAddr = {_RANDOM[6'h12][31:7], _RANDOM[6'h13][24:0]};
        spec_queue_3_ctr = _RANDOM[6'h13][27:25];
        spec_queue_4_retAddr =
          {_RANDOM[6'h13][31:28], _RANDOM[6'h14], _RANDOM[6'h15][13:0]};
        spec_queue_4_ctr = _RANDOM[6'h15][16:14];
        spec_queue_5_retAddr =
          {_RANDOM[6'h15][31:17], _RANDOM[6'h16], _RANDOM[6'h17][2:0]};
        spec_queue_5_ctr = _RANDOM[6'h17][5:3];
        spec_queue_6_retAddr = {_RANDOM[6'h17][31:6], _RANDOM[6'h18][23:0]};
        spec_queue_6_ctr = _RANDOM[6'h18][26:24];
        spec_queue_7_retAddr =
          {_RANDOM[6'h18][31:27], _RANDOM[6'h19], _RANDOM[6'h1A][12:0]};
        spec_queue_7_ctr = _RANDOM[6'h1A][15:13];
        spec_queue_8_retAddr =
          {_RANDOM[6'h1A][31:16], _RANDOM[6'h1B], _RANDOM[6'h1C][1:0]};
        spec_queue_8_ctr = _RANDOM[6'h1C][4:2];
        spec_queue_9_retAddr = {_RANDOM[6'h1C][31:5], _RANDOM[6'h1D][22:0]};
        spec_queue_9_ctr = _RANDOM[6'h1D][25:23];
        spec_queue_10_retAddr =
          {_RANDOM[6'h1D][31:26], _RANDOM[6'h1E], _RANDOM[6'h1F][11:0]};
        spec_queue_10_ctr = _RANDOM[6'h1F][14:12];
        spec_queue_11_retAddr =
          {_RANDOM[6'h1F][31:15], _RANDOM[6'h20], _RANDOM[6'h21][0]};
        spec_queue_11_ctr = _RANDOM[6'h21][3:1];
        spec_queue_12_retAddr = {_RANDOM[6'h21][31:4], _RANDOM[6'h22][21:0]};
        spec_queue_12_ctr = _RANDOM[6'h22][24:22];
        spec_queue_13_retAddr =
          {_RANDOM[6'h22][31:25], _RANDOM[6'h23], _RANDOM[6'h24][10:0]};
        spec_queue_13_ctr = _RANDOM[6'h24][13:11];
        spec_queue_14_retAddr = {_RANDOM[6'h24][31:14], _RANDOM[6'h25]};
        spec_queue_14_ctr = _RANDOM[6'h26][2:0];
        spec_queue_15_retAddr = {_RANDOM[6'h26][31:3], _RANDOM[6'h27][20:0]};
        spec_queue_15_ctr = _RANDOM[6'h27][23:21];
        spec_nos_0_flag = _RANDOM[6'h27][24];
        spec_nos_0_value = _RANDOM[6'h27][28:25];
        spec_nos_1_flag = _RANDOM[6'h27][29];
        spec_nos_1_value = {_RANDOM[6'h27][31:30], _RANDOM[6'h28][1:0]};
        spec_nos_2_flag = _RANDOM[6'h28][2];
        spec_nos_2_value = _RANDOM[6'h28][6:3];
        spec_nos_3_flag = _RANDOM[6'h28][7];
        spec_nos_3_value = _RANDOM[6'h28][11:8];
        spec_nos_4_flag = _RANDOM[6'h28][12];
        spec_nos_4_value = _RANDOM[6'h28][16:13];
        spec_nos_5_flag = _RANDOM[6'h28][17];
        spec_nos_5_value = _RANDOM[6'h28][21:18];
        spec_nos_6_flag = _RANDOM[6'h28][22];
        spec_nos_6_value = _RANDOM[6'h28][26:23];
        spec_nos_7_flag = _RANDOM[6'h28][27];
        spec_nos_7_value = _RANDOM[6'h28][31:28];
        spec_nos_8_flag = _RANDOM[6'h29][0];
        spec_nos_8_value = _RANDOM[6'h29][4:1];
        spec_nos_9_flag = _RANDOM[6'h29][5];
        spec_nos_9_value = _RANDOM[6'h29][9:6];
        spec_nos_10_flag = _RANDOM[6'h29][10];
        spec_nos_10_value = _RANDOM[6'h29][14:11];
        spec_nos_11_flag = _RANDOM[6'h29][15];
        spec_nos_11_value = _RANDOM[6'h29][19:16];
        spec_nos_12_flag = _RANDOM[6'h29][20];
        spec_nos_12_value = _RANDOM[6'h29][24:21];
        spec_nos_13_flag = _RANDOM[6'h29][25];
        spec_nos_13_value = _RANDOM[6'h29][29:26];
        spec_nos_14_flag = _RANDOM[6'h29][30];
        spec_nos_14_value = {_RANDOM[6'h29][31], _RANDOM[6'h2A][2:0]};
        spec_nos_15_flag = _RANDOM[6'h2A][3];
        spec_nos_15_value = _RANDOM[6'h2A][7:4];
        nsp = _RANDOM[6'h2A][10:8];
        ssp = _RANDOM[6'h2A][13:11];
        sctr = _RANDOM[6'h2A][16:14];
        TOSR_flag = _RANDOM[6'h2A][17];
        TOSR_value = _RANDOM[6'h2A][21:18];
        TOSW_flag = _RANDOM[6'h2A][22];
        TOSW_value = _RANDOM[6'h2A][26:23];
        BOS_flag = _RANDOM[6'h2A][27];
        BOS_value = _RANDOM[6'h2A][31:28];
        spec_near_overflowed = _RANDOM[6'h2B][0];
        writeBypassEntry_retAddr = {_RANDOM[6'h2B][31:1], _RANDOM[6'h2C][18:0]};
        writeBypassEntry_ctr = _RANDOM[6'h2C][21:19];
        writeBypassNos_flag = _RANDOM[6'h2C][22];
        writeBypassNos_value = _RANDOM[6'h2C][26:23];
        writeBypassValid = _RANDOM[6'h2C][27];
        timingTop_retAddr = {_RANDOM[6'h2C][31:28], _RANDOM[6'h2D], _RANDOM[6'h2E][13:0]};
        realWriteEntry_next_retAddr =
          {_RANDOM[6'h2E][31:22], _RANDOM[6'h2F], _RANDOM[6'h30][7:0]};
        realWriteEntry_next_ctr = _RANDOM[6'h30][10:8];
        realWriteAddr_next_value = _RANDOM[6'h30][15:12];
        realNos_next_flag = _RANDOM[6'h30][16];
        realNos_next_value = _RANDOM[6'h30][20:17];
        realPush_r = _RANDOM[6'h30][21];
        realPush_REG = _RANDOM[6'h30][22];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        commit_stack_0_retAddr = 50'h0;
        commit_stack_0_ctr = 3'h0;
        commit_stack_1_retAddr = 50'h0;
        commit_stack_1_ctr = 3'h0;
        commit_stack_2_retAddr = 50'h0;
        commit_stack_2_ctr = 3'h0;
        commit_stack_3_retAddr = 50'h0;
        commit_stack_3_ctr = 3'h0;
        commit_stack_4_retAddr = 50'h0;
        commit_stack_4_ctr = 3'h0;
        commit_stack_5_retAddr = 50'h0;
        commit_stack_5_ctr = 3'h0;
        commit_stack_6_retAddr = 50'h0;
        commit_stack_6_ctr = 3'h0;
        commit_stack_7_retAddr = 50'h0;
        commit_stack_7_ctr = 3'h0;
        spec_queue_0_retAddr = 50'h0;
        spec_queue_0_ctr = 3'h0;
        spec_queue_1_retAddr = 50'h0;
        spec_queue_1_ctr = 3'h0;
        spec_queue_2_retAddr = 50'h0;
        spec_queue_2_ctr = 3'h0;
        spec_queue_3_retAddr = 50'h0;
        spec_queue_3_ctr = 3'h0;
        spec_queue_4_retAddr = 50'h0;
        spec_queue_4_ctr = 3'h0;
        spec_queue_5_retAddr = 50'h0;
        spec_queue_5_ctr = 3'h0;
        spec_queue_6_retAddr = 50'h0;
        spec_queue_6_ctr = 3'h0;
        spec_queue_7_retAddr = 50'h0;
        spec_queue_7_ctr = 3'h0;
        spec_queue_8_retAddr = 50'h0;
        spec_queue_8_ctr = 3'h0;
        spec_queue_9_retAddr = 50'h0;
        spec_queue_9_ctr = 3'h0;
        spec_queue_10_retAddr = 50'h0;
        spec_queue_10_ctr = 3'h0;
        spec_queue_11_retAddr = 50'h0;
        spec_queue_11_ctr = 3'h0;
        spec_queue_12_retAddr = 50'h0;
        spec_queue_12_ctr = 3'h0;
        spec_queue_13_retAddr = 50'h0;
        spec_queue_13_ctr = 3'h0;
        spec_queue_14_retAddr = 50'h0;
        spec_queue_14_ctr = 3'h0;
        spec_queue_15_retAddr = 50'h0;
        spec_queue_15_ctr = 3'h0;
        spec_nos_0_flag = 1'h0;
        spec_nos_0_value = 4'h0;
        spec_nos_1_flag = 1'h0;
        spec_nos_1_value = 4'h0;
        spec_nos_2_flag = 1'h0;
        spec_nos_2_value = 4'h0;
        spec_nos_3_flag = 1'h0;
        spec_nos_3_value = 4'h0;
        spec_nos_4_flag = 1'h0;
        spec_nos_4_value = 4'h0;
        spec_nos_5_flag = 1'h0;
        spec_nos_5_value = 4'h0;
        spec_nos_6_flag = 1'h0;
        spec_nos_6_value = 4'h0;
        spec_nos_7_flag = 1'h0;
        spec_nos_7_value = 4'h0;
        spec_nos_8_flag = 1'h0;
        spec_nos_8_value = 4'h0;
        spec_nos_9_flag = 1'h0;
        spec_nos_9_value = 4'h0;
        spec_nos_10_flag = 1'h0;
        spec_nos_10_value = 4'h0;
        spec_nos_11_flag = 1'h0;
        spec_nos_11_value = 4'h0;
        spec_nos_12_flag = 1'h0;
        spec_nos_12_value = 4'h0;
        spec_nos_13_flag = 1'h0;
        spec_nos_13_value = 4'h0;
        spec_nos_14_flag = 1'h0;
        spec_nos_14_value = 4'h0;
        spec_nos_15_flag = 1'h0;
        spec_nos_15_value = 4'h0;
        nsp = 3'h0;
        ssp = 3'h0;
        sctr = 3'h0;
        TOSR_flag = 1'h1;
        TOSR_value = 4'hF;
        TOSW_flag = 1'h0;
        TOSW_value = 4'h0;
        BOS_flag = 1'h0;
        BOS_value = 4'h0;
        spec_near_overflowed = 1'h0;
        writeBypassValid = 1'h0;
        timingTop_retAddr = 50'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_spec_pop_addr = timingTop_retAddr;
  assign io_ssp = ssp;
  assign io_sctr = sctr;
  assign io_TOSR_flag = TOSR_flag;
  assign io_TOSR_value = TOSR_value;
  assign io_TOSW_flag = TOSW_flag;
  assign io_TOSW_value = TOSW_value;
  assign io_NOS_flag = topNos_flag;
  assign io_NOS_value = topNos_value;
  assign io_spec_near_overflow = spec_near_overflowed;
endmodule

