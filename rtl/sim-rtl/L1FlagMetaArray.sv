// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module L1FlagMetaArray(
  input        clock,
  input        reset,
  input        io_read_0_valid,
  input        io_read_0_bits_idx,
  input        io_read_1_valid,
  input        io_read_1_bits_idx,
  input        io_read_2_valid,
  input        io_read_2_bits_idx,
  input        io_read_3_valid,
  input        io_read_3_bits_idx,
  output       io_resp_0_0,
  output       io_resp_0_1,
  output       io_resp_0_2,
  output       io_resp_0_3,
  output       io_resp_1_0,
  output       io_resp_1_1,
  output       io_resp_1_2,
  output       io_resp_1_3,
  output       io_resp_2_0,
  output       io_resp_2_1,
  output       io_resp_2_2,
  output       io_resp_2_3,
  output       io_resp_3_0,
  output       io_resp_3_1,
  output       io_resp_3_2,
  output       io_resp_3_3,
  input        io_write_0_valid,
  input        io_write_0_bits_idx,
  input  [3:0] io_write_0_bits_way_en,
  input        io_write_0_bits_flag
);

  reg  meta_array_0_0;
  reg  meta_array_0_1;
  reg  meta_array_0_2;
  reg  meta_array_0_3;
  reg  meta_array_1_0;
  reg  meta_array_1_1;
  reg  meta_array_1_2;
  reg  meta_array_1_3;
  reg  io_resp_0_0_r;
  reg  io_resp_0_0_r_1;
  reg  io_resp_0_0_r_2;
  reg  io_resp_0_1_r;
  reg  io_resp_0_1_r_1;
  reg  io_resp_0_1_r_2;
  reg  io_resp_0_2_r;
  reg  io_resp_0_2_r_1;
  reg  io_resp_0_2_r_2;
  reg  io_resp_0_3_r;
  reg  io_resp_0_3_r_1;
  reg  io_resp_0_3_r_2;
  reg  io_resp_1_0_r;
  reg  io_resp_1_0_r_1;
  reg  io_resp_1_0_r_2;
  reg  io_resp_1_1_r;
  reg  io_resp_1_1_r_1;
  reg  io_resp_1_1_r_2;
  reg  io_resp_1_2_r;
  reg  io_resp_1_2_r_1;
  reg  io_resp_1_2_r_2;
  reg  io_resp_1_3_r;
  reg  io_resp_1_3_r_1;
  reg  io_resp_1_3_r_2;
  reg  io_resp_2_0_r;
  reg  io_resp_2_0_r_1;
  reg  io_resp_2_0_r_2;
  reg  io_resp_2_1_r;
  reg  io_resp_2_1_r_1;
  reg  io_resp_2_1_r_2;
  reg  io_resp_2_2_r;
  reg  io_resp_2_2_r_1;
  reg  io_resp_2_2_r_2;
  reg  io_resp_2_3_r;
  reg  io_resp_2_3_r_1;
  reg  io_resp_2_3_r_2;
  reg  io_resp_3_0_r;
  reg  io_resp_3_0_r_1;
  reg  io_resp_3_0_r_2;
  reg  io_resp_3_1_r;
  reg  io_resp_3_1_r_1;
  reg  io_resp_3_1_r_2;
  reg  io_resp_3_2_r;
  reg  io_resp_3_2_r_1;
  reg  io_resp_3_2_r_2;
  reg  io_resp_3_3_r;
  reg  io_resp_3_3_r_1;
  reg  io_resp_3_3_r_2;
  reg  s1_way_wen_0_0_REG;
  reg  s1_way_waddr_0_0_r;
  reg  s1_way_wdata_0_0_r;
  reg  s1_way_wen_1_0_REG;
  reg  s1_way_waddr_1_0_r;
  reg  s1_way_wdata_1_0_r;
  reg  s1_way_wen_2_0_REG;
  reg  s1_way_waddr_2_0_r;
  reg  s1_way_wdata_2_0_r;
  reg  s1_way_wen_3_0_REG;
  reg  s1_way_waddr_3_0_r;
  reg  s1_way_wdata_3_0_r;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      meta_array_0_0 <= 1'h0;
      meta_array_0_1 <= 1'h0;
      meta_array_0_2 <= 1'h0;
      meta_array_0_3 <= 1'h0;
      meta_array_1_0 <= 1'h0;
      meta_array_1_1 <= 1'h0;
      meta_array_1_2 <= 1'h0;
      meta_array_1_3 <= 1'h0;
    end
    else begin
      if (s1_way_wen_0_0_REG & ~s1_way_waddr_0_0_r)
        meta_array_0_0 <= s1_way_wdata_0_0_r;
      if (s1_way_wen_1_0_REG & ~s1_way_waddr_1_0_r)
        meta_array_0_1 <= s1_way_wdata_1_0_r;
      if (s1_way_wen_2_0_REG & ~s1_way_waddr_2_0_r)
        meta_array_0_2 <= s1_way_wdata_2_0_r;
      if (s1_way_wen_3_0_REG & ~s1_way_waddr_3_0_r)
        meta_array_0_3 <= s1_way_wdata_3_0_r;
      if (s1_way_wen_0_0_REG & s1_way_waddr_0_0_r)
        meta_array_1_0 <= s1_way_wdata_0_0_r;
      if (s1_way_wen_1_0_REG & s1_way_waddr_1_0_r)
        meta_array_1_1 <= s1_way_wdata_1_0_r;
      if (s1_way_wen_2_0_REG & s1_way_waddr_2_0_r)
        meta_array_1_2 <= s1_way_wdata_2_0_r;
      if (s1_way_wen_3_0_REG & s1_way_waddr_3_0_r)
        meta_array_1_3 <= s1_way_wdata_3_0_r;
    end
  end // always @(posedge, posedge)
  wire read_way_bypass = s1_way_wen_0_0_REG & s1_way_waddr_0_0_r == io_read_0_bits_idx;
  wire read_way_bypass_1 = s1_way_wen_1_0_REG & s1_way_waddr_1_0_r == io_read_0_bits_idx;
  wire read_way_bypass_2 = s1_way_wen_2_0_REG & s1_way_waddr_2_0_r == io_read_0_bits_idx;
  wire read_way_bypass_3 = s1_way_wen_3_0_REG & s1_way_waddr_3_0_r == io_read_0_bits_idx;
  wire read_way_bypass_4 = s1_way_wen_0_0_REG & s1_way_waddr_0_0_r == io_read_1_bits_idx;
  wire read_way_bypass_5 = s1_way_wen_1_0_REG & s1_way_waddr_1_0_r == io_read_1_bits_idx;
  wire read_way_bypass_6 = s1_way_wen_2_0_REG & s1_way_waddr_2_0_r == io_read_1_bits_idx;
  wire read_way_bypass_7 = s1_way_wen_3_0_REG & s1_way_waddr_3_0_r == io_read_1_bits_idx;
  wire read_way_bypass_8 = s1_way_wen_0_0_REG & s1_way_waddr_0_0_r == io_read_2_bits_idx;
  wire read_way_bypass_9 = s1_way_wen_1_0_REG & s1_way_waddr_1_0_r == io_read_2_bits_idx;
  wire read_way_bypass_10 = s1_way_wen_2_0_REG & s1_way_waddr_2_0_r == io_read_2_bits_idx;
  wire read_way_bypass_11 = s1_way_wen_3_0_REG & s1_way_waddr_3_0_r == io_read_2_bits_idx;
  wire read_way_bypass_12 = s1_way_wen_0_0_REG & s1_way_waddr_0_0_r == io_read_3_bits_idx;
  wire read_way_bypass_13 = s1_way_wen_1_0_REG & s1_way_waddr_1_0_r == io_read_3_bits_idx;
  wire read_way_bypass_14 = s1_way_wen_2_0_REG & s1_way_waddr_2_0_r == io_read_3_bits_idx;
  wire read_way_bypass_15 = s1_way_wen_3_0_REG & s1_way_waddr_3_0_r == io_read_3_bits_idx;
  wire s0_way_wen_0_0 = io_write_0_valid & io_write_0_bits_way_en[0];
  wire s0_way_wen_1_0 = io_write_0_valid & io_write_0_bits_way_en[1];
  wire s0_way_wen_2_0 = io_write_0_valid & io_write_0_bits_way_en[2];
  wire s0_way_wen_3_0 = io_write_0_valid & io_write_0_bits_way_en[3];
  always @(posedge clock) begin
    if (io_read_0_valid) begin
      io_resp_0_0_r <= read_way_bypass;
      io_resp_0_0_r_2 <= io_read_0_bits_idx;
      io_resp_0_1_r <= read_way_bypass_1;
      io_resp_0_1_r_2 <= io_read_0_bits_idx;
      io_resp_0_2_r <= read_way_bypass_2;
      io_resp_0_2_r_2 <= io_read_0_bits_idx;
      io_resp_0_3_r <= read_way_bypass_3;
      io_resp_0_3_r_2 <= io_read_0_bits_idx;
    end
    if (read_way_bypass)
      io_resp_0_0_r_1 <= s1_way_wdata_0_0_r;
    if (read_way_bypass_1)
      io_resp_0_1_r_1 <= s1_way_wdata_1_0_r;
    if (read_way_bypass_2)
      io_resp_0_2_r_1 <= s1_way_wdata_2_0_r;
    if (read_way_bypass_3)
      io_resp_0_3_r_1 <= s1_way_wdata_3_0_r;
    if (io_read_1_valid) begin
      io_resp_1_0_r <= read_way_bypass_4;
      io_resp_1_0_r_2 <= io_read_1_bits_idx;
      io_resp_1_1_r <= read_way_bypass_5;
      io_resp_1_1_r_2 <= io_read_1_bits_idx;
      io_resp_1_2_r <= read_way_bypass_6;
      io_resp_1_2_r_2 <= io_read_1_bits_idx;
      io_resp_1_3_r <= read_way_bypass_7;
      io_resp_1_3_r_2 <= io_read_1_bits_idx;
    end
    if (read_way_bypass_4)
      io_resp_1_0_r_1 <= s1_way_wdata_0_0_r;
    if (read_way_bypass_5)
      io_resp_1_1_r_1 <= s1_way_wdata_1_0_r;
    if (read_way_bypass_6)
      io_resp_1_2_r_1 <= s1_way_wdata_2_0_r;
    if (read_way_bypass_7)
      io_resp_1_3_r_1 <= s1_way_wdata_3_0_r;
    if (io_read_2_valid) begin
      io_resp_2_0_r <= read_way_bypass_8;
      io_resp_2_0_r_2 <= io_read_2_bits_idx;
      io_resp_2_1_r <= read_way_bypass_9;
      io_resp_2_1_r_2 <= io_read_2_bits_idx;
      io_resp_2_2_r <= read_way_bypass_10;
      io_resp_2_2_r_2 <= io_read_2_bits_idx;
      io_resp_2_3_r <= read_way_bypass_11;
      io_resp_2_3_r_2 <= io_read_2_bits_idx;
    end
    if (read_way_bypass_8)
      io_resp_2_0_r_1 <= s1_way_wdata_0_0_r;
    if (read_way_bypass_9)
      io_resp_2_1_r_1 <= s1_way_wdata_1_0_r;
    if (read_way_bypass_10)
      io_resp_2_2_r_1 <= s1_way_wdata_2_0_r;
    if (read_way_bypass_11)
      io_resp_2_3_r_1 <= s1_way_wdata_3_0_r;
    if (io_read_3_valid) begin
      io_resp_3_0_r <= read_way_bypass_12;
      io_resp_3_0_r_2 <= io_read_3_bits_idx;
      io_resp_3_1_r <= read_way_bypass_13;
      io_resp_3_1_r_2 <= io_read_3_bits_idx;
      io_resp_3_2_r <= read_way_bypass_14;
      io_resp_3_2_r_2 <= io_read_3_bits_idx;
      io_resp_3_3_r <= read_way_bypass_15;
      io_resp_3_3_r_2 <= io_read_3_bits_idx;
    end
    if (read_way_bypass_12)
      io_resp_3_0_r_1 <= s1_way_wdata_0_0_r;
    if (read_way_bypass_13)
      io_resp_3_1_r_1 <= s1_way_wdata_1_0_r;
    if (read_way_bypass_14)
      io_resp_3_2_r_1 <= s1_way_wdata_2_0_r;
    if (read_way_bypass_15)
      io_resp_3_3_r_1 <= s1_way_wdata_3_0_r;
    s1_way_wen_0_0_REG <= s0_way_wen_0_0;
    if (s0_way_wen_0_0) begin
      s1_way_waddr_0_0_r <= io_write_0_bits_idx;
      s1_way_wdata_0_0_r <= io_write_0_bits_flag;
    end
    s1_way_wen_1_0_REG <= s0_way_wen_1_0;
    if (s0_way_wen_1_0) begin
      s1_way_waddr_1_0_r <= io_write_0_bits_idx;
      s1_way_wdata_1_0_r <= io_write_0_bits_flag;
    end
    s1_way_wen_2_0_REG <= s0_way_wen_2_0;
    if (s0_way_wen_2_0) begin
      s1_way_waddr_2_0_r <= io_write_0_bits_idx;
      s1_way_wdata_2_0_r <= io_write_0_bits_flag;
    end
    s1_way_wen_3_0_REG <= s0_way_wen_3_0;
    if (s0_way_wen_3_0) begin
      s1_way_waddr_3_0_r <= io_write_0_bits_idx;
      s1_way_wdata_3_0_r <= io_write_0_bits_flag;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        meta_array_0_0 = _RANDOM[2'h0][0];
        meta_array_0_1 = _RANDOM[2'h0][1];
        meta_array_0_2 = _RANDOM[2'h0][2];
        meta_array_0_3 = _RANDOM[2'h0][3];
        meta_array_1_0 = _RANDOM[2'h0][4];
        meta_array_1_1 = _RANDOM[2'h0][5];
        meta_array_1_2 = _RANDOM[2'h0][6];
        meta_array_1_3 = _RANDOM[2'h0][7];
        io_resp_0_0_r = _RANDOM[2'h0][8];
        io_resp_0_0_r_1 = _RANDOM[2'h0][9];
        io_resp_0_0_r_2 = _RANDOM[2'h0][10];
        io_resp_0_1_r = _RANDOM[2'h0][11];
        io_resp_0_1_r_1 = _RANDOM[2'h0][12];
        io_resp_0_1_r_2 = _RANDOM[2'h0][13];
        io_resp_0_2_r = _RANDOM[2'h0][14];
        io_resp_0_2_r_1 = _RANDOM[2'h0][15];
        io_resp_0_2_r_2 = _RANDOM[2'h0][16];
        io_resp_0_3_r = _RANDOM[2'h0][17];
        io_resp_0_3_r_1 = _RANDOM[2'h0][18];
        io_resp_0_3_r_2 = _RANDOM[2'h0][19];
        io_resp_1_0_r = _RANDOM[2'h0][20];
        io_resp_1_0_r_1 = _RANDOM[2'h0][21];
        io_resp_1_0_r_2 = _RANDOM[2'h0][22];
        io_resp_1_1_r = _RANDOM[2'h0][23];
        io_resp_1_1_r_1 = _RANDOM[2'h0][24];
        io_resp_1_1_r_2 = _RANDOM[2'h0][25];
        io_resp_1_2_r = _RANDOM[2'h0][26];
        io_resp_1_2_r_1 = _RANDOM[2'h0][27];
        io_resp_1_2_r_2 = _RANDOM[2'h0][28];
        io_resp_1_3_r = _RANDOM[2'h0][29];
        io_resp_1_3_r_1 = _RANDOM[2'h0][30];
        io_resp_1_3_r_2 = _RANDOM[2'h0][31];
        io_resp_2_0_r = _RANDOM[2'h1][0];
        io_resp_2_0_r_1 = _RANDOM[2'h1][1];
        io_resp_2_0_r_2 = _RANDOM[2'h1][2];
        io_resp_2_1_r = _RANDOM[2'h1][3];
        io_resp_2_1_r_1 = _RANDOM[2'h1][4];
        io_resp_2_1_r_2 = _RANDOM[2'h1][5];
        io_resp_2_2_r = _RANDOM[2'h1][6];
        io_resp_2_2_r_1 = _RANDOM[2'h1][7];
        io_resp_2_2_r_2 = _RANDOM[2'h1][8];
        io_resp_2_3_r = _RANDOM[2'h1][9];
        io_resp_2_3_r_1 = _RANDOM[2'h1][10];
        io_resp_2_3_r_2 = _RANDOM[2'h1][11];
        io_resp_3_0_r = _RANDOM[2'h1][12];
        io_resp_3_0_r_1 = _RANDOM[2'h1][13];
        io_resp_3_0_r_2 = _RANDOM[2'h1][14];
        io_resp_3_1_r = _RANDOM[2'h1][15];
        io_resp_3_1_r_1 = _RANDOM[2'h1][16];
        io_resp_3_1_r_2 = _RANDOM[2'h1][17];
        io_resp_3_2_r = _RANDOM[2'h1][18];
        io_resp_3_2_r_1 = _RANDOM[2'h1][19];
        io_resp_3_2_r_2 = _RANDOM[2'h1][20];
        io_resp_3_3_r = _RANDOM[2'h1][21];
        io_resp_3_3_r_1 = _RANDOM[2'h1][22];
        io_resp_3_3_r_2 = _RANDOM[2'h1][23];
        s1_way_wen_0_0_REG = _RANDOM[2'h1][24];
        s1_way_waddr_0_0_r = _RANDOM[2'h1][25];
        s1_way_wdata_0_0_r = _RANDOM[2'h1][26];
        s1_way_wen_1_0_REG = _RANDOM[2'h1][27];
        s1_way_waddr_1_0_r = _RANDOM[2'h1][28];
        s1_way_wdata_1_0_r = _RANDOM[2'h1][29];
        s1_way_wen_2_0_REG = _RANDOM[2'h1][30];
        s1_way_waddr_2_0_r = _RANDOM[2'h1][31];
        s1_way_wdata_2_0_r = _RANDOM[2'h2][0];
        s1_way_wen_3_0_REG = _RANDOM[2'h2][1];
        s1_way_waddr_3_0_r = _RANDOM[2'h2][2];
        s1_way_wdata_3_0_r = _RANDOM[2'h2][3];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        meta_array_0_0 = 1'h0;
        meta_array_0_1 = 1'h0;
        meta_array_0_2 = 1'h0;
        meta_array_0_3 = 1'h0;
        meta_array_1_0 = 1'h0;
        meta_array_1_1 = 1'h0;
        meta_array_1_2 = 1'h0;
        meta_array_1_3 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_resp_0_0 =
    io_resp_0_0_r ? io_resp_0_0_r_1 : io_resp_0_0_r_2 ? meta_array_1_0 : meta_array_0_0;
  assign io_resp_0_1 =
    io_resp_0_1_r ? io_resp_0_1_r_1 : io_resp_0_1_r_2 ? meta_array_1_1 : meta_array_0_1;
  assign io_resp_0_2 =
    io_resp_0_2_r ? io_resp_0_2_r_1 : io_resp_0_2_r_2 ? meta_array_1_2 : meta_array_0_2;
  assign io_resp_0_3 =
    io_resp_0_3_r ? io_resp_0_3_r_1 : io_resp_0_3_r_2 ? meta_array_1_3 : meta_array_0_3;
  assign io_resp_1_0 =
    io_resp_1_0_r ? io_resp_1_0_r_1 : io_resp_1_0_r_2 ? meta_array_1_0 : meta_array_0_0;
  assign io_resp_1_1 =
    io_resp_1_1_r ? io_resp_1_1_r_1 : io_resp_1_1_r_2 ? meta_array_1_1 : meta_array_0_1;
  assign io_resp_1_2 =
    io_resp_1_2_r ? io_resp_1_2_r_1 : io_resp_1_2_r_2 ? meta_array_1_2 : meta_array_0_2;
  assign io_resp_1_3 =
    io_resp_1_3_r ? io_resp_1_3_r_1 : io_resp_1_3_r_2 ? meta_array_1_3 : meta_array_0_3;
  assign io_resp_2_0 =
    io_resp_2_0_r ? io_resp_2_0_r_1 : io_resp_2_0_r_2 ? meta_array_1_0 : meta_array_0_0;
  assign io_resp_2_1 =
    io_resp_2_1_r ? io_resp_2_1_r_1 : io_resp_2_1_r_2 ? meta_array_1_1 : meta_array_0_1;
  assign io_resp_2_2 =
    io_resp_2_2_r ? io_resp_2_2_r_1 : io_resp_2_2_r_2 ? meta_array_1_2 : meta_array_0_2;
  assign io_resp_2_3 =
    io_resp_2_3_r ? io_resp_2_3_r_1 : io_resp_2_3_r_2 ? meta_array_1_3 : meta_array_0_3;
  assign io_resp_3_0 =
    io_resp_3_0_r ? io_resp_3_0_r_1 : io_resp_3_0_r_2 ? meta_array_1_0 : meta_array_0_0;
  assign io_resp_3_1 =
    io_resp_3_1_r ? io_resp_3_1_r_1 : io_resp_3_1_r_2 ? meta_array_1_1 : meta_array_0_1;
  assign io_resp_3_2 =
    io_resp_3_2_r ? io_resp_3_2_r_1 : io_resp_3_2_r_2 ? meta_array_1_2 : meta_array_0_2;
  assign io_resp_3_3 =
    io_resp_3_3_r ? io_resp_3_3_r_1 : io_resp_3_3_r_2 ? meta_array_1_3 : meta_array_0_3;
endmodule

