// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FreeList_4(
  input         clock,
  input         reset,
  output [3:0]  io_allocateSlot_0,
  output [3:0]  io_allocateSlot_1,
  output [3:0]  io_allocateSlot_2,
  output        io_canAllocate_0,
  output        io_canAllocate_1,
  output        io_canAllocate_2,
  input         io_doAllocate_0,
  input         io_doAllocate_1,
  input         io_doAllocate_2,
  input  [11:0] io_free,
  output        io_empty
);

  reg  [3:0]       freeList_0;
  reg  [3:0]       freeList_1;
  reg  [3:0]       freeList_2;
  reg  [3:0]       freeList_3;
  reg  [3:0]       freeList_4;
  reg  [3:0]       freeList_5;
  reg  [3:0]       freeList_6;
  reg  [3:0]       freeList_7;
  reg  [3:0]       freeList_8;
  reg  [3:0]       freeList_9;
  reg  [3:0]       freeList_10;
  reg  [3:0]       freeList_11;
  reg              headPtr_flag;
  reg  [3:0]       headPtr_value;
  reg              tailPtr_flag;
  reg  [3:0]       tailPtr_value;
  reg  [11:0]      freeMask;
  reg              freeReq_next_nextVec_0_r;
  reg              freeReq_next_nextVec_1_r;
  reg              freeReq_next_nextVec_2_r;
  reg              freeReq_next_nextVec_3_r;
  reg  [11:0]      freeSlotOH_next_nextVec_0_r;
  reg  [11:0]      freeSlotOH_next_nextVec_1_r;
  reg  [11:0]      freeSlotOH_next_nextVec_2_r;
  reg  [11:0]      freeSlotOH_next_nextVec_3_r;
  reg  [3:0]       freeSlotCnt;
  wire [4:0]       deqPtr_new_value =
    5'({1'h0, headPtr_value}
       + {3'h0,
          2'({1'h0, io_doAllocate_0}
             + 2'({1'h0, io_doAllocate_1} + {1'h0, io_doAllocate_2}))});
  wire [5:0]       _GEN = {1'h0, deqPtr_new_value};
  reg              io_canAllocate_0_r;
  reg  [3:0]       io_allocateSlot_0_r;
  reg              io_canAllocate_1_r;
  reg  [3:0]       io_allocateSlot_1_r;
  reg              io_canAllocate_2_r;
  reg  [3:0]       io_allocateSlot_2_r;
  wire [11:0]      _remFreeSelMaskVec_T_18 =
    ~((freeReq_next_nextVec_0_r ? freeSlotOH_next_nextVec_0_r : 12'h0)
      | (freeReq_next_nextVec_1_r ? freeSlotOH_next_nextVec_1_r : 12'h0)
      | (freeReq_next_nextVec_2_r ? freeSlotOH_next_nextVec_2_r : 12'h0)
      | (freeReq_next_nextVec_3_r ? freeSlotOH_next_nextVec_3_r : 12'h0));
  wire             _remFreeSelMaskVec_T_2 = freeMask[0] & _remFreeSelMaskVec_T_18[0];
  wire             _remFreeSelMaskVec_T_3 = freeMask[4] & _remFreeSelMaskVec_T_18[4];
  wire             _remFreeSelMaskVec_T_4 = freeMask[8] & _remFreeSelMaskVec_T_18[8];
  wire [2:0]       remFreeSelMaskVec_0 =
    {_remFreeSelMaskVec_T_4, _remFreeSelMaskVec_T_3, _remFreeSelMaskVec_T_2};
  wire             _remFreeSelMaskVec_T_8 = freeMask[1] & _remFreeSelMaskVec_T_18[1];
  wire             _remFreeSelMaskVec_T_9 = freeMask[5] & _remFreeSelMaskVec_T_18[5];
  wire             _remFreeSelMaskVec_T_10 = freeMask[9] & _remFreeSelMaskVec_T_18[9];
  wire [2:0]       remFreeSelMaskVec_1 =
    {_remFreeSelMaskVec_T_10, _remFreeSelMaskVec_T_9, _remFreeSelMaskVec_T_8};
  wire             _remFreeSelMaskVec_T_14 = freeMask[2] & _remFreeSelMaskVec_T_18[2];
  wire             _remFreeSelMaskVec_T_15 = freeMask[6] & _remFreeSelMaskVec_T_18[6];
  wire             _remFreeSelMaskVec_T_16 = freeMask[10] & _remFreeSelMaskVec_T_18[10];
  wire [2:0]       remFreeSelMaskVec_2 =
    {_remFreeSelMaskVec_T_16, _remFreeSelMaskVec_T_15, _remFreeSelMaskVec_T_14};
  wire             _remFreeSelMaskVec_T_20 = freeMask[3] & _remFreeSelMaskVec_T_18[3];
  wire             _remFreeSelMaskVec_T_21 = freeMask[7] & _remFreeSelMaskVec_T_18[7];
  wire             _remFreeSelMaskVec_T_22 = freeMask[11] & _remFreeSelMaskVec_T_18[11];
  wire [2:0]       remFreeSelMaskVec_3 =
    {_remFreeSelMaskVec_T_22, _remFreeSelMaskVec_T_21, _remFreeSelMaskVec_T_20};
  wire [2:0]       remFreeSelIndexOHVec_highIndexOH =
    _remFreeSelMaskVec_T_2
      ? 3'h1
      : _remFreeSelMaskVec_T_3 ? 3'h2 : {_remFreeSelMaskVec_T_4, 2'h0};
  wire [11:0]      remFreeSelIndexOHVec_0 =
    {3'h0,
     remFreeSelIndexOHVec_highIndexOH[2],
     3'h0,
     remFreeSelIndexOHVec_highIndexOH[1],
     3'h0,
     remFreeSelIndexOHVec_highIndexOH[0]};
  wire [2:0]       remFreeSelIndexOHVec_highIndexOH_1 =
    _remFreeSelMaskVec_T_8
      ? 3'h1
      : _remFreeSelMaskVec_T_9 ? 3'h2 : {_remFreeSelMaskVec_T_10, 2'h0};
  wire [11:0]      remFreeSelIndexOHVec_1 =
    {2'h0,
     remFreeSelIndexOHVec_highIndexOH_1[2],
     3'h0,
     remFreeSelIndexOHVec_highIndexOH_1[1],
     3'h0,
     remFreeSelIndexOHVec_highIndexOH_1[0],
     1'h0};
  wire [2:0]       remFreeSelIndexOHVec_highIndexOH_2 =
    _remFreeSelMaskVec_T_14
      ? 3'h1
      : _remFreeSelMaskVec_T_15 ? 3'h2 : {_remFreeSelMaskVec_T_16, 2'h0};
  wire [11:0]      remFreeSelIndexOHVec_2 =
    {1'h0,
     remFreeSelIndexOHVec_highIndexOH_2[2],
     3'h0,
     remFreeSelIndexOHVec_highIndexOH_2[1],
     3'h0,
     remFreeSelIndexOHVec_highIndexOH_2[0],
     2'h0};
  wire [2:0]       remFreeSelIndexOHVec_highIndexOH_3 =
    _remFreeSelMaskVec_T_20
      ? 3'h1
      : _remFreeSelMaskVec_T_21 ? 3'h2 : {_remFreeSelMaskVec_T_22, 2'h0};
  wire [11:0]      remFreeSelIndexOHVec_3 =
    {remFreeSelIndexOHVec_highIndexOH_3[2],
     3'h0,
     remFreeSelIndexOHVec_highIndexOH_3[1],
     3'h0,
     remFreeSelIndexOHVec_highIndexOH_3[0],
     3'h0};
  wire [3:0]       _doFree_T =
    {freeReq_next_nextVec_3_r,
     freeReq_next_nextVec_2_r,
     freeReq_next_nextVec_1_r,
     freeReq_next_nextVec_0_r};
  wire [4:0]       _GEN_0 = {1'h0, tailPtr_value};
  wire [5:0]       _enqPtr_diff_T_4 = 6'({2'h0, tailPtr_value} - 6'hC);
  wire [3:0]       _enqPtr_new_ptr_value_T_1 =
    $signed(_enqPtr_diff_T_4) > -6'sh1 ? _enqPtr_diff_T_4[3:0] : tailPtr_value;
  wire [6:0]       _freeList_T_1 =
    {4'h0, freeSlotOH_next_nextVec_0_r[11:9]} | freeSlotOH_next_nextVec_0_r[7:1];
  wire [2:0]       _freeList_T_3 = _freeList_T_1[6:4] | _freeList_T_1[2:0];
  wire [3:0]       _freeList_T_9 =
    {|(freeSlotOH_next_nextVec_0_r[11:8]),
     |(_freeList_T_1[6:3]),
     |(_freeList_T_3[2:1]),
     _freeList_T_3[2] | _freeList_T_3[0]};
  wire [4:0]       enqPtr_new_value_1 = 5'(_GEN_0 + {4'h0, freeReq_next_nextVec_0_r});
  wire [5:0]       _enqPtr_diff_T_10 = 6'({1'h0, enqPtr_new_value_1} - 6'hC);
  wire [3:0]       _enqPtr_new_ptr_value_T_3 =
    $signed(_enqPtr_diff_T_10) > -6'sh1
      ? _enqPtr_diff_T_10[3:0]
      : enqPtr_new_value_1[3:0];
  wire [6:0]       _freeList_T_11 =
    {4'h0, freeSlotOH_next_nextVec_1_r[11:9]} | freeSlotOH_next_nextVec_1_r[7:1];
  wire [2:0]       _freeList_T_13 = _freeList_T_11[6:4] | _freeList_T_11[2:0];
  wire [3:0]       _freeList_T_19 =
    {|(freeSlotOH_next_nextVec_1_r[11:8]),
     |(_freeList_T_11[6:3]),
     |(_freeList_T_13[2:1]),
     _freeList_T_13[2] | _freeList_T_13[0]};
  wire [1:0]       _GEN_1 = {1'h0, freeReq_next_nextVec_0_r};
  wire [1:0]       _GEN_2 = {1'h0, freeReq_next_nextVec_1_r};
  wire [1:0]       offset = 2'(_GEN_1 + _GEN_2);
  wire [4:0]       enqPtr_new_value_2 = 5'(_GEN_0 + {3'h0, offset});
  wire [5:0]       _enqPtr_diff_T_16 = 6'({1'h0, enqPtr_new_value_2} - 6'hC);
  wire [3:0]       _enqPtr_new_ptr_value_T_5 =
    $signed(_enqPtr_diff_T_16) > -6'sh1
      ? _enqPtr_diff_T_16[3:0]
      : enqPtr_new_value_2[3:0];
  wire [6:0]       _freeList_T_21 =
    {4'h0, freeSlotOH_next_nextVec_2_r[11:9]} | freeSlotOH_next_nextVec_2_r[7:1];
  wire [2:0]       _freeList_T_23 = _freeList_T_21[6:4] | _freeList_T_21[2:0];
  wire [3:0]       _freeList_T_29 =
    {|(freeSlotOH_next_nextVec_2_r[11:8]),
     |(_freeList_T_21[6:3]),
     |(_freeList_T_23[2:1]),
     _freeList_T_23[2] | _freeList_T_23[0]};
  wire [1:0]       _GEN_3 = {1'h0, freeReq_next_nextVec_2_r};
  wire [4:0]       enqPtr_new_value_3 =
    5'(_GEN_0 + {3'h0, 2'(_GEN_1 + 2'(_GEN_2 + _GEN_3))});
  wire [5:0]       _enqPtr_diff_T_22 = 6'({1'h0, enqPtr_new_value_3} - 6'hC);
  wire [3:0]       _enqPtr_new_ptr_value_T_7 =
    $signed(_enqPtr_diff_T_22) > -6'sh1
      ? _enqPtr_diff_T_22[3:0]
      : enqPtr_new_value_3[3:0];
  wire [6:0]       _freeList_T_31 =
    {4'h0, freeSlotOH_next_nextVec_3_r[11:9]} | freeSlotOH_next_nextVec_3_r[7:1];
  wire [2:0]       _freeList_T_33 = _freeList_T_31[6:4] | _freeList_T_31[2:0];
  wire [3:0]       _freeList_T_39 =
    {|(freeSlotOH_next_nextVec_3_r[11:8]),
     |(_freeList_T_31[6:3]),
     |(_freeList_T_33[2:1]),
     _freeList_T_33[2] | _freeList_T_33[0]};
  wire [4:0]       tailPtrNext_new_value =
    5'(_GEN_0
       + {2'h0,
          3'({1'h0, offset} + {1'h0, 2'(_GEN_3 + {1'h0, freeReq_next_nextVec_3_r})})});
  wire [5:0]       _tailPtrNext_diff_T_4 = 6'({1'h0, tailPtrNext_new_value} - 6'hC);
  wire             tailPtrNext_reverse_flag = $signed(_tailPtrNext_diff_T_4) > -6'sh1;
  wire [3:0]       _tailPtrNext_new_ptr_value_T_1 =
    tailPtrNext_reverse_flag ? _tailPtrNext_diff_T_4[3:0] : tailPtrNext_new_value[3:0];
  wire [2:0]       _doAllocate_T = {io_doAllocate_2, io_doAllocate_1, io_doAllocate_0};
  wire [5:0]       _headPtrNext_diff_T_4 = 6'(_GEN - 6'hC);
  wire             headPtrNext_reverse_flag = $signed(_headPtrNext_diff_T_4) > -6'sh1;
  wire [3:0]       _headPtrNext_new_ptr_value_T_1 =
    headPtrNext_reverse_flag ? _headPtrNext_diff_T_4[3:0] : deqPtr_new_value[3:0];
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      freeList_0 <= 4'h0;
      freeList_1 <= 4'h1;
      freeList_2 <= 4'h2;
      freeList_3 <= 4'h3;
      freeList_4 <= 4'h4;
      freeList_5 <= 4'h5;
      freeList_6 <= 4'h6;
      freeList_7 <= 4'h7;
      freeList_8 <= 4'h8;
      freeList_9 <= 4'h9;
      freeList_10 <= 4'hA;
      freeList_11 <= 4'hB;
      headPtr_flag <= 1'h0;
      headPtr_value <= 4'h0;
      tailPtr_flag <= 1'h1;
      tailPtr_value <= 4'h0;
      freeMask <= 12'h0;
      freeReq_next_nextVec_0_r <= 1'h0;
      freeReq_next_nextVec_1_r <= 1'h0;
      freeReq_next_nextVec_2_r <= 1'h0;
      freeReq_next_nextVec_3_r <= 1'h0;
      freeSlotOH_next_nextVec_0_r <= 12'h0;
      freeSlotOH_next_nextVec_1_r <= 12'h0;
      freeSlotOH_next_nextVec_2_r <= 12'h0;
      freeSlotOH_next_nextVec_3_r <= 12'h0;
      freeSlotCnt <= 4'hC;
    end
    else begin
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_value_T_7 == 4'h0)
        freeList_0 <= _freeList_T_39;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_value_T_5 == 4'h0)
        freeList_0 <= _freeList_T_29;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_value_T_3 == 4'h0)
        freeList_0 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & _enqPtr_new_ptr_value_T_1 == 4'h0)
        freeList_0 <= _freeList_T_9;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_value_T_7 == 4'h1)
        freeList_1 <= _freeList_T_39;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_value_T_5 == 4'h1)
        freeList_1 <= _freeList_T_29;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_value_T_3 == 4'h1)
        freeList_1 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & _enqPtr_new_ptr_value_T_1 == 4'h1)
        freeList_1 <= _freeList_T_9;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_value_T_7 == 4'h2)
        freeList_2 <= _freeList_T_39;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_value_T_5 == 4'h2)
        freeList_2 <= _freeList_T_29;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_value_T_3 == 4'h2)
        freeList_2 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & _enqPtr_new_ptr_value_T_1 == 4'h2)
        freeList_2 <= _freeList_T_9;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_value_T_7 == 4'h3)
        freeList_3 <= _freeList_T_39;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_value_T_5 == 4'h3)
        freeList_3 <= _freeList_T_29;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_value_T_3 == 4'h3)
        freeList_3 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & _enqPtr_new_ptr_value_T_1 == 4'h3)
        freeList_3 <= _freeList_T_9;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_value_T_7 == 4'h4)
        freeList_4 <= _freeList_T_39;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_value_T_5 == 4'h4)
        freeList_4 <= _freeList_T_29;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_value_T_3 == 4'h4)
        freeList_4 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & _enqPtr_new_ptr_value_T_1 == 4'h4)
        freeList_4 <= _freeList_T_9;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_value_T_7 == 4'h5)
        freeList_5 <= _freeList_T_39;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_value_T_5 == 4'h5)
        freeList_5 <= _freeList_T_29;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_value_T_3 == 4'h5)
        freeList_5 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & _enqPtr_new_ptr_value_T_1 == 4'h5)
        freeList_5 <= _freeList_T_9;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_value_T_7 == 4'h6)
        freeList_6 <= _freeList_T_39;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_value_T_5 == 4'h6)
        freeList_6 <= _freeList_T_29;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_value_T_3 == 4'h6)
        freeList_6 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & _enqPtr_new_ptr_value_T_1 == 4'h6)
        freeList_6 <= _freeList_T_9;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_value_T_7 == 4'h7)
        freeList_7 <= _freeList_T_39;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_value_T_5 == 4'h7)
        freeList_7 <= _freeList_T_29;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_value_T_3 == 4'h7)
        freeList_7 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & _enqPtr_new_ptr_value_T_1 == 4'h7)
        freeList_7 <= _freeList_T_9;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_value_T_7 == 4'h8)
        freeList_8 <= _freeList_T_39;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_value_T_5 == 4'h8)
        freeList_8 <= _freeList_T_29;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_value_T_3 == 4'h8)
        freeList_8 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & _enqPtr_new_ptr_value_T_1 == 4'h8)
        freeList_8 <= _freeList_T_9;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_value_T_7 == 4'h9)
        freeList_9 <= _freeList_T_39;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_value_T_5 == 4'h9)
        freeList_9 <= _freeList_T_29;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_value_T_3 == 4'h9)
        freeList_9 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & _enqPtr_new_ptr_value_T_1 == 4'h9)
        freeList_9 <= _freeList_T_9;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_value_T_7 == 4'hA)
        freeList_10 <= _freeList_T_39;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_value_T_5 == 4'hA)
        freeList_10 <= _freeList_T_29;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_value_T_3 == 4'hA)
        freeList_10 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & _enqPtr_new_ptr_value_T_1 == 4'hA)
        freeList_10 <= _freeList_T_9;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_value_T_7 == 4'hB)
        freeList_11 <= _freeList_T_39;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_value_T_5 == 4'hB)
        freeList_11 <= _freeList_T_29;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_value_T_3 == 4'hB)
        freeList_11 <= _freeList_T_19;
      else if (freeReq_next_nextVec_0_r & _enqPtr_new_ptr_value_T_1 == 4'hB)
        freeList_11 <= _freeList_T_9;
      headPtr_flag <= (|_doAllocate_T) & headPtrNext_reverse_flag ^ headPtr_flag;
      if (|_doAllocate_T)
        headPtr_value <= _headPtrNext_new_ptr_value_T_1;
      tailPtr_flag <= (|_doFree_T) & tailPtrNext_reverse_flag ^ tailPtr_flag;
      if (|_doFree_T)
        tailPtr_value <= _tailPtrNext_new_ptr_value_T_1;
      freeMask <= (io_free | freeMask) & _remFreeSelMaskVec_T_18;
      if (~((|remFreeSelMaskVec_0) == freeReq_next_nextVec_0_r))
        freeReq_next_nextVec_0_r <= |remFreeSelMaskVec_0;
      if (~((|remFreeSelMaskVec_1) == freeReq_next_nextVec_1_r))
        freeReq_next_nextVec_1_r <= |remFreeSelMaskVec_1;
      if (~((|remFreeSelMaskVec_2) == freeReq_next_nextVec_2_r))
        freeReq_next_nextVec_2_r <= |remFreeSelMaskVec_2;
      if (~((|remFreeSelMaskVec_3) == freeReq_next_nextVec_3_r))
        freeReq_next_nextVec_3_r <= |remFreeSelMaskVec_3;
      if (~(remFreeSelIndexOHVec_0 == freeSlotOH_next_nextVec_0_r))
        freeSlotOH_next_nextVec_0_r <= remFreeSelIndexOHVec_0;
      if (~(remFreeSelIndexOHVec_1 == freeSlotOH_next_nextVec_1_r))
        freeSlotOH_next_nextVec_1_r <= remFreeSelIndexOHVec_1;
      if (~(remFreeSelIndexOHVec_2 == freeSlotOH_next_nextVec_2_r))
        freeSlotOH_next_nextVec_2_r <= remFreeSelIndexOHVec_2;
      if (~(remFreeSelIndexOHVec_3 == freeSlotOH_next_nextVec_3_r))
        freeSlotOH_next_nextVec_3_r <= remFreeSelIndexOHVec_3;
      freeSlotCnt <=
        (tailPtrNext_reverse_flag
         ^ tailPtr_flag) == (headPtrNext_reverse_flag ^ headPtr_flag)
          ? 4'(_tailPtrNext_new_ptr_value_T_1 - _headPtrNext_new_ptr_value_T_1)
          : 4'(4'(_tailPtrNext_new_ptr_value_T_1 - 4'h4)
               - _headPtrNext_new_ptr_value_T_1);
    end
  end // always @(posedge, posedge)
  wire [5:0]       _deqPtr_diff_T_4 = 6'(_GEN - 6'hC);
  wire             deqPtr_reverse_flag = $signed(_deqPtr_diff_T_4) > -6'sh1;
  wire [3:0]       _deqPtr_new_ptr_value_T_1 =
    deqPtr_reverse_flag ? _deqPtr_diff_T_4[3:0] : deqPtr_new_value[3:0];
  wire [5:0]       _deqPtr_diff_T_10 = 6'({2'h0, _deqPtr_new_ptr_value_T_1} - 6'hC);
  wire             deqPtr_reverse_flag_1 = $signed(_deqPtr_diff_T_10) > -6'sh1;
  wire [3:0]       _deqPtr_new_ptr_value_T_3 =
    deqPtr_reverse_flag_1 ? _deqPtr_diff_T_10[3:0] : _deqPtr_new_ptr_value_T_1;
  wire [15:0][3:0] _GEN_4 =
    {{freeList_0},
     {freeList_0},
     {freeList_0},
     {freeList_0},
     {freeList_11},
     {freeList_10},
     {freeList_9},
     {freeList_8},
     {freeList_7},
     {freeList_6},
     {freeList_5},
     {freeList_4},
     {freeList_3},
     {freeList_2},
     {freeList_1},
     {freeList_0}};
  wire [5:0]       _deqPtr_diff_T_16 = 6'(_GEN - 6'hC);
  wire             deqPtr_reverse_flag_2 = $signed(_deqPtr_diff_T_16) > -6'sh1;
  wire [4:0]       deqPtr_new_value_3 =
    5'({1'h0, deqPtr_reverse_flag_2 ? _deqPtr_diff_T_16[3:0] : deqPtr_new_value[3:0]}
       + 5'h1);
  wire [5:0]       _deqPtr_diff_T_22 = 6'({1'h0, deqPtr_new_value_3} - 6'hC);
  wire             deqPtr_reverse_flag_3 = $signed(_deqPtr_diff_T_22) > -6'sh1;
  wire [3:0]       _deqPtr_new_ptr_value_T_7 =
    deqPtr_reverse_flag_3 ? _deqPtr_diff_T_22[3:0] : deqPtr_new_value_3[3:0];
  wire [5:0]       _deqPtr_diff_T_28 = 6'(_GEN - 6'hC);
  wire             deqPtr_reverse_flag_4 = $signed(_deqPtr_diff_T_28) > -6'sh1;
  wire [4:0]       deqPtr_new_value_5 =
    5'({1'h0, deqPtr_reverse_flag_4 ? _deqPtr_diff_T_28[3:0] : deqPtr_new_value[3:0]}
       + 5'h2);
  wire [5:0]       _deqPtr_diff_T_34 = 6'({1'h0, deqPtr_new_value_5} - 6'hC);
  wire             deqPtr_reverse_flag_5 = $signed(_deqPtr_diff_T_34) > -6'sh1;
  wire [3:0]       _deqPtr_new_ptr_value_T_11 =
    deqPtr_reverse_flag_5 ? _deqPtr_diff_T_34[3:0] : deqPtr_new_value_5[3:0];
  always @(posedge clock) begin
    io_canAllocate_0_r <=
      deqPtr_reverse_flag_1 ^ deqPtr_reverse_flag ^ headPtr_flag ^ tailPtr_flag
      ^ _deqPtr_new_ptr_value_T_3 < tailPtr_value;
    io_allocateSlot_0_r <= _GEN_4[_deqPtr_new_ptr_value_T_3];
    io_canAllocate_1_r <=
      deqPtr_reverse_flag_3 ^ deqPtr_reverse_flag_2 ^ headPtr_flag ^ tailPtr_flag
      ^ _deqPtr_new_ptr_value_T_7 < tailPtr_value;
    io_allocateSlot_1_r <= _GEN_4[_deqPtr_new_ptr_value_T_7];
    io_canAllocate_2_r <=
      deqPtr_reverse_flag_5 ^ deqPtr_reverse_flag_4 ^ headPtr_flag ^ tailPtr_flag
      ^ _deqPtr_new_ptr_value_T_11 < tailPtr_value;
    io_allocateSlot_2_r <= _GEN_4[_deqPtr_new_ptr_value_T_11];
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        freeList_0 = _RANDOM[3'h0][3:0];
        freeList_1 = _RANDOM[3'h0][7:4];
        freeList_2 = _RANDOM[3'h0][11:8];
        freeList_3 = _RANDOM[3'h0][15:12];
        freeList_4 = _RANDOM[3'h0][19:16];
        freeList_5 = _RANDOM[3'h0][23:20];
        freeList_6 = _RANDOM[3'h0][27:24];
        freeList_7 = _RANDOM[3'h0][31:28];
        freeList_8 = _RANDOM[3'h1][3:0];
        freeList_9 = _RANDOM[3'h1][7:4];
        freeList_10 = _RANDOM[3'h1][11:8];
        freeList_11 = _RANDOM[3'h1][15:12];
        headPtr_flag = _RANDOM[3'h1][16];
        headPtr_value = _RANDOM[3'h1][20:17];
        tailPtr_flag = _RANDOM[3'h1][21];
        tailPtr_value = _RANDOM[3'h1][25:22];
        freeMask = {_RANDOM[3'h1][31:26], _RANDOM[3'h2][5:0]};
        freeReq_next_nextVec_0_r = _RANDOM[3'h2][6];
        freeReq_next_nextVec_1_r = _RANDOM[3'h2][7];
        freeReq_next_nextVec_2_r = _RANDOM[3'h2][8];
        freeReq_next_nextVec_3_r = _RANDOM[3'h2][9];
        freeSlotOH_next_nextVec_0_r = _RANDOM[3'h2][21:10];
        freeSlotOH_next_nextVec_1_r = {_RANDOM[3'h2][31:22], _RANDOM[3'h3][1:0]};
        freeSlotOH_next_nextVec_2_r = _RANDOM[3'h3][13:2];
        freeSlotOH_next_nextVec_3_r = _RANDOM[3'h3][25:14];
        freeSlotCnt = _RANDOM[3'h3][29:26];
        io_canAllocate_0_r = _RANDOM[3'h3][30];
        io_allocateSlot_0_r = {_RANDOM[3'h3][31], _RANDOM[3'h4][2:0]};
        io_canAllocate_1_r = _RANDOM[3'h4][3];
        io_allocateSlot_1_r = _RANDOM[3'h4][7:4];
        io_canAllocate_2_r = _RANDOM[3'h4][8];
        io_allocateSlot_2_r = _RANDOM[3'h4][12:9];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        freeList_0 = 4'h0;
        freeList_1 = 4'h1;
        freeList_2 = 4'h2;
        freeList_3 = 4'h3;
        freeList_4 = 4'h4;
        freeList_5 = 4'h5;
        freeList_6 = 4'h6;
        freeList_7 = 4'h7;
        freeList_8 = 4'h8;
        freeList_9 = 4'h9;
        freeList_10 = 4'hA;
        freeList_11 = 4'hB;
        headPtr_flag = 1'h0;
        headPtr_value = 4'h0;
        tailPtr_flag = 1'h1;
        tailPtr_value = 4'h0;
        freeMask = 12'h0;
        freeReq_next_nextVec_0_r = 1'h0;
        freeReq_next_nextVec_1_r = 1'h0;
        freeReq_next_nextVec_2_r = 1'h0;
        freeReq_next_nextVec_3_r = 1'h0;
        freeSlotOH_next_nextVec_0_r = 12'h0;
        freeSlotOH_next_nextVec_1_r = 12'h0;
        freeSlotOH_next_nextVec_2_r = 12'h0;
        freeSlotOH_next_nextVec_3_r = 12'h0;
        freeSlotCnt = 4'hC;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_allocateSlot_0 = io_allocateSlot_0_r;
  assign io_allocateSlot_1 = io_allocateSlot_1_r;
  assign io_allocateSlot_2 = io_allocateSlot_2_r;
  assign io_canAllocate_0 = io_canAllocate_0_r;
  assign io_canAllocate_1 = io_canAllocate_1_r;
  assign io_canAllocate_2 = io_canAllocate_2_r;
  assign io_empty = freeSlotCnt == 4'h0;
endmodule

