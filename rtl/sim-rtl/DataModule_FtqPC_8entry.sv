// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DataModule_FtqPC_8entry(
  input         clock,
  input  [2:0]  io_raddr_0,
  input  [2:0]  io_raddr_1,
  input  [2:0]  io_raddr_2,
  input  [2:0]  io_raddr_3,
  input  [2:0]  io_raddr_4,
  input  [2:0]  io_raddr_5,
  input  [2:0]  io_raddr_6,
  output [49:0] io_rdata_0_startAddr,
  output [49:0] io_rdata_0_nextLineAddr,
  output        io_rdata_0_fallThruError,
  output [49:0] io_rdata_1_startAddr,
  output [49:0] io_rdata_1_nextLineAddr,
  output        io_rdata_1_fallThruError,
  output [49:0] io_rdata_2_startAddr,
  output [49:0] io_rdata_3_startAddr,
  output [49:0] io_rdata_3_nextLineAddr,
  output [49:0] io_rdata_4_startAddr,
  output [49:0] io_rdata_4_nextLineAddr,
  output [49:0] io_rdata_5_startAddr,
  output [49:0] io_rdata_6_startAddr,
  input         io_wen_0,
  input  [2:0]  io_waddr_0,
  input  [49:0] io_wdata_0_startAddr,
  input  [49:0] io_wdata_0_nextLineAddr,
  input         io_wdata_0_fallThruError
);

  reg  [49:0] data_0_startAddr;
  reg  [49:0] data_0_nextLineAddr;
  reg         data_0_fallThruError;
  reg  [49:0] data_1_startAddr;
  reg  [49:0] data_1_nextLineAddr;
  reg         data_1_fallThruError;
  reg  [49:0] data_2_startAddr;
  reg  [49:0] data_2_nextLineAddr;
  reg         data_2_fallThruError;
  reg  [49:0] data_3_startAddr;
  reg  [49:0] data_3_nextLineAddr;
  reg         data_3_fallThruError;
  reg  [49:0] data_4_startAddr;
  reg  [49:0] data_4_nextLineAddr;
  reg         data_4_fallThruError;
  reg  [49:0] data_5_startAddr;
  reg  [49:0] data_5_nextLineAddr;
  reg         data_5_fallThruError;
  reg  [49:0] data_6_startAddr;
  reg  [49:0] data_6_nextLineAddr;
  reg         data_6_fallThruError;
  reg  [49:0] data_7_startAddr;
  reg  [49:0] data_7_nextLineAddr;
  reg         data_7_fallThruError;
  wire        read_by_0 = io_wen_0 & io_waddr_0 == io_raddr_0;
  wire        _io_rdata_0_T = io_raddr_0 == 3'h0;
  wire        _io_rdata_0_T_1 = io_raddr_0 == 3'h1;
  wire        _io_rdata_0_T_2 = io_raddr_0 == 3'h2;
  wire        _io_rdata_0_T_3 = io_raddr_0 == 3'h3;
  wire        _io_rdata_0_T_4 = io_raddr_0 == 3'h4;
  wire        _io_rdata_0_T_5 = io_raddr_0 == 3'h5;
  wire        _io_rdata_0_T_6 = io_raddr_0 == 3'h6;
  wire        read_by_0_1 = io_wen_0 & io_waddr_0 == io_raddr_1;
  wire        _io_rdata_1_T = io_raddr_1 == 3'h0;
  wire        _io_rdata_1_T_1 = io_raddr_1 == 3'h1;
  wire        _io_rdata_1_T_2 = io_raddr_1 == 3'h2;
  wire        _io_rdata_1_T_3 = io_raddr_1 == 3'h3;
  wire        _io_rdata_1_T_4 = io_raddr_1 == 3'h4;
  wire        _io_rdata_1_T_5 = io_raddr_1 == 3'h5;
  wire        _io_rdata_1_T_6 = io_raddr_1 == 3'h6;
  wire        read_by_0_3 = io_wen_0 & io_waddr_0 == io_raddr_3;
  wire        _io_rdata_3_T = io_raddr_3 == 3'h0;
  wire        _io_rdata_3_T_1 = io_raddr_3 == 3'h1;
  wire        _io_rdata_3_T_2 = io_raddr_3 == 3'h2;
  wire        _io_rdata_3_T_3 = io_raddr_3 == 3'h3;
  wire        _io_rdata_3_T_4 = io_raddr_3 == 3'h4;
  wire        _io_rdata_3_T_5 = io_raddr_3 == 3'h5;
  wire        _io_rdata_3_T_6 = io_raddr_3 == 3'h6;
  wire        read_by_0_4 = io_wen_0 & io_waddr_0 == io_raddr_4;
  wire        _io_rdata_4_T = io_raddr_4 == 3'h0;
  wire        _io_rdata_4_T_1 = io_raddr_4 == 3'h1;
  wire        _io_rdata_4_T_2 = io_raddr_4 == 3'h2;
  wire        _io_rdata_4_T_3 = io_raddr_4 == 3'h3;
  wire        _io_rdata_4_T_4 = io_raddr_4 == 3'h4;
  wire        _io_rdata_4_T_5 = io_raddr_4 == 3'h5;
  wire        _io_rdata_4_T_6 = io_raddr_4 == 3'h6;
  always @(posedge clock) begin
    if (io_wen_0 & io_waddr_0 == 3'h0) begin
      data_0_startAddr <= io_wdata_0_startAddr;
      data_0_nextLineAddr <= io_wdata_0_nextLineAddr;
      data_0_fallThruError <= io_wdata_0_fallThruError;
    end
    if (io_wen_0 & io_waddr_0 == 3'h1) begin
      data_1_startAddr <= io_wdata_0_startAddr;
      data_1_nextLineAddr <= io_wdata_0_nextLineAddr;
      data_1_fallThruError <= io_wdata_0_fallThruError;
    end
    if (io_wen_0 & io_waddr_0 == 3'h2) begin
      data_2_startAddr <= io_wdata_0_startAddr;
      data_2_nextLineAddr <= io_wdata_0_nextLineAddr;
      data_2_fallThruError <= io_wdata_0_fallThruError;
    end
    if (io_wen_0 & io_waddr_0 == 3'h3) begin
      data_3_startAddr <= io_wdata_0_startAddr;
      data_3_nextLineAddr <= io_wdata_0_nextLineAddr;
      data_3_fallThruError <= io_wdata_0_fallThruError;
    end
    if (io_wen_0 & io_waddr_0 == 3'h4) begin
      data_4_startAddr <= io_wdata_0_startAddr;
      data_4_nextLineAddr <= io_wdata_0_nextLineAddr;
      data_4_fallThruError <= io_wdata_0_fallThruError;
    end
    if (io_wen_0 & io_waddr_0 == 3'h5) begin
      data_5_startAddr <= io_wdata_0_startAddr;
      data_5_nextLineAddr <= io_wdata_0_nextLineAddr;
      data_5_fallThruError <= io_wdata_0_fallThruError;
    end
    if (io_wen_0 & io_waddr_0 == 3'h6) begin
      data_6_startAddr <= io_wdata_0_startAddr;
      data_6_nextLineAddr <= io_wdata_0_nextLineAddr;
      data_6_fallThruError <= io_wdata_0_fallThruError;
    end
    if (io_wen_0 & (&io_waddr_0)) begin
      data_7_startAddr <= io_wdata_0_startAddr;
      data_7_nextLineAddr <= io_wdata_0_nextLineAddr;
      data_7_fallThruError <= io_wdata_0_fallThruError;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:29];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h1E; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        data_0_startAddr = {_RANDOM[5'h0], _RANDOM[5'h1][17:0]};
        data_0_nextLineAddr = {_RANDOM[5'h1][31:18], _RANDOM[5'h2], _RANDOM[5'h3][3:0]};
        data_0_fallThruError = _RANDOM[5'h3][20];
        data_1_startAddr = {_RANDOM[5'h3][31:21], _RANDOM[5'h4], _RANDOM[5'h5][6:0]};
        data_1_nextLineAddr = {_RANDOM[5'h5][31:7], _RANDOM[5'h6][24:0]};
        data_1_fallThruError = _RANDOM[5'h7][9];
        data_2_startAddr = {_RANDOM[5'h7][31:10], _RANDOM[5'h8][27:0]};
        data_2_nextLineAddr = {_RANDOM[5'h8][31:28], _RANDOM[5'h9], _RANDOM[5'hA][13:0]};
        data_2_fallThruError = _RANDOM[5'hA][30];
        data_3_startAddr = {_RANDOM[5'hA][31], _RANDOM[5'hB], _RANDOM[5'hC][16:0]};
        data_3_nextLineAddr = {_RANDOM[5'hC][31:17], _RANDOM[5'hD], _RANDOM[5'hE][2:0]};
        data_3_fallThruError = _RANDOM[5'hE][19];
        data_4_startAddr = {_RANDOM[5'hE][31:20], _RANDOM[5'hF], _RANDOM[5'h10][5:0]};
        data_4_nextLineAddr = {_RANDOM[5'h10][31:6], _RANDOM[5'h11][23:0]};
        data_4_fallThruError = _RANDOM[5'h12][8];
        data_5_startAddr = {_RANDOM[5'h12][31:9], _RANDOM[5'h13][26:0]};
        data_5_nextLineAddr =
          {_RANDOM[5'h13][31:27], _RANDOM[5'h14], _RANDOM[5'h15][12:0]};
        data_5_fallThruError = _RANDOM[5'h15][29];
        data_6_startAddr = {_RANDOM[5'h15][31:30], _RANDOM[5'h16], _RANDOM[5'h17][15:0]};
        data_6_nextLineAddr =
          {_RANDOM[5'h17][31:16], _RANDOM[5'h18], _RANDOM[5'h19][1:0]};
        data_6_fallThruError = _RANDOM[5'h19][18];
        data_7_startAddr = {_RANDOM[5'h19][31:19], _RANDOM[5'h1A], _RANDOM[5'h1B][4:0]};
        data_7_nextLineAddr = {_RANDOM[5'h1B][31:5], _RANDOM[5'h1C][22:0]};
        data_7_fallThruError = _RANDOM[5'h1D][7];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_rdata_0_startAddr =
    read_by_0
      ? io_wdata_0_startAddr
      : (_io_rdata_0_T ? data_0_startAddr : 50'h0)
        | (_io_rdata_0_T_1 ? data_1_startAddr : 50'h0)
        | (_io_rdata_0_T_2 ? data_2_startAddr : 50'h0)
        | (_io_rdata_0_T_3 ? data_3_startAddr : 50'h0)
        | (_io_rdata_0_T_4 ? data_4_startAddr : 50'h0)
        | (_io_rdata_0_T_5 ? data_5_startAddr : 50'h0)
        | (_io_rdata_0_T_6 ? data_6_startAddr : 50'h0)
        | ((&io_raddr_0) ? data_7_startAddr : 50'h0);
  assign io_rdata_0_nextLineAddr =
    read_by_0
      ? io_wdata_0_nextLineAddr
      : (_io_rdata_0_T ? data_0_nextLineAddr : 50'h0)
        | (_io_rdata_0_T_1 ? data_1_nextLineAddr : 50'h0)
        | (_io_rdata_0_T_2 ? data_2_nextLineAddr : 50'h0)
        | (_io_rdata_0_T_3 ? data_3_nextLineAddr : 50'h0)
        | (_io_rdata_0_T_4 ? data_4_nextLineAddr : 50'h0)
        | (_io_rdata_0_T_5 ? data_5_nextLineAddr : 50'h0)
        | (_io_rdata_0_T_6 ? data_6_nextLineAddr : 50'h0)
        | ((&io_raddr_0) ? data_7_nextLineAddr : 50'h0);
  assign io_rdata_0_fallThruError =
    read_by_0
      ? io_wdata_0_fallThruError
      : _io_rdata_0_T & data_0_fallThruError | _io_rdata_0_T_1 & data_1_fallThruError
        | _io_rdata_0_T_2 & data_2_fallThruError | _io_rdata_0_T_3 & data_3_fallThruError
        | _io_rdata_0_T_4 & data_4_fallThruError | _io_rdata_0_T_5 & data_5_fallThruError
        | _io_rdata_0_T_6 & data_6_fallThruError | (&io_raddr_0) & data_7_fallThruError;
  assign io_rdata_1_startAddr =
    read_by_0_1
      ? io_wdata_0_startAddr
      : (_io_rdata_1_T ? data_0_startAddr : 50'h0)
        | (_io_rdata_1_T_1 ? data_1_startAddr : 50'h0)
        | (_io_rdata_1_T_2 ? data_2_startAddr : 50'h0)
        | (_io_rdata_1_T_3 ? data_3_startAddr : 50'h0)
        | (_io_rdata_1_T_4 ? data_4_startAddr : 50'h0)
        | (_io_rdata_1_T_5 ? data_5_startAddr : 50'h0)
        | (_io_rdata_1_T_6 ? data_6_startAddr : 50'h0)
        | ((&io_raddr_1) ? data_7_startAddr : 50'h0);
  assign io_rdata_1_nextLineAddr =
    read_by_0_1
      ? io_wdata_0_nextLineAddr
      : (_io_rdata_1_T ? data_0_nextLineAddr : 50'h0)
        | (_io_rdata_1_T_1 ? data_1_nextLineAddr : 50'h0)
        | (_io_rdata_1_T_2 ? data_2_nextLineAddr : 50'h0)
        | (_io_rdata_1_T_3 ? data_3_nextLineAddr : 50'h0)
        | (_io_rdata_1_T_4 ? data_4_nextLineAddr : 50'h0)
        | (_io_rdata_1_T_5 ? data_5_nextLineAddr : 50'h0)
        | (_io_rdata_1_T_6 ? data_6_nextLineAddr : 50'h0)
        | ((&io_raddr_1) ? data_7_nextLineAddr : 50'h0);
  assign io_rdata_1_fallThruError =
    read_by_0_1
      ? io_wdata_0_fallThruError
      : _io_rdata_1_T & data_0_fallThruError | _io_rdata_1_T_1 & data_1_fallThruError
        | _io_rdata_1_T_2 & data_2_fallThruError | _io_rdata_1_T_3 & data_3_fallThruError
        | _io_rdata_1_T_4 & data_4_fallThruError | _io_rdata_1_T_5 & data_5_fallThruError
        | _io_rdata_1_T_6 & data_6_fallThruError | (&io_raddr_1) & data_7_fallThruError;
  assign io_rdata_2_startAddr =
    io_wen_0 & io_waddr_0 == io_raddr_2
      ? io_wdata_0_startAddr
      : (io_raddr_2 == 3'h0 ? data_0_startAddr : 50'h0)
        | (io_raddr_2 == 3'h1 ? data_1_startAddr : 50'h0)
        | (io_raddr_2 == 3'h2 ? data_2_startAddr : 50'h0)
        | (io_raddr_2 == 3'h3 ? data_3_startAddr : 50'h0)
        | (io_raddr_2 == 3'h4 ? data_4_startAddr : 50'h0)
        | (io_raddr_2 == 3'h5 ? data_5_startAddr : 50'h0)
        | (io_raddr_2 == 3'h6 ? data_6_startAddr : 50'h0)
        | ((&io_raddr_2) ? data_7_startAddr : 50'h0);
  assign io_rdata_3_startAddr =
    read_by_0_3
      ? io_wdata_0_startAddr
      : (_io_rdata_3_T ? data_0_startAddr : 50'h0)
        | (_io_rdata_3_T_1 ? data_1_startAddr : 50'h0)
        | (_io_rdata_3_T_2 ? data_2_startAddr : 50'h0)
        | (_io_rdata_3_T_3 ? data_3_startAddr : 50'h0)
        | (_io_rdata_3_T_4 ? data_4_startAddr : 50'h0)
        | (_io_rdata_3_T_5 ? data_5_startAddr : 50'h0)
        | (_io_rdata_3_T_6 ? data_6_startAddr : 50'h0)
        | ((&io_raddr_3) ? data_7_startAddr : 50'h0);
  assign io_rdata_3_nextLineAddr =
    read_by_0_3
      ? io_wdata_0_nextLineAddr
      : (_io_rdata_3_T ? data_0_nextLineAddr : 50'h0)
        | (_io_rdata_3_T_1 ? data_1_nextLineAddr : 50'h0)
        | (_io_rdata_3_T_2 ? data_2_nextLineAddr : 50'h0)
        | (_io_rdata_3_T_3 ? data_3_nextLineAddr : 50'h0)
        | (_io_rdata_3_T_4 ? data_4_nextLineAddr : 50'h0)
        | (_io_rdata_3_T_5 ? data_5_nextLineAddr : 50'h0)
        | (_io_rdata_3_T_6 ? data_6_nextLineAddr : 50'h0)
        | ((&io_raddr_3) ? data_7_nextLineAddr : 50'h0);
  assign io_rdata_4_startAddr =
    read_by_0_4
      ? io_wdata_0_startAddr
      : (_io_rdata_4_T ? data_0_startAddr : 50'h0)
        | (_io_rdata_4_T_1 ? data_1_startAddr : 50'h0)
        | (_io_rdata_4_T_2 ? data_2_startAddr : 50'h0)
        | (_io_rdata_4_T_3 ? data_3_startAddr : 50'h0)
        | (_io_rdata_4_T_4 ? data_4_startAddr : 50'h0)
        | (_io_rdata_4_T_5 ? data_5_startAddr : 50'h0)
        | (_io_rdata_4_T_6 ? data_6_startAddr : 50'h0)
        | ((&io_raddr_4) ? data_7_startAddr : 50'h0);
  assign io_rdata_4_nextLineAddr =
    read_by_0_4
      ? io_wdata_0_nextLineAddr
      : (_io_rdata_4_T ? data_0_nextLineAddr : 50'h0)
        | (_io_rdata_4_T_1 ? data_1_nextLineAddr : 50'h0)
        | (_io_rdata_4_T_2 ? data_2_nextLineAddr : 50'h0)
        | (_io_rdata_4_T_3 ? data_3_nextLineAddr : 50'h0)
        | (_io_rdata_4_T_4 ? data_4_nextLineAddr : 50'h0)
        | (_io_rdata_4_T_5 ? data_5_nextLineAddr : 50'h0)
        | (_io_rdata_4_T_6 ? data_6_nextLineAddr : 50'h0)
        | ((&io_raddr_4) ? data_7_nextLineAddr : 50'h0);
  assign io_rdata_5_startAddr =
    io_wen_0 & io_waddr_0 == io_raddr_5
      ? io_wdata_0_startAddr
      : (io_raddr_5 == 3'h0 ? data_0_startAddr : 50'h0)
        | (io_raddr_5 == 3'h1 ? data_1_startAddr : 50'h0)
        | (io_raddr_5 == 3'h2 ? data_2_startAddr : 50'h0)
        | (io_raddr_5 == 3'h3 ? data_3_startAddr : 50'h0)
        | (io_raddr_5 == 3'h4 ? data_4_startAddr : 50'h0)
        | (io_raddr_5 == 3'h5 ? data_5_startAddr : 50'h0)
        | (io_raddr_5 == 3'h6 ? data_6_startAddr : 50'h0)
        | ((&io_raddr_5) ? data_7_startAddr : 50'h0);
  assign io_rdata_6_startAddr =
    io_wen_0 & io_waddr_0 == io_raddr_6
      ? io_wdata_0_startAddr
      : (io_raddr_6 == 3'h0 ? data_0_startAddr : 50'h0)
        | (io_raddr_6 == 3'h1 ? data_1_startAddr : 50'h0)
        | (io_raddr_6 == 3'h2 ? data_2_startAddr : 50'h0)
        | (io_raddr_6 == 3'h3 ? data_3_startAddr : 50'h0)
        | (io_raddr_6 == 3'h4 ? data_4_startAddr : 50'h0)
        | (io_raddr_6 == 3'h5 ? data_5_startAddr : 50'h0)
        | (io_raddr_6 == 3'h6 ? data_6_startAddr : 50'h0)
        | ((&io_raddr_6) ? data_7_startAddr : 50'h0);
endmodule

