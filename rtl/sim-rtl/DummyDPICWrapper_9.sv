// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DummyDPICWrapper_9(
  input        clock,
  input [63:0] io_bits_value_0,
  input [63:0] io_bits_value_1,
  input [63:0] io_bits_value_2,
  input [63:0] io_bits_value_3,
  input [63:0] io_bits_value_4,
  input [63:0] io_bits_value_5,
  input [63:0] io_bits_value_6,
  input [63:0] io_bits_value_7,
  input [63:0] io_bits_value_8,
  input [63:0] io_bits_value_9,
  input [63:0] io_bits_value_10,
  input [63:0] io_bits_value_11,
  input [63:0] io_bits_value_12,
  input [63:0] io_bits_value_13,
  input [63:0] io_bits_value_14,
  input [63:0] io_bits_value_15,
  input [63:0] io_bits_value_16,
  input [63:0] io_bits_value_17,
  input [63:0] io_bits_value_18,
  input [63:0] io_bits_value_19,
  input [63:0] io_bits_value_20,
  input [63:0] io_bits_value_21,
  input [63:0] io_bits_value_22,
  input [63:0] io_bits_value_23,
  input [63:0] io_bits_value_24,
  input [63:0] io_bits_value_25,
  input [63:0] io_bits_value_26,
  input [63:0] io_bits_value_27,
  input [63:0] io_bits_value_28,
  input [63:0] io_bits_value_29,
  input [63:0] io_bits_value_30,
  input [63:0] io_bits_value_31,
  input [7:0]  io_bits_coreid
);

  DiffExtArchIntRegState dpic (
    .clock       (clock),
    .enable      (1'h1),
    .io_value_0  (io_bits_value_0),
    .io_value_1  (io_bits_value_1),
    .io_value_2  (io_bits_value_2),
    .io_value_3  (io_bits_value_3),
    .io_value_4  (io_bits_value_4),
    .io_value_5  (io_bits_value_5),
    .io_value_6  (io_bits_value_6),
    .io_value_7  (io_bits_value_7),
    .io_value_8  (io_bits_value_8),
    .io_value_9  (io_bits_value_9),
    .io_value_10 (io_bits_value_10),
    .io_value_11 (io_bits_value_11),
    .io_value_12 (io_bits_value_12),
    .io_value_13 (io_bits_value_13),
    .io_value_14 (io_bits_value_14),
    .io_value_15 (io_bits_value_15),
    .io_value_16 (io_bits_value_16),
    .io_value_17 (io_bits_value_17),
    .io_value_18 (io_bits_value_18),
    .io_value_19 (io_bits_value_19),
    .io_value_20 (io_bits_value_20),
    .io_value_21 (io_bits_value_21),
    .io_value_22 (io_bits_value_22),
    .io_value_23 (io_bits_value_23),
    .io_value_24 (io_bits_value_24),
    .io_value_25 (io_bits_value_25),
    .io_value_26 (io_bits_value_26),
    .io_value_27 (io_bits_value_27),
    .io_value_28 (io_bits_value_28),
    .io_value_29 (io_bits_value_29),
    .io_value_30 (io_bits_value_30),
    .io_value_31 (io_bits_value_31),
    .io_coreid   (io_bits_coreid)
  );
endmodule

