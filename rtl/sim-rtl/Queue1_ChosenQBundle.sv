// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Queue1_ChosenQBundle(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input         io_enq_bits_bits_valid,
  input         io_enq_bits_bits_rdy,
  input  [2:0]  io_enq_bits_bits_task_channel,
  input         io_enq_bits_bits_task_set,
  input  [40:0] io_enq_bits_bits_task_tag,
  input  [5:0]  io_enq_bits_bits_task_off,
  input         io_enq_bits_bits_task_isKeyword,
  input  [3:0]  io_enq_bits_bits_task_opcode,
  input  [2:0]  io_enq_bits_bits_task_param,
  input  [2:0]  io_enq_bits_bits_task_size,
  input  [5:0]  io_enq_bits_bits_task_sourceId,
  input         io_enq_bits_bits_task_corrupt,
  input  [4:0]  io_enq_bits_bits_task_reqSource,
  input  [3:0]  io_enq_bits_bits_waitMP,
  input  [15:0] io_enq_bits_bits_waitMS,
  input  [1:0]  io_enq_bits_id,
  input         io_deq_ready,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_bits_task_channel,
  output [2:0]  io_deq_bits_bits_task_txChannel,
  output        io_deq_bits_bits_task_set,
  output [40:0] io_deq_bits_bits_task_tag,
  output [5:0]  io_deq_bits_bits_task_off,
  output        io_deq_bits_bits_task_isKeyword,
  output [3:0]  io_deq_bits_bits_task_opcode,
  output [2:0]  io_deq_bits_bits_task_param,
  output [2:0]  io_deq_bits_bits_task_size,
  output [5:0]  io_deq_bits_bits_task_sourceId,
  output [1:0]  io_deq_bits_bits_task_bufIdx,
  output        io_deq_bits_bits_task_needProbeAckData,
  output        io_deq_bits_bits_task_denied,
  output        io_deq_bits_bits_task_corrupt,
  output        io_deq_bits_bits_task_mshrTask,
  output [7:0]  io_deq_bits_bits_task_mshrId,
  output        io_deq_bits_bits_task_useProbeData,
  output        io_deq_bits_bits_task_mshrRetry,
  output        io_deq_bits_bits_task_readProbeDataDown,
  output        io_deq_bits_bits_task_dirty,
  output [1:0]  io_deq_bits_bits_task_way,
  output        io_deq_bits_bits_task_meta_dirty,
  output [1:0]  io_deq_bits_bits_task_meta_state,
  output        io_deq_bits_bits_task_meta_clients,
  output        io_deq_bits_bits_task_meta_accessed,
  output        io_deq_bits_bits_task_meta_tagErr,
  output        io_deq_bits_bits_task_meta_dataErr,
  output        io_deq_bits_bits_task_metaWen,
  output        io_deq_bits_bits_task_tagWen,
  output        io_deq_bits_bits_task_dsWen,
  output        io_deq_bits_bits_task_replTask,
  output        io_deq_bits_bits_task_cmoTask,
  output        io_deq_bits_bits_task_cmoAll,
  output [4:0]  io_deq_bits_bits_task_reqSource,
  output        io_deq_bits_bits_task_mergeA,
  output [5:0]  io_deq_bits_bits_task_aMergeTask_off,
  output        io_deq_bits_bits_task_aMergeTask_isKeyword,
  output [2:0]  io_deq_bits_bits_task_aMergeTask_opcode,
  output [2:0]  io_deq_bits_bits_task_aMergeTask_param,
  output [5:0]  io_deq_bits_bits_task_aMergeTask_sourceId,
  output        io_deq_bits_bits_task_aMergeTask_meta_dirty,
  output [1:0]  io_deq_bits_bits_task_aMergeTask_meta_state,
  output        io_deq_bits_bits_task_aMergeTask_meta_clients,
  output        io_deq_bits_bits_task_aMergeTask_meta_accessed,
  output        io_deq_bits_bits_task_aMergeTask_meta_tagErr,
  output        io_deq_bits_bits_task_aMergeTask_meta_dataErr,
  output        io_deq_bits_bits_task_snpHitRelease,
  output        io_deq_bits_bits_task_snpHitReleaseToInval,
  output        io_deq_bits_bits_task_snpHitReleaseToClean,
  output        io_deq_bits_bits_task_snpHitReleaseWithData,
  output [7:0]  io_deq_bits_bits_task_snpHitReleaseIdx,
  output        io_deq_bits_bits_task_snpHitReleaseMeta_dirty,
  output [1:0]  io_deq_bits_bits_task_snpHitReleaseMeta_state,
  output        io_deq_bits_bits_task_snpHitReleaseMeta_clients,
  output        io_deq_bits_bits_task_snpHitReleaseMeta_accessed,
  output        io_deq_bits_bits_task_snpHitReleaseMeta_tagErr,
  output        io_deq_bits_bits_task_snpHitReleaseMeta_dataErr,
  output [1:0]  io_deq_bits_id
);

  wire         io_enq_ready_0;
  reg  [182:0] ram;
  reg          full;
  wire         do_enq = io_enq_ready_0 & io_enq_valid;
  assign io_enq_ready_0 = io_deq_ready | ~full;
  always @(posedge clock) begin
    if (do_enq)
      ram <=
        {io_enq_bits_id,
         io_enq_bits_bits_waitMS,
         io_enq_bits_bits_waitMP,
         46'h0,
         io_enq_bits_bits_task_reqSource,
         32'h0,
         io_enq_bits_bits_task_corrupt,
         4'h0,
         io_enq_bits_bits_task_sourceId,
         io_enq_bits_bits_task_size,
         io_enq_bits_bits_task_param,
         io_enq_bits_bits_task_opcode,
         io_enq_bits_bits_task_isKeyword,
         io_enq_bits_bits_task_off,
         io_enq_bits_bits_task_tag,
         io_enq_bits_bits_task_set,
         3'h0,
         io_enq_bits_bits_task_channel,
         io_enq_bits_bits_rdy,
         io_enq_bits_bits_valid};
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      full <= 1'h0;
    else if (~(do_enq == (io_deq_ready & full)))
      full <= do_enq;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:5];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h6; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        ram =
          {_RANDOM[3'h0][31:1],
           _RANDOM[3'h1],
           _RANDOM[3'h2],
           _RANDOM[3'h3],
           _RANDOM[3'h4],
           _RANDOM[3'h5][23:0]};
        full = _RANDOM[3'h0][0];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        full = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_enq_ready = io_enq_ready_0;
  assign io_deq_valid = full;
  assign io_deq_bits_bits_task_channel = ram[4:2];
  assign io_deq_bits_bits_task_txChannel = ram[7:5];
  assign io_deq_bits_bits_task_set = ram[8];
  assign io_deq_bits_bits_task_tag = ram[49:9];
  assign io_deq_bits_bits_task_off = ram[55:50];
  assign io_deq_bits_bits_task_isKeyword = ram[56];
  assign io_deq_bits_bits_task_opcode = ram[60:57];
  assign io_deq_bits_bits_task_param = ram[63:61];
  assign io_deq_bits_bits_task_size = ram[66:64];
  assign io_deq_bits_bits_task_sourceId = ram[72:67];
  assign io_deq_bits_bits_task_bufIdx = ram[74:73];
  assign io_deq_bits_bits_task_needProbeAckData = ram[75];
  assign io_deq_bits_bits_task_denied = ram[76];
  assign io_deq_bits_bits_task_corrupt = ram[77];
  assign io_deq_bits_bits_task_mshrTask = ram[78];
  assign io_deq_bits_bits_task_mshrId = ram[86:79];
  assign io_deq_bits_bits_task_useProbeData = ram[87];
  assign io_deq_bits_bits_task_mshrRetry = ram[88];
  assign io_deq_bits_bits_task_readProbeDataDown = ram[89];
  assign io_deq_bits_bits_task_dirty = ram[90];
  assign io_deq_bits_bits_task_way = ram[92:91];
  assign io_deq_bits_bits_task_meta_dirty = ram[93];
  assign io_deq_bits_bits_task_meta_state = ram[95:94];
  assign io_deq_bits_bits_task_meta_clients = ram[96];
  assign io_deq_bits_bits_task_meta_accessed = ram[97];
  assign io_deq_bits_bits_task_meta_tagErr = ram[98];
  assign io_deq_bits_bits_task_meta_dataErr = ram[99];
  assign io_deq_bits_bits_task_metaWen = ram[100];
  assign io_deq_bits_bits_task_tagWen = ram[101];
  assign io_deq_bits_bits_task_dsWen = ram[102];
  assign io_deq_bits_bits_task_replTask = ram[107];
  assign io_deq_bits_bits_task_cmoTask = ram[108];
  assign io_deq_bits_bits_task_cmoAll = ram[109];
  assign io_deq_bits_bits_task_reqSource = ram[114:110];
  assign io_deq_bits_bits_task_mergeA = ram[115];
  assign io_deq_bits_bits_task_aMergeTask_off = ram[121:116];
  assign io_deq_bits_bits_task_aMergeTask_isKeyword = ram[122];
  assign io_deq_bits_bits_task_aMergeTask_opcode = ram[125:123];
  assign io_deq_bits_bits_task_aMergeTask_param = ram[128:126];
  assign io_deq_bits_bits_task_aMergeTask_sourceId = ram[134:129];
  assign io_deq_bits_bits_task_aMergeTask_meta_dirty = ram[135];
  assign io_deq_bits_bits_task_aMergeTask_meta_state = ram[137:136];
  assign io_deq_bits_bits_task_aMergeTask_meta_clients = ram[138];
  assign io_deq_bits_bits_task_aMergeTask_meta_accessed = ram[139];
  assign io_deq_bits_bits_task_aMergeTask_meta_tagErr = ram[140];
  assign io_deq_bits_bits_task_aMergeTask_meta_dataErr = ram[141];
  assign io_deq_bits_bits_task_snpHitRelease = ram[142];
  assign io_deq_bits_bits_task_snpHitReleaseToInval = ram[143];
  assign io_deq_bits_bits_task_snpHitReleaseToClean = ram[144];
  assign io_deq_bits_bits_task_snpHitReleaseWithData = ram[145];
  assign io_deq_bits_bits_task_snpHitReleaseIdx = ram[153:146];
  assign io_deq_bits_bits_task_snpHitReleaseMeta_dirty = ram[154];
  assign io_deq_bits_bits_task_snpHitReleaseMeta_state = ram[156:155];
  assign io_deq_bits_bits_task_snpHitReleaseMeta_clients = ram[157];
  assign io_deq_bits_bits_task_snpHitReleaseMeta_accessed = ram[158];
  assign io_deq_bits_bits_task_snpHitReleaseMeta_tagErr = ram[159];
  assign io_deq_bits_bits_task_snpHitReleaseMeta_dataErr = ram[160];
  assign io_deq_bits_id = ram[182:181];
endmodule

