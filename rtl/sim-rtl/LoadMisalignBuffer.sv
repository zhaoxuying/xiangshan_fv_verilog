// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module LoadMisalignBuffer(
  input          clock,
  input          reset,
  input          io_redirect_valid,
  input          io_redirect_bits_robIdx_flag,
  input  [5:0]   io_redirect_bits_robIdx_value,
  input          io_redirect_bits_level,
  output         io_enq_0_req_ready,
  input          io_enq_0_req_valid,
  input          io_enq_0_req_bits_uop_exceptionVec_3,
  input          io_enq_0_req_bits_uop_exceptionVec_5,
  input          io_enq_0_req_bits_uop_exceptionVec_13,
  input          io_enq_0_req_bits_uop_exceptionVec_19,
  input          io_enq_0_req_bits_uop_exceptionVec_21,
  input  [3:0]   io_enq_0_req_bits_uop_trigger,
  input          io_enq_0_req_bits_uop_preDecodeInfo_isRVC,
  input          io_enq_0_req_bits_uop_ftqPtr_flag,
  input  [2:0]   io_enq_0_req_bits_uop_ftqPtr_value,
  input  [3:0]   io_enq_0_req_bits_uop_ftqOffset,
  input  [8:0]   io_enq_0_req_bits_uop_fuOpType,
  input          io_enq_0_req_bits_uop_rfWen,
  input          io_enq_0_req_bits_uop_fpWen,
  input  [7:0]   io_enq_0_req_bits_uop_vpu_vstart,
  input  [1:0]   io_enq_0_req_bits_uop_vpu_veew,
  input  [6:0]   io_enq_0_req_bits_uop_uopIdx,
  input  [7:0]   io_enq_0_req_bits_uop_pdest,
  input          io_enq_0_req_bits_uop_robIdx_flag,
  input  [5:0]   io_enq_0_req_bits_uop_robIdx_value,
  input          io_enq_0_req_bits_uop_storeSetHit,
  input          io_enq_0_req_bits_uop_waitForRobIdx_flag,
  input  [5:0]   io_enq_0_req_bits_uop_waitForRobIdx_value,
  input          io_enq_0_req_bits_uop_loadWaitBit,
  input          io_enq_0_req_bits_uop_loadWaitStrict,
  input          io_enq_0_req_bits_uop_lqIdx_flag,
  input  [4:0]   io_enq_0_req_bits_uop_lqIdx_value,
  input          io_enq_0_req_bits_uop_sqIdx_flag,
  input  [4:0]   io_enq_0_req_bits_uop_sqIdx_value,
  input  [49:0]  io_enq_0_req_bits_vaddr,
  input  [63:0]  io_enq_0_req_bits_fullva,
  input          io_enq_0_req_bits_vaNeedExt,
  input  [63:0]  io_enq_0_req_bits_gpaddr,
  input  [15:0]  io_enq_0_req_bits_mask,
  input          io_enq_0_req_bits_isvec,
  input  [7:0]   io_enq_0_req_bits_elemIdx,
  input  [2:0]   io_enq_0_req_bits_alignedType,
  input  [3:0]   io_enq_0_req_bits_mbIndex,
  input  [7:0]   io_enq_0_req_bits_elemIdxInsideVd,
  input  [15:0]  io_enq_0_req_bits_vecTriggerMask,
  output         io_enq_1_req_ready,
  input          io_enq_1_req_valid,
  input          io_enq_1_req_bits_uop_exceptionVec_3,
  input          io_enq_1_req_bits_uop_exceptionVec_5,
  input          io_enq_1_req_bits_uop_exceptionVec_13,
  input          io_enq_1_req_bits_uop_exceptionVec_19,
  input          io_enq_1_req_bits_uop_exceptionVec_21,
  input  [3:0]   io_enq_1_req_bits_uop_trigger,
  input          io_enq_1_req_bits_uop_preDecodeInfo_isRVC,
  input          io_enq_1_req_bits_uop_ftqPtr_flag,
  input  [2:0]   io_enq_1_req_bits_uop_ftqPtr_value,
  input  [3:0]   io_enq_1_req_bits_uop_ftqOffset,
  input  [8:0]   io_enq_1_req_bits_uop_fuOpType,
  input          io_enq_1_req_bits_uop_rfWen,
  input          io_enq_1_req_bits_uop_fpWen,
  input  [7:0]   io_enq_1_req_bits_uop_vpu_vstart,
  input  [1:0]   io_enq_1_req_bits_uop_vpu_veew,
  input  [6:0]   io_enq_1_req_bits_uop_uopIdx,
  input  [7:0]   io_enq_1_req_bits_uop_pdest,
  input          io_enq_1_req_bits_uop_robIdx_flag,
  input  [5:0]   io_enq_1_req_bits_uop_robIdx_value,
  input          io_enq_1_req_bits_uop_storeSetHit,
  input          io_enq_1_req_bits_uop_waitForRobIdx_flag,
  input  [5:0]   io_enq_1_req_bits_uop_waitForRobIdx_value,
  input          io_enq_1_req_bits_uop_loadWaitBit,
  input          io_enq_1_req_bits_uop_loadWaitStrict,
  input          io_enq_1_req_bits_uop_lqIdx_flag,
  input  [4:0]   io_enq_1_req_bits_uop_lqIdx_value,
  input          io_enq_1_req_bits_uop_sqIdx_flag,
  input  [4:0]   io_enq_1_req_bits_uop_sqIdx_value,
  input  [49:0]  io_enq_1_req_bits_vaddr,
  input  [63:0]  io_enq_1_req_bits_fullva,
  input          io_enq_1_req_bits_vaNeedExt,
  input  [63:0]  io_enq_1_req_bits_gpaddr,
  input  [15:0]  io_enq_1_req_bits_mask,
  input          io_enq_1_req_bits_isvec,
  input  [7:0]   io_enq_1_req_bits_elemIdx,
  input  [2:0]   io_enq_1_req_bits_alignedType,
  input  [3:0]   io_enq_1_req_bits_mbIndex,
  input  [7:0]   io_enq_1_req_bits_elemIdxInsideVd,
  input  [15:0]  io_enq_1_req_bits_vecTriggerMask,
  output         io_enq_2_req_ready,
  input          io_enq_2_req_valid,
  input          io_enq_2_req_bits_uop_exceptionVec_3,
  input          io_enq_2_req_bits_uop_exceptionVec_5,
  input          io_enq_2_req_bits_uop_exceptionVec_13,
  input          io_enq_2_req_bits_uop_exceptionVec_19,
  input          io_enq_2_req_bits_uop_exceptionVec_21,
  input  [3:0]   io_enq_2_req_bits_uop_trigger,
  input          io_enq_2_req_bits_uop_preDecodeInfo_isRVC,
  input          io_enq_2_req_bits_uop_ftqPtr_flag,
  input  [2:0]   io_enq_2_req_bits_uop_ftqPtr_value,
  input  [3:0]   io_enq_2_req_bits_uop_ftqOffset,
  input  [8:0]   io_enq_2_req_bits_uop_fuOpType,
  input          io_enq_2_req_bits_uop_rfWen,
  input          io_enq_2_req_bits_uop_fpWen,
  input  [7:0]   io_enq_2_req_bits_uop_vpu_vstart,
  input  [1:0]   io_enq_2_req_bits_uop_vpu_veew,
  input  [6:0]   io_enq_2_req_bits_uop_uopIdx,
  input  [7:0]   io_enq_2_req_bits_uop_pdest,
  input          io_enq_2_req_bits_uop_robIdx_flag,
  input  [5:0]   io_enq_2_req_bits_uop_robIdx_value,
  input          io_enq_2_req_bits_uop_storeSetHit,
  input          io_enq_2_req_bits_uop_waitForRobIdx_flag,
  input  [5:0]   io_enq_2_req_bits_uop_waitForRobIdx_value,
  input          io_enq_2_req_bits_uop_loadWaitBit,
  input          io_enq_2_req_bits_uop_loadWaitStrict,
  input          io_enq_2_req_bits_uop_lqIdx_flag,
  input  [4:0]   io_enq_2_req_bits_uop_lqIdx_value,
  input          io_enq_2_req_bits_uop_sqIdx_flag,
  input  [4:0]   io_enq_2_req_bits_uop_sqIdx_value,
  input  [49:0]  io_enq_2_req_bits_vaddr,
  input  [63:0]  io_enq_2_req_bits_fullva,
  input          io_enq_2_req_bits_vaNeedExt,
  input  [63:0]  io_enq_2_req_bits_gpaddr,
  input  [15:0]  io_enq_2_req_bits_mask,
  input          io_enq_2_req_bits_isvec,
  input  [7:0]   io_enq_2_req_bits_elemIdx,
  input  [2:0]   io_enq_2_req_bits_alignedType,
  input  [3:0]   io_enq_2_req_bits_mbIndex,
  input  [7:0]   io_enq_2_req_bits_elemIdxInsideVd,
  input  [15:0]  io_enq_2_req_bits_vecTriggerMask,
  input          io_splitLoadReq_ready,
  output         io_splitLoadReq_valid,
  output         io_splitLoadReq_bits_uop_exceptionVec_3,
  output         io_splitLoadReq_bits_uop_exceptionVec_4,
  output         io_splitLoadReq_bits_uop_exceptionVec_5,
  output         io_splitLoadReq_bits_uop_exceptionVec_13,
  output         io_splitLoadReq_bits_uop_exceptionVec_19,
  output         io_splitLoadReq_bits_uop_exceptionVec_21,
  output [3:0]   io_splitLoadReq_bits_uop_trigger,
  output         io_splitLoadReq_bits_uop_preDecodeInfo_isRVC,
  output         io_splitLoadReq_bits_uop_ftqPtr_flag,
  output [2:0]   io_splitLoadReq_bits_uop_ftqPtr_value,
  output [3:0]   io_splitLoadReq_bits_uop_ftqOffset,
  output [8:0]   io_splitLoadReq_bits_uop_fuOpType,
  output         io_splitLoadReq_bits_uop_rfWen,
  output         io_splitLoadReq_bits_uop_fpWen,
  output [7:0]   io_splitLoadReq_bits_uop_vpu_vstart,
  output [1:0]   io_splitLoadReq_bits_uop_vpu_veew,
  output [6:0]   io_splitLoadReq_bits_uop_uopIdx,
  output [7:0]   io_splitLoadReq_bits_uop_pdest,
  output         io_splitLoadReq_bits_uop_robIdx_flag,
  output [5:0]   io_splitLoadReq_bits_uop_robIdx_value,
  output         io_splitLoadReq_bits_uop_storeSetHit,
  output         io_splitLoadReq_bits_uop_waitForRobIdx_flag,
  output [5:0]   io_splitLoadReq_bits_uop_waitForRobIdx_value,
  output         io_splitLoadReq_bits_uop_loadWaitBit,
  output         io_splitLoadReq_bits_uop_loadWaitStrict,
  output         io_splitLoadReq_bits_uop_lqIdx_flag,
  output [4:0]   io_splitLoadReq_bits_uop_lqIdx_value,
  output         io_splitLoadReq_bits_uop_sqIdx_flag,
  output [4:0]   io_splitLoadReq_bits_uop_sqIdx_value,
  output [49:0]  io_splitLoadReq_bits_vaddr,
  output [63:0]  io_splitLoadReq_bits_fullva,
  output [15:0]  io_splitLoadReq_bits_mask,
  output         io_splitLoadReq_bits_nc,
  output         io_splitLoadReq_bits_mmio,
  output         io_splitLoadReq_bits_memBackTypeMM,
  output         io_splitLoadReq_bits_isvec,
  output         io_splitLoadReq_bits_is128bit,
  output         io_splitLoadReq_bits_vecActive,
  output [1:0]   io_splitLoadReq_bits_mshrid,
  output [4:0]   io_splitLoadReq_bits_schedIndex,
  output         io_splitLoadReq_bits_isFinalSplit,
  output         io_splitLoadReq_bits_misalignNeedWakeUp,
  input          io_splitLoadResp_valid,
  input          io_splitLoadResp_bits_uop_exceptionVec_3,
  input          io_splitLoadResp_bits_uop_exceptionVec_4,
  input          io_splitLoadResp_bits_uop_exceptionVec_5,
  input          io_splitLoadResp_bits_uop_exceptionVec_13,
  input          io_splitLoadResp_bits_uop_exceptionVec_19,
  input          io_splitLoadResp_bits_uop_exceptionVec_21,
  input  [3:0]   io_splitLoadResp_bits_uop_trigger,
  input  [128:0] io_splitLoadResp_bits_data,
  input          io_splitLoadResp_bits_nc,
  input          io_splitLoadResp_bits_mmio,
  input          io_splitLoadResp_bits_memBackTypeMM,
  input          io_splitLoadResp_bits_vecActive,
  input          io_splitLoadResp_bits_misalignNeedWakeUp,
  input          io_splitLoadResp_bits_rep_info_cause_0,
  input          io_splitLoadResp_bits_rep_info_cause_1,
  input          io_splitLoadResp_bits_rep_info_cause_2,
  input          io_splitLoadResp_bits_rep_info_cause_3,
  input          io_splitLoadResp_bits_rep_info_cause_4,
  input          io_splitLoadResp_bits_rep_info_cause_5,
  input          io_splitLoadResp_bits_rep_info_cause_6,
  input          io_splitLoadResp_bits_rep_info_cause_7,
  input          io_splitLoadResp_bits_rep_info_cause_8,
  input          io_splitLoadResp_bits_rep_info_cause_9,
  input          io_splitLoadResp_bits_rep_info_cause_10,
  input          io_writeBack_ready,
  output         io_writeBack_valid,
  output         io_writeBack_bits_uop_exceptionVec_3,
  output         io_writeBack_bits_uop_exceptionVec_4,
  output         io_writeBack_bits_uop_exceptionVec_5,
  output         io_writeBack_bits_uop_exceptionVec_13,
  output         io_writeBack_bits_uop_exceptionVec_19,
  output         io_writeBack_bits_uop_exceptionVec_21,
  output [3:0]   io_writeBack_bits_uop_trigger,
  output         io_writeBack_bits_uop_rfWen,
  output         io_writeBack_bits_uop_fpWen,
  output [7:0]   io_writeBack_bits_uop_pdest,
  output         io_writeBack_bits_uop_robIdx_flag,
  output [5:0]   io_writeBack_bits_uop_robIdx_value,
  output [63:0]  io_writeBack_bits_data,
  output         io_writeBack_bits_debug_isMMIO,
  output         io_writeBack_bits_debug_isNCIO,
  output         io_vecWriteBack_valid,
  output [3:0]   io_vecWriteBack_bits_mBIndex,
  output         io_vecWriteBack_bits_exceptionVec_3,
  output         io_vecWriteBack_bits_exceptionVec_4,
  output         io_vecWriteBack_bits_exceptionVec_5,
  output         io_vecWriteBack_bits_exceptionVec_13,
  output         io_vecWriteBack_bits_exceptionVec_21,
  output         io_vecWriteBack_bits_hasException,
  output [63:0]  io_vecWriteBack_bits_vaddr,
  output         io_vecWriteBack_bits_vaNeedExt,
  output [63:0]  io_vecWriteBack_bits_gpaddr,
  output [7:0]   io_vecWriteBack_bits_vstart,
  output [15:0]  io_vecWriteBack_bits_vecTriggerMask,
  output [7:0]   io_vecWriteBack_bits_elemIdx,
  output [15:0]  io_vecWriteBack_bits_mask,
  output [2:0]   io_vecWriteBack_bits_alignedType,
  output [7:0]   io_vecWriteBack_bits_elemIdxInsideVd,
  output [127:0] io_vecWriteBack_bits_vecdata,
  input          io_loadOutValid,
  input          io_loadVecOutValid,
  output         io_loadMisalignFull
);

  reg              req_valid;
  reg              req_uop_exceptionVec_3;
  reg              req_uop_exceptionVec_5;
  reg              req_uop_exceptionVec_13;
  reg              req_uop_exceptionVec_19;
  reg              req_uop_exceptionVec_21;
  reg  [3:0]       req_uop_trigger;
  reg              req_uop_preDecodeInfo_isRVC;
  reg              req_uop_ftqPtr_flag;
  reg  [2:0]       req_uop_ftqPtr_value;
  reg  [3:0]       req_uop_ftqOffset;
  reg  [8:0]       req_uop_fuOpType;
  reg              req_uop_rfWen;
  reg              req_uop_fpWen;
  reg  [7:0]       req_uop_vpu_vstart;
  reg  [1:0]       req_uop_vpu_veew;
  reg  [6:0]       req_uop_uopIdx;
  reg  [7:0]       req_uop_pdest;
  reg              req_uop_robIdx_flag;
  reg  [5:0]       req_uop_robIdx_value;
  reg              req_uop_storeSetHit;
  reg              req_uop_waitForRobIdx_flag;
  reg  [5:0]       req_uop_waitForRobIdx_value;
  reg              req_uop_loadWaitBit;
  reg              req_uop_loadWaitStrict;
  reg              req_uop_lqIdx_flag;
  reg  [4:0]       req_uop_lqIdx_value;
  reg              req_uop_sqIdx_flag;
  reg  [4:0]       req_uop_sqIdx_value;
  reg  [49:0]      req_vaddr;
  reg  [63:0]      req_fullva;
  reg              req_vaNeedExt;
  reg  [63:0]      req_gpaddr;
  reg  [15:0]      req_mask;
  reg              req_isvec;
  reg  [7:0]       req_elemIdx;
  reg  [2:0]       req_alignedType;
  reg  [3:0]       req_mbIndex;
  reg  [7:0]       req_elemIdxInsideVd;
  reg  [15:0]      req_vecTriggerMask;
  wire             io_enq_0_req_ready_0 = ~req_valid & io_enq_0_req_valid;
  wire             io_enq_1_req_ready_0 =
    ~io_enq_0_req_ready_0 & ~req_valid & io_enq_1_req_valid;
  wire [8:0]       select_req_bit_uop_fuOpType =
    io_enq_0_req_valid
      ? io_enq_0_req_bits_uop_fuOpType
      : io_enq_1_req_valid
          ? io_enq_1_req_bits_uop_fuOpType
          : io_enq_2_req_bits_uop_fuOpType;
  wire             select_req_bit_uop_fpWen =
    io_enq_0_req_valid
      ? io_enq_0_req_bits_uop_fpWen
      : io_enq_1_req_valid ? io_enq_1_req_bits_uop_fpWen : io_enq_2_req_bits_uop_fpWen;
  wire             select_req_bit_uop_robIdx_flag =
    io_enq_0_req_valid
      ? io_enq_0_req_bits_uop_robIdx_flag
      : io_enq_1_req_valid
          ? io_enq_1_req_bits_uop_robIdx_flag
          : io_enq_2_req_bits_uop_robIdx_flag;
  wire [5:0]       select_req_bit_uop_robIdx_value =
    io_enq_0_req_valid
      ? io_enq_0_req_bits_uop_robIdx_value
      : io_enq_1_req_valid
          ? io_enq_1_req_bits_uop_robIdx_value
          : io_enq_2_req_bits_uop_robIdx_value;
  wire [6:0]       _flush_flushItself_T_2 =
    {io_redirect_bits_robIdx_flag, io_redirect_bits_robIdx_value};
  wire             canEnqValid =
    ~req_valid
    & ~(io_redirect_valid
        & (io_redirect_bits_level
           & {select_req_bit_uop_robIdx_flag,
              select_req_bit_uop_robIdx_value} == _flush_flushItself_T_2
           | select_req_bit_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
           ^ select_req_bit_uop_robIdx_value > io_redirect_bits_robIdx_value))
    & (io_enq_0_req_valid | io_enq_1_req_valid | io_enq_2_req_valid);
  reg  [2:0]       bufferState;
  reg              splitLoadReqs_0_uop_exceptionVec_3;
  reg              splitLoadReqs_0_uop_exceptionVec_4;
  reg              splitLoadReqs_0_uop_exceptionVec_5;
  reg              splitLoadReqs_0_uop_exceptionVec_13;
  reg              splitLoadReqs_0_uop_exceptionVec_19;
  reg              splitLoadReqs_0_uop_exceptionVec_21;
  reg  [3:0]       splitLoadReqs_0_uop_trigger;
  reg              splitLoadReqs_0_uop_preDecodeInfo_isRVC;
  reg              splitLoadReqs_0_uop_ftqPtr_flag;
  reg  [2:0]       splitLoadReqs_0_uop_ftqPtr_value;
  reg  [3:0]       splitLoadReqs_0_uop_ftqOffset;
  reg  [8:0]       splitLoadReqs_0_uop_fuOpType;
  reg              splitLoadReqs_0_uop_rfWen;
  reg              splitLoadReqs_0_uop_fpWen;
  reg  [7:0]       splitLoadReqs_0_uop_vpu_vstart;
  reg  [1:0]       splitLoadReqs_0_uop_vpu_veew;
  reg  [6:0]       splitLoadReqs_0_uop_uopIdx;
  reg  [7:0]       splitLoadReqs_0_uop_pdest;
  reg              splitLoadReqs_0_uop_robIdx_flag;
  reg  [5:0]       splitLoadReqs_0_uop_robIdx_value;
  reg              splitLoadReqs_0_uop_storeSetHit;
  reg              splitLoadReqs_0_uop_waitForRobIdx_flag;
  reg  [5:0]       splitLoadReqs_0_uop_waitForRobIdx_value;
  reg              splitLoadReqs_0_uop_loadWaitBit;
  reg              splitLoadReqs_0_uop_loadWaitStrict;
  reg              splitLoadReqs_0_uop_lqIdx_flag;
  reg  [4:0]       splitLoadReqs_0_uop_lqIdx_value;
  reg              splitLoadReqs_0_uop_sqIdx_flag;
  reg  [4:0]       splitLoadReqs_0_uop_sqIdx_value;
  reg  [49:0]      splitLoadReqs_0_vaddr;
  reg  [63:0]      splitLoadReqs_0_fullva;
  reg  [15:0]      splitLoadReqs_0_mask;
  reg              splitLoadReqs_0_nc;
  reg              splitLoadReqs_0_mmio;
  reg              splitLoadReqs_0_memBackTypeMM;
  reg              splitLoadReqs_0_is128bit;
  reg              splitLoadReqs_0_vecActive;
  reg  [1:0]       splitLoadReqs_0_mshrid;
  reg  [4:0]       splitLoadReqs_0_schedIndex;
  reg              splitLoadReqs_1_uop_exceptionVec_3;
  reg              splitLoadReqs_1_uop_exceptionVec_4;
  reg              splitLoadReqs_1_uop_exceptionVec_5;
  reg              splitLoadReqs_1_uop_exceptionVec_13;
  reg              splitLoadReqs_1_uop_exceptionVec_19;
  reg              splitLoadReqs_1_uop_exceptionVec_21;
  reg  [3:0]       splitLoadReqs_1_uop_trigger;
  reg              splitLoadReqs_1_uop_preDecodeInfo_isRVC;
  reg              splitLoadReqs_1_uop_ftqPtr_flag;
  reg  [2:0]       splitLoadReqs_1_uop_ftqPtr_value;
  reg  [3:0]       splitLoadReqs_1_uop_ftqOffset;
  reg  [8:0]       splitLoadReqs_1_uop_fuOpType;
  reg              splitLoadReqs_1_uop_rfWen;
  reg              splitLoadReqs_1_uop_fpWen;
  reg  [7:0]       splitLoadReqs_1_uop_vpu_vstart;
  reg  [1:0]       splitLoadReqs_1_uop_vpu_veew;
  reg  [6:0]       splitLoadReqs_1_uop_uopIdx;
  reg  [7:0]       splitLoadReqs_1_uop_pdest;
  reg              splitLoadReqs_1_uop_robIdx_flag;
  reg  [5:0]       splitLoadReqs_1_uop_robIdx_value;
  reg              splitLoadReqs_1_uop_storeSetHit;
  reg              splitLoadReqs_1_uop_waitForRobIdx_flag;
  reg  [5:0]       splitLoadReqs_1_uop_waitForRobIdx_value;
  reg              splitLoadReqs_1_uop_loadWaitBit;
  reg              splitLoadReqs_1_uop_loadWaitStrict;
  reg              splitLoadReqs_1_uop_lqIdx_flag;
  reg  [4:0]       splitLoadReqs_1_uop_lqIdx_value;
  reg              splitLoadReqs_1_uop_sqIdx_flag;
  reg  [4:0]       splitLoadReqs_1_uop_sqIdx_value;
  reg  [49:0]      splitLoadReqs_1_vaddr;
  reg  [63:0]      splitLoadReqs_1_fullva;
  reg  [15:0]      splitLoadReqs_1_mask;
  reg              splitLoadReqs_1_nc;
  reg              splitLoadReqs_1_mmio;
  reg              splitLoadReqs_1_memBackTypeMM;
  reg              splitLoadReqs_1_is128bit;
  reg              splitLoadReqs_1_vecActive;
  reg  [1:0]       splitLoadReqs_1_mshrid;
  reg  [4:0]       splitLoadReqs_1_schedIndex;
  reg  [128:0]     splitLoadResp_0_data;
  reg  [128:0]     splitLoadResp_1_data;
  reg              exceptionVec_3;
  reg              exceptionVec_4;
  reg              exceptionVec_5;
  reg              exceptionVec_13;
  reg              exceptionVec_19;
  reg              exceptionVec_21;
  reg  [1:0]       unSentLoads;
  reg              curPtr;
  reg  [8:0]       data_select;
  reg              globalException;
  reg              globalUncache;
  reg              globalMMIO;
  reg              globalNC;
  reg              globalMemBackTypeMM;
  wire             _GEN = bufferState == 3'h0;
  wire             _GEN_0 = bufferState == 3'h1;
  wire             _GEN_1 = bufferState == 3'h2;
  wire             _GEN_2 = bufferState == 3'h3;
  wire             _GEN_3 = bufferState == 3'h4;
  wire             needWakeUpReqsWire =
    ~(_GEN | _GEN_0 | _GEN_1 | _GEN_2) & _GEN_3 & ~req_isvec;
  wire [1:0]       alignedType = req_isvec ? req_alignedType[1:0] : req_uop_fuOpType[1:0];
  wire [4:0]       _highAddress_T_12 =
    5'({2'h0,
        {1'h0, {1'h0, alignedType == 2'h1} | {2{alignedType == 2'h2}}}
          | {3{&alignedType}}} + req_vaddr[4:0]);
  wire             cross16BytesBoundary =
    req_valid & _highAddress_T_12[4] != req_vaddr[4];
  reg  [2:0]       lowResultShift;
  reg  [2:0]       lowResultWidth;
  reg  [2:0]       highResultShift;
  reg  [2:0]       highResultWidth;
  wire [3:0][49:0] _GEN_4 = {{req_vaddr}, {req_vaddr}, {50'(req_vaddr - 50'h1)}, {50'h0}};
  wire [3:0][49:0] _GEN_5 =
    {{50'(req_vaddr + 50'h1)},
     {50'(req_vaddr + 50'h2)},
     {50'(req_vaddr + 50'h3)},
     {50'h0}};
  wire [7:0][49:0] _GEN_6 =
    {{req_vaddr},
     {req_vaddr},
     {50'(req_vaddr - 50'h1)},
     {req_vaddr},
     {50'(req_vaddr - 50'h3)},
     {50'(req_vaddr - 50'h2)},
     {50'(req_vaddr - 50'h1)},
     {50'h0}};
  wire [3:0][49:0] _GEN_7 =
    {{_GEN_6[req_vaddr[2:0]]}, {_GEN_4[req_vaddr[1:0]]}, {req_vaddr}, {50'h0}};
  wire             _GEN_8 = ~_GEN_0 | ~cross16BytesBoundary | alignedType == 2'h0;
  wire [49:0]      lowAddrLoad_vaddr = _GEN_8 ? 50'h0 : _GEN_7[alignedType];
  wire [7:0][49:0] _GEN_9 =
    {{50'(req_vaddr + 50'h1)},
     {50'(req_vaddr + 50'h2)},
     {50'(req_vaddr + 50'h3)},
     {50'(req_vaddr + 50'h4)},
     {50'(req_vaddr + 50'h5)},
     {50'(req_vaddr + 50'h6)},
     {50'(req_vaddr + 50'h7)},
     {50'h0}};
  wire [3:0][49:0] _GEN_10 =
    {{_GEN_9[req_vaddr[2:0]]},
     {_GEN_5[req_vaddr[1:0]]},
     {50'(req_vaddr + 50'h1)},
     {50'h0}};
  wire [49:0]      highAddrLoad_vaddr = _GEN_8 ? 50'h0 : _GEN_10[alignedType];
  wire             _io_splitLoadReq_valid_T_1 = bufferState == 3'h4;
  wire             io_splitLoadReq_valid_0 =
    req_valid
    & (bufferState == 3'h2 | _io_splitLoadReq_valid_T_1 & needWakeUpReqsWire
       & ~req_isvec);
  reg  [63:0]      combinedData;
  wire             _flushLdExpBuff_T = bufferState == 3'h5;
  wire             io_writeBack_valid_0 =
    req_valid & _flushLdExpBuff_T
    & (io_splitLoadResp_valid & io_splitLoadResp_bits_misalignNeedWakeUp | globalUncache
       | globalException) & ~io_loadOutValid & ~req_isvec;
  wire             _flushLdExpBuff_T_2 = globalUncache | globalException;
  wire             io_vecWriteBack_valid_0 =
    req_valid & _flushLdExpBuff_T & ~io_loadVecOutValid & req_isvec;
  wire             _GEN_11 = io_splitLoadReq_ready & io_splitLoadReq_valid_0;
  wire [1:0]       _GEN_12 = {1'h0, curPtr};
  wire [7:0][8:0]  _GEN_13 =
    {{9'h0}, {9'h1}, {9'h2}, {9'h2}, {9'h3}, {9'h3}, {9'h3}, {req_uop_fuOpType}};
  wire [3:0][8:0]  _GEN_14 = {{9'h0}, {9'h1}, {9'h2}, {req_uop_fuOpType}};
  wire [3:0][8:0]  _GEN_15 =
    {{_GEN_13[req_vaddr[2:0]]}, {_GEN_14[req_vaddr[1:0]]}, {9'h0}, {req_uop_fuOpType}};
  wire [16:0]      _lowAddrLoad_mask_T_19 = 17'h3 << lowAddrLoad_vaddr[3:0];
  wire [18:0]      _lowAddrLoad_mask_T_17 = 19'hF << lowAddrLoad_vaddr[3:0];
  wire [18:0]      _lowAddrLoad_mask_T_15 = 19'hF << lowAddrLoad_vaddr[3:0];
  wire [22:0]      _lowAddrLoad_mask_T_13 = 23'hFF << lowAddrLoad_vaddr[3:0];
  wire [22:0]      _lowAddrLoad_mask_T_11 = 23'hFF << lowAddrLoad_vaddr[3:0];
  wire [22:0]      _lowAddrLoad_mask_T_9 = 23'hFF << lowAddrLoad_vaddr[3:0];
  wire [7:0][15:0] _GEN_16 =
    {{16'h1 << lowAddrLoad_vaddr[3:0]},
     {_lowAddrLoad_mask_T_19[15:0]},
     {_lowAddrLoad_mask_T_17[15:0]},
     {_lowAddrLoad_mask_T_15[15:0]},
     {_lowAddrLoad_mask_T_13[15:0]},
     {_lowAddrLoad_mask_T_11[15:0]},
     {_lowAddrLoad_mask_T_9[15:0]},
     {16'h0}};
  wire [16:0]      _lowAddrLoad_mask_T_5 = 17'h3 << lowAddrLoad_vaddr[3:0];
  wire [18:0]      _lowAddrLoad_mask_T_3 = 19'hF << lowAddrLoad_vaddr[3:0];
  wire [3:0][15:0] _GEN_17 =
    {{16'h1 << lowAddrLoad_vaddr[3:0]},
     {_lowAddrLoad_mask_T_5[15:0]},
     {_lowAddrLoad_mask_T_3[15:0]},
     {16'h0}};
  wire [3:0][15:0] _GEN_18 =
    {{_GEN_16[req_vaddr[2:0]]},
     {_GEN_17[req_vaddr[1:0]]},
     {16'h1 << lowAddrLoad_vaddr[3:0]},
     {16'h0}};
  wire [7:0][8:0]  _GEN_19 =
    {{9'h3}, {9'h3}, {9'h3}, {9'h2}, {9'h2}, {9'h1}, {9'h0}, {req_uop_fuOpType}};
  wire [3:0][8:0]  _GEN_20 = {{9'h2}, {9'h1}, {9'h0}, {req_uop_fuOpType}};
  wire [3:0][8:0]  _GEN_21 =
    {{_GEN_19[req_vaddr[2:0]]}, {_GEN_20[req_vaddr[1:0]]}, {9'h0}, {req_uop_fuOpType}};
  wire [22:0]      _highAddrLoad_mask_T_21 = 23'hFF << highAddrLoad_vaddr[3:0];
  wire [22:0]      _highAddrLoad_mask_T_19 = 23'hFF << highAddrLoad_vaddr[3:0];
  wire [22:0]      _highAddrLoad_mask_T_17 = 23'hFF << highAddrLoad_vaddr[3:0];
  wire [18:0]      _highAddrLoad_mask_T_15 = 19'hF << highAddrLoad_vaddr[3:0];
  wire [18:0]      _highAddrLoad_mask_T_13 = 19'hF << highAddrLoad_vaddr[3:0];
  wire [16:0]      _highAddrLoad_mask_T_11 = 17'h3 << highAddrLoad_vaddr[3:0];
  wire [7:0][15:0] _GEN_22 =
    {{_highAddrLoad_mask_T_21[15:0]},
     {_highAddrLoad_mask_T_19[15:0]},
     {_highAddrLoad_mask_T_17[15:0]},
     {_highAddrLoad_mask_T_15[15:0]},
     {_highAddrLoad_mask_T_13[15:0]},
     {_highAddrLoad_mask_T_11[15:0]},
     {16'h1 << highAddrLoad_vaddr[3:0]},
     {16'h0}};
  wire [18:0]      _highAddrLoad_mask_T_7 = 19'hF << highAddrLoad_vaddr[3:0];
  wire [16:0]      _highAddrLoad_mask_T_5 = 17'h3 << highAddrLoad_vaddr[3:0];
  wire [3:0][15:0] _GEN_23 =
    {{_highAddrLoad_mask_T_7[15:0]},
     {_highAddrLoad_mask_T_5[15:0]},
     {16'h1 << highAddrLoad_vaddr[3:0]},
     {16'h0}};
  wire [3:0][15:0] _GEN_24 =
    {{_GEN_22[req_vaddr[2:0]]},
     {_GEN_23[req_vaddr[1:0]]},
     {16'h1 << highAddrLoad_vaddr[3:0]},
     {16'h0}};
  wire             _data_select_result_T_37 = select_req_bit_uop_fuOpType == 9'h2;
  wire             _data_select_result_T_42 = select_req_bit_uop_fuOpType == 9'h1;
  wire [7:0][2:0]  _GEN_25 =
    {{3'h0}, {3'h0}, {3'h1}, {3'h0}, {3'h3}, {3'h2}, {3'h1}, {lowResultShift}};
  wire [3:0][2:0]  _GEN_26 = {{3'h0}, {3'h0}, {3'h1}, {lowResultShift}};
  wire [3:0][2:0]  _GEN_27 =
    {{_GEN_25[req_vaddr[2:0]]}, {_GEN_26[req_vaddr[1:0]]}, {3'h0}, {lowResultShift}};
  wire [7:0][2:0]  _GEN_28 =
    {{3'h1}, {3'h2}, {3'h3}, {3'h4}, {3'h5}, {3'h6}, {3'h7}, {lowResultWidth}};
  wire [3:0][2:0]  _GEN_29 = {{3'h1}, {3'h2}, {3'h3}, {lowResultWidth}};
  wire [3:0][2:0]  _GEN_30 =
    {{_GEN_28[req_vaddr[2:0]]}, {_GEN_29[req_vaddr[1:0]]}, {3'h1}, {lowResultWidth}};
  wire [7:0][2:0]  _GEN_31 =
    {{3'h0}, {3'h0}, {3'h0}, {3'h0}, {3'h0}, {3'h0}, {3'h0}, {highResultShift}};
  wire [3:0][2:0]  _GEN_32 = {{3'h0}, {3'h0}, {3'h0}, {highResultShift}};
  wire [3:0][2:0]  _GEN_33 =
    {{_GEN_31[req_vaddr[2:0]]}, {_GEN_32[req_vaddr[1:0]]}, {3'h0}, {highResultShift}};
  wire [7:0][2:0]  _GEN_34 =
    {{3'h7}, {3'h6}, {3'h5}, {3'h4}, {3'h3}, {3'h2}, {3'h1}, {highResultWidth}};
  wire [3:0][2:0]  _GEN_35 = {{3'h3}, {3'h2}, {3'h1}, {highResultWidth}};
  wire [3:0][2:0]  _GEN_36 =
    {{_GEN_34[req_vaddr[2:0]]}, {_GEN_35[req_vaddr[1:0]]}, {3'h1}, {highResultWidth}};
  wire [55:0]      _GEN_37 =
    (lowResultShift == 3'h0 ? splitLoadResp_0_data[55:0] : 56'h0)
    | (lowResultShift == 3'h1 ? splitLoadResp_0_data[63:8] : 56'h0);
  wire [47:0]      _GEN_38 =
    _GEN_37[47:0] | (lowResultShift == 3'h2 ? splitLoadResp_0_data[63:16] : 48'h0);
  wire [39:0]      _GEN_39 =
    _GEN_38[39:0] | (lowResultShift == 3'h3 ? splitLoadResp_0_data[63:24] : 40'h0);
  wire [31:0]      _GEN_40 =
    _GEN_39[31:0] | (lowResultShift == 3'h4 ? splitLoadResp_0_data[63:32] : 32'h0);
  wire [23:0]      _GEN_41 =
    _GEN_40[23:0] | (lowResultShift == 3'h5 ? splitLoadResp_0_data[63:40] : 24'h0);
  wire [15:0]      _GEN_42 =
    _GEN_41[15:0] | (lowResultShift == 3'h6 ? splitLoadResp_0_data[63:48] : 16'h0);
  wire [7:0]       _lowAddrResult_truncateData_T =
    _GEN_42[7:0] | ((&lowResultShift) ? splitLoadResp_0_data[63:56] : 8'h0);
  wire [55:0]      _GEN_43 =
    {8'h0,
     {8'h0,
      {8'h0,
       {8'h0,
        {8'h0,
         {8'h0, lowResultWidth == 3'h1 ? _lowAddrResult_truncateData_T : 8'h0}
           | (lowResultWidth == 3'h2
                ? {_GEN_42[15:8], _lowAddrResult_truncateData_T}
                : 16'h0)}
          | (lowResultWidth == 3'h3
               ? {_GEN_41[23:16], _GEN_42[15:8], _lowAddrResult_truncateData_T}
               : 24'h0)}
         | (lowResultWidth == 3'h4
              ? {_GEN_40[31:24],
                 _GEN_41[23:16],
                 _GEN_42[15:8],
                 _lowAddrResult_truncateData_T}
              : 32'h0)}
        | (lowResultWidth == 3'h5
             ? {_GEN_39[39:32],
                _GEN_40[31:24],
                _GEN_41[23:16],
                _GEN_42[15:8],
                _lowAddrResult_truncateData_T}
             : 40'h0)}
       | (lowResultWidth == 3'h6
            ? {_GEN_38[47:40],
               _GEN_39[39:32],
               _GEN_40[31:24],
               _GEN_41[23:16],
               _GEN_42[15:8],
               _lowAddrResult_truncateData_T}
            : 48'h0)}
    | ((&lowResultWidth)
         ? {_GEN_37[55:48],
            _GEN_38[47:40],
            _GEN_39[39:32],
            _GEN_40[31:24],
            _GEN_41[23:16],
            _GEN_42[15:8],
            _lowAddrResult_truncateData_T}
         : 56'h0);
  wire [55:0]      _GEN_44 =
    (highResultShift == 3'h0 ? splitLoadResp_1_data[55:0] : 56'h0)
    | (highResultShift == 3'h1 ? splitLoadResp_1_data[63:8] : 56'h0);
  wire [47:0]      _GEN_45 =
    _GEN_44[47:0] | (highResultShift == 3'h2 ? splitLoadResp_1_data[63:16] : 48'h0);
  wire [39:0]      _GEN_46 =
    _GEN_45[39:0] | (highResultShift == 3'h3 ? splitLoadResp_1_data[63:24] : 40'h0);
  wire [31:0]      _GEN_47 =
    _GEN_46[31:0] | (highResultShift == 3'h4 ? splitLoadResp_1_data[63:32] : 32'h0);
  wire [23:0]      _GEN_48 =
    _GEN_47[23:0] | (highResultShift == 3'h5 ? splitLoadResp_1_data[63:40] : 24'h0);
  wire [15:0]      _GEN_49 =
    _GEN_48[15:0] | (highResultShift == 3'h6 ? splitLoadResp_1_data[63:48] : 16'h0);
  wire [7:0]       _highAddrResult_truncateData_T =
    _GEN_49[7:0] | ((&highResultShift) ? splitLoadResp_1_data[63:56] : 8'h0);
  wire [55:0]      _GEN_50 =
    {8'h0,
     {8'h0,
      {8'h0,
       {8'h0,
        {8'h0,
         {8'h0, highResultWidth == 3'h1 ? _highAddrResult_truncateData_T : 8'h0}
           | (highResultWidth == 3'h2
                ? {_GEN_49[15:8], _highAddrResult_truncateData_T}
                : 16'h0)}
          | (highResultWidth == 3'h3
               ? {_GEN_48[23:16], _GEN_49[15:8], _highAddrResult_truncateData_T}
               : 24'h0)}
         | (highResultWidth == 3'h4
              ? {_GEN_47[31:24],
                 _GEN_48[23:16],
                 _GEN_49[15:8],
                 _highAddrResult_truncateData_T}
              : 32'h0)}
        | (highResultWidth == 3'h5
             ? {_GEN_46[39:32],
                _GEN_47[31:24],
                _GEN_48[23:16],
                _GEN_49[15:8],
                _highAddrResult_truncateData_T}
             : 40'h0)}
       | (highResultWidth == 3'h6
            ? {_GEN_45[47:40],
               _GEN_46[39:32],
               _GEN_47[31:24],
               _GEN_48[23:16],
               _GEN_49[15:8],
               _highAddrResult_truncateData_T}
            : 48'h0)}
    | ((&highResultWidth)
         ? {_GEN_44[55:48],
            _GEN_45[47:40],
            _GEN_46[39:32],
            _GEN_47[31:24],
            _GEN_48[23:16],
            _GEN_49[15:8],
            _highAddrResult_truncateData_T}
         : 56'h0);
  wire [7:0][7:0]  _GEN_51 =
    {{8'h0},
     {_GEN_50[55:48]},
     {_GEN_50[47:40]},
     {_GEN_50[39:32]},
     {_GEN_50[31:24]},
     {_GEN_50[23:16]},
     {_GEN_50[15:8]},
     {_GEN_50[7:0]}};
  wire [7:0]       catResult_0 =
    (|lowResultWidth) ? _GEN_43[7:0] : _GEN_51[3'(3'h0 - lowResultWidth)];
  wire [7:0]       catResult_1 =
    (|(lowResultWidth[2:1])) ? _GEN_43[15:8] : _GEN_51[3'(3'h1 - lowResultWidth)];
  wire [7:0]       catResult_2 =
    lowResultWidth > 3'h2 ? _GEN_43[23:16] : _GEN_51[3'(3'h2 - lowResultWidth)];
  wire [7:0]       catResult_3 =
    lowResultWidth[2] ? _GEN_43[31:24] : _GEN_51[3'(3'h3 - lowResultWidth)];
  wire [7:0]       catResult_4 =
    lowResultWidth > 3'h4 ? _GEN_43[39:32] : _GEN_51[3'(3'h4 - lowResultWidth)];
  wire [7:0]       catResult_5 =
    lowResultWidth > 3'h5 ? _GEN_43[47:40] : _GEN_51[3'(3'h5 - lowResultWidth)];
  wire [7:0]       catResult_6 =
    (&lowResultWidth) ? _GEN_43[55:48] : _GEN_51[3'(3'h6 - lowResultWidth)];
  wire [7:0]       catResult_7 = _GEN_51[3'(3'h7 - lowResultWidth)];
  wire [63:0]      _combinedData_T_80 =
    {catResult_7,
     catResult_6,
     catResult_5,
     catResult_4,
     catResult_3,
     catResult_2,
     catResult_1,
     catResult_0};
  wire             _GEN_52 = canEnqValid | req_valid;
  wire             hasException =
    io_splitLoadResp_bits_vecActive
    & (|{io_splitLoadResp_bits_uop_exceptionVec_21,
         io_splitLoadResp_bits_uop_exceptionVec_19,
         io_splitLoadResp_bits_uop_exceptionVec_13,
         io_splitLoadResp_bits_uop_exceptionVec_5,
         io_splitLoadResp_bits_uop_exceptionVec_4,
         io_splitLoadResp_bits_uop_exceptionVec_3})
    | io_splitLoadResp_bits_uop_trigger == 4'h1;
  wire             isUncache = io_splitLoadResp_bits_mmio | io_splitLoadResp_bits_nc;
  wire             _GEN_53 = hasException | isUncache;
  wire             _GEN_54 = io_splitLoadResp_valid & _GEN_53;
  wire [10:0]      _GEN_55 =
    {io_splitLoadResp_bits_rep_info_cause_10,
     io_splitLoadResp_bits_rep_info_cause_9,
     io_splitLoadResp_bits_rep_info_cause_8,
     io_splitLoadResp_bits_rep_info_cause_7,
     io_splitLoadResp_bits_rep_info_cause_6,
     io_splitLoadResp_bits_rep_info_cause_5,
     io_splitLoadResp_bits_rep_info_cause_4,
     io_splitLoadResp_bits_rep_info_cause_3,
     io_splitLoadResp_bits_rep_info_cause_2,
     io_splitLoadResp_bits_rep_info_cause_1,
     io_splitLoadResp_bits_rep_info_cause_0};
  wire             _GEN_56 = bufferState == 3'h5;
  wire             _GEN_57 = io_writeBack_ready & io_writeBack_valid_0;
  wire             _GEN_58 = _GEN | _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3;
  wire             _GEN_59 = _GEN_58 | ~_GEN_56;
  wire             _GEN_60 = _GEN_3 | ~_GEN_56;
  wire             _GEN_61 = _GEN | _GEN_0 | _GEN_1;
  wire             _GEN_62 = _GEN_0 & cross16BytesBoundary;
  wire             _GEN_63 = ~_GEN_0 | ~cross16BytesBoundary;
  wire             lowAddrLoad_uop_exceptionVec_3 =
    _GEN_0 & cross16BytesBoundary & req_uop_exceptionVec_3;
  wire             lowAddrLoad_uop_exceptionVec_5 =
    _GEN_0 & cross16BytesBoundary & req_uop_exceptionVec_5;
  wire             lowAddrLoad_uop_exceptionVec_13 =
    _GEN_0 & cross16BytesBoundary & req_uop_exceptionVec_13;
  wire             lowAddrLoad_uop_exceptionVec_19 =
    _GEN_0 & cross16BytesBoundary & req_uop_exceptionVec_19;
  wire             lowAddrLoad_uop_exceptionVec_21 =
    _GEN_0 & cross16BytesBoundary & req_uop_exceptionVec_21;
  wire [3:0]       lowAddrLoad_uop_trigger = _GEN_62 ? req_uop_trigger : 4'h0;
  wire             lowAddrLoad_uop_preDecodeInfo_isRVC =
    _GEN_0 & cross16BytesBoundary & req_uop_preDecodeInfo_isRVC;
  wire             lowAddrLoad_uop_ftqPtr_flag =
    _GEN_0 & cross16BytesBoundary & req_uop_ftqPtr_flag;
  wire [2:0]       lowAddrLoad_uop_ftqPtr_value = _GEN_62 ? req_uop_ftqPtr_value : 3'h0;
  wire [3:0]       lowAddrLoad_uop_ftqOffset = _GEN_62 ? req_uop_ftqOffset : 4'h0;
  wire             lowAddrLoad_uop_rfWen = _GEN_0 & cross16BytesBoundary & req_uop_rfWen;
  wire             lowAddrLoad_uop_fpWen = _GEN_0 & cross16BytesBoundary & req_uop_fpWen;
  wire [7:0]       lowAddrLoad_uop_vpu_vstart = _GEN_62 ? req_uop_vpu_vstart : 8'h0;
  wire [1:0]       lowAddrLoad_uop_vpu_veew = _GEN_62 ? req_uop_vpu_veew : 2'h0;
  wire [6:0]       lowAddrLoad_uop_uopIdx = _GEN_62 ? req_uop_uopIdx : 7'h0;
  wire [7:0]       lowAddrLoad_uop_pdest = _GEN_62 ? req_uop_pdest : 8'h0;
  wire             lowAddrLoad_uop_robIdx_flag =
    _GEN_0 & cross16BytesBoundary & req_uop_robIdx_flag;
  wire [5:0]       lowAddrLoad_uop_robIdx_value = _GEN_62 ? req_uop_robIdx_value : 6'h0;
  wire             lowAddrLoad_uop_storeSetHit =
    _GEN_0 & cross16BytesBoundary & req_uop_storeSetHit;
  wire             lowAddrLoad_uop_waitForRobIdx_flag =
    _GEN_0 & cross16BytesBoundary & req_uop_waitForRobIdx_flag;
  wire [5:0]       lowAddrLoad_uop_waitForRobIdx_value =
    _GEN_62 ? req_uop_waitForRobIdx_value : 6'h0;
  wire             lowAddrLoad_uop_loadWaitBit =
    _GEN_0 & cross16BytesBoundary & req_uop_loadWaitBit;
  wire             lowAddrLoad_uop_loadWaitStrict =
    _GEN_0 & cross16BytesBoundary & req_uop_loadWaitStrict;
  wire             lowAddrLoad_uop_lqIdx_flag =
    _GEN_0 & cross16BytesBoundary & req_uop_lqIdx_flag;
  wire [4:0]       lowAddrLoad_uop_lqIdx_value = _GEN_62 ? req_uop_lqIdx_value : 5'h0;
  wire             lowAddrLoad_uop_sqIdx_flag =
    _GEN_0 & cross16BytesBoundary & req_uop_sqIdx_flag;
  wire [4:0]       lowAddrLoad_uop_sqIdx_value = _GEN_62 ? req_uop_sqIdx_value : 5'h0;
  wire [63:0]      lowAddrLoad_fullva = _GEN_62 ? req_fullva : 64'h0;
  wire             _GEN_64 = _GEN_55 == 11'h0;
  wire             _GEN_65 = isUncache | hasException;
  wire             flush =
    req_valid & io_redirect_valid
    & (io_redirect_bits_level
       & {req_uop_robIdx_flag, req_uop_robIdx_value} == _flush_flushItself_T_2
       | req_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
       ^ req_uop_robIdx_value > io_redirect_bits_robIdx_value);
  wire             _GEN_66 = _GEN_56 & (req_isvec ? io_vecWriteBack_valid_0 : _GEN_57);
  wire [2:0]       _GEN_67 = _GEN_66 ? 3'h0 : bufferState;
  wire             _GEN_68 = _GEN_58 | ~_GEN_66;
  wire [7:0][2:0]  _GEN_69 =
    {{_GEN_67},
     {_GEN_67},
     {_GEN_67},
     {req_isvec ? 3'h5 : {2'h2, _GEN_11}},
     {io_splitLoadResp_valid
        ? (_GEN_53
             ? 3'h5
             : (|_GEN_55) | (|(unSentLoads & ~(2'h1 << _GEN_12))) ? 3'h2 : 3'h4)
        : bufferState},
     {_GEN_11 ? 3'h3 : bufferState},
     {3'h2},
     {req_valid ? 3'h1 : bufferState}};
  wire             _GEN_70 = _GEN_64 | _GEN_0;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      req_valid <= 1'h0;
      bufferState <= 3'h0;
      splitLoadReqs_0_uop_exceptionVec_3 <= 1'h0;
      splitLoadReqs_0_uop_exceptionVec_4 <= 1'h0;
      splitLoadReqs_0_uop_exceptionVec_5 <= 1'h0;
      splitLoadReqs_0_uop_exceptionVec_13 <= 1'h0;
      splitLoadReqs_0_uop_exceptionVec_19 <= 1'h0;
      splitLoadReqs_0_uop_exceptionVec_21 <= 1'h0;
      splitLoadReqs_0_uop_trigger <= 4'h0;
      splitLoadReqs_0_uop_preDecodeInfo_isRVC <= 1'h0;
      splitLoadReqs_0_uop_ftqPtr_flag <= 1'h0;
      splitLoadReqs_0_uop_ftqPtr_value <= 3'h0;
      splitLoadReqs_0_uop_ftqOffset <= 4'h0;
      splitLoadReqs_0_uop_fuOpType <= 9'h0;
      splitLoadReqs_0_uop_rfWen <= 1'h0;
      splitLoadReqs_0_uop_fpWen <= 1'h0;
      splitLoadReqs_0_uop_vpu_vstart <= 8'h0;
      splitLoadReqs_0_uop_vpu_veew <= 2'h0;
      splitLoadReqs_0_uop_uopIdx <= 7'h0;
      splitLoadReqs_0_uop_pdest <= 8'h0;
      splitLoadReqs_0_uop_robIdx_flag <= 1'h0;
      splitLoadReqs_0_uop_robIdx_value <= 6'h0;
      splitLoadReqs_0_uop_storeSetHit <= 1'h0;
      splitLoadReqs_0_uop_waitForRobIdx_flag <= 1'h0;
      splitLoadReqs_0_uop_waitForRobIdx_value <= 6'h0;
      splitLoadReqs_0_uop_loadWaitBit <= 1'h0;
      splitLoadReqs_0_uop_loadWaitStrict <= 1'h0;
      splitLoadReqs_0_uop_lqIdx_flag <= 1'h0;
      splitLoadReqs_0_uop_lqIdx_value <= 5'h0;
      splitLoadReqs_0_uop_sqIdx_flag <= 1'h0;
      splitLoadReqs_0_uop_sqIdx_value <= 5'h0;
      splitLoadReqs_0_vaddr <= 50'h0;
      splitLoadReqs_0_fullva <= 64'h0;
      splitLoadReqs_0_mask <= 16'h0;
      splitLoadReqs_0_nc <= 1'h0;
      splitLoadReqs_0_mmio <= 1'h0;
      splitLoadReqs_0_memBackTypeMM <= 1'h0;
      splitLoadReqs_0_is128bit <= 1'h0;
      splitLoadReqs_0_vecActive <= 1'h0;
      splitLoadReqs_0_mshrid <= 2'h0;
      splitLoadReqs_0_schedIndex <= 5'h0;
      splitLoadReqs_1_uop_exceptionVec_3 <= 1'h0;
      splitLoadReqs_1_uop_exceptionVec_4 <= 1'h0;
      splitLoadReqs_1_uop_exceptionVec_5 <= 1'h0;
      splitLoadReqs_1_uop_exceptionVec_13 <= 1'h0;
      splitLoadReqs_1_uop_exceptionVec_19 <= 1'h0;
      splitLoadReqs_1_uop_exceptionVec_21 <= 1'h0;
      splitLoadReqs_1_uop_trigger <= 4'h0;
      splitLoadReqs_1_uop_preDecodeInfo_isRVC <= 1'h0;
      splitLoadReqs_1_uop_ftqPtr_flag <= 1'h0;
      splitLoadReqs_1_uop_ftqPtr_value <= 3'h0;
      splitLoadReqs_1_uop_ftqOffset <= 4'h0;
      splitLoadReqs_1_uop_fuOpType <= 9'h0;
      splitLoadReqs_1_uop_rfWen <= 1'h0;
      splitLoadReqs_1_uop_fpWen <= 1'h0;
      splitLoadReqs_1_uop_vpu_vstart <= 8'h0;
      splitLoadReqs_1_uop_vpu_veew <= 2'h0;
      splitLoadReqs_1_uop_uopIdx <= 7'h0;
      splitLoadReqs_1_uop_pdest <= 8'h0;
      splitLoadReqs_1_uop_robIdx_flag <= 1'h0;
      splitLoadReqs_1_uop_robIdx_value <= 6'h0;
      splitLoadReqs_1_uop_storeSetHit <= 1'h0;
      splitLoadReqs_1_uop_waitForRobIdx_flag <= 1'h0;
      splitLoadReqs_1_uop_waitForRobIdx_value <= 6'h0;
      splitLoadReqs_1_uop_loadWaitBit <= 1'h0;
      splitLoadReqs_1_uop_loadWaitStrict <= 1'h0;
      splitLoadReqs_1_uop_lqIdx_flag <= 1'h0;
      splitLoadReqs_1_uop_lqIdx_value <= 5'h0;
      splitLoadReqs_1_uop_sqIdx_flag <= 1'h0;
      splitLoadReqs_1_uop_sqIdx_value <= 5'h0;
      splitLoadReqs_1_vaddr <= 50'h0;
      splitLoadReqs_1_fullva <= 64'h0;
      splitLoadReqs_1_mask <= 16'h0;
      splitLoadReqs_1_nc <= 1'h0;
      splitLoadReqs_1_mmio <= 1'h0;
      splitLoadReqs_1_memBackTypeMM <= 1'h0;
      splitLoadReqs_1_is128bit <= 1'h0;
      splitLoadReqs_1_vecActive <= 1'h0;
      splitLoadReqs_1_mshrid <= 2'h0;
      splitLoadReqs_1_schedIndex <= 5'h0;
      splitLoadResp_0_data <= 129'h0;
      splitLoadResp_1_data <= 129'h0;
      exceptionVec_3 <= 1'h0;
      exceptionVec_4 <= 1'h0;
      exceptionVec_5 <= 1'h0;
      exceptionVec_13 <= 1'h0;
      exceptionVec_19 <= 1'h0;
      exceptionVec_21 <= 1'h0;
      unSentLoads <= 2'h0;
      curPtr <= 1'h0;
      data_select <= 9'h0;
      globalException <= 1'h0;
      globalUncache <= 1'h0;
      globalMMIO <= 1'h0;
      globalNC <= 1'h0;
      globalMemBackTypeMM <= 1'h0;
      lowResultShift <= 3'h0;
      lowResultWidth <= 3'h0;
      highResultShift <= 3'h0;
      highResultWidth <= 3'h0;
      combinedData <= 64'h0;
    end
    else begin
      req_valid <=
        ~flush
        & (_GEN_59
             ? _GEN_52
             : req_isvec ? ~io_vecWriteBack_valid_0 & _GEN_52 : ~_GEN_57 & _GEN_52);
      if (flush) begin
        bufferState <= 3'h0;
        unSentLoads <= 2'h0;
      end
      else begin
        bufferState <= _GEN_69[bufferState];
        if (io_splitLoadResp_valid) begin
          if (_GEN_65)
            unSentLoads <= 2'h0;
          else if (_GEN_64)
            unSentLoads <= unSentLoads & ~(2'h1 << _GEN_12);
          else if (_GEN_62)
            unSentLoads <= 2'h3;
          else if (_GEN_68) begin
          end
          else
            unSentLoads <= 2'h0;
        end
        else if (_GEN_62)
          unSentLoads <= 2'h3;
        else if (_GEN_68) begin
        end
        else
          unSentLoads <= 2'h0;
      end
      if (_GEN_62)
        splitLoadReqs_0_uop_exceptionVec_3 <= lowAddrLoad_uop_exceptionVec_3;
      splitLoadReqs_0_uop_exceptionVec_4 <= _GEN_63 & splitLoadReqs_0_uop_exceptionVec_4;
      if (_GEN_62) begin
        splitLoadReqs_0_uop_exceptionVec_5 <= lowAddrLoad_uop_exceptionVec_5;
        splitLoadReqs_0_uop_exceptionVec_13 <= lowAddrLoad_uop_exceptionVec_13;
        splitLoadReqs_0_uop_exceptionVec_19 <= lowAddrLoad_uop_exceptionVec_19;
        splitLoadReqs_0_uop_exceptionVec_21 <= lowAddrLoad_uop_exceptionVec_21;
        splitLoadReqs_0_uop_trigger <= lowAddrLoad_uop_trigger;
        splitLoadReqs_0_uop_preDecodeInfo_isRVC <= lowAddrLoad_uop_preDecodeInfo_isRVC;
        splitLoadReqs_0_uop_ftqPtr_flag <= lowAddrLoad_uop_ftqPtr_flag;
        splitLoadReqs_0_uop_ftqPtr_value <= lowAddrLoad_uop_ftqPtr_value;
        splitLoadReqs_0_uop_ftqOffset <= lowAddrLoad_uop_ftqOffset;
        splitLoadReqs_0_uop_fuOpType <= _GEN_62 ? _GEN_15[alignedType] : 9'h0;
        splitLoadReqs_0_uop_rfWen <= lowAddrLoad_uop_rfWen;
        splitLoadReqs_0_uop_fpWen <= lowAddrLoad_uop_fpWen;
        splitLoadReqs_0_uop_vpu_vstart <= lowAddrLoad_uop_vpu_vstart;
        splitLoadReqs_0_uop_vpu_veew <= lowAddrLoad_uop_vpu_veew;
        splitLoadReqs_0_uop_uopIdx <= lowAddrLoad_uop_uopIdx;
        splitLoadReqs_0_uop_pdest <= lowAddrLoad_uop_pdest;
        splitLoadReqs_0_uop_robIdx_flag <= lowAddrLoad_uop_robIdx_flag;
        splitLoadReqs_0_uop_robIdx_value <= lowAddrLoad_uop_robIdx_value;
        splitLoadReqs_0_uop_storeSetHit <= lowAddrLoad_uop_storeSetHit;
        splitLoadReqs_0_uop_waitForRobIdx_flag <= lowAddrLoad_uop_waitForRobIdx_flag;
        splitLoadReqs_0_uop_waitForRobIdx_value <= lowAddrLoad_uop_waitForRobIdx_value;
        splitLoadReqs_0_uop_loadWaitBit <= lowAddrLoad_uop_loadWaitBit;
        splitLoadReqs_0_uop_loadWaitStrict <= lowAddrLoad_uop_loadWaitStrict;
        splitLoadReqs_0_uop_lqIdx_flag <= lowAddrLoad_uop_lqIdx_flag;
        splitLoadReqs_0_uop_lqIdx_value <= lowAddrLoad_uop_lqIdx_value;
        splitLoadReqs_0_uop_sqIdx_flag <= lowAddrLoad_uop_sqIdx_flag;
        splitLoadReqs_0_uop_sqIdx_value <= lowAddrLoad_uop_sqIdx_value;
        splitLoadReqs_0_vaddr <= lowAddrLoad_vaddr;
        splitLoadReqs_0_fullva <= lowAddrLoad_fullva;
        splitLoadReqs_0_mask <= _GEN_8 ? 16'h0 : _GEN_18[alignedType];
      end
      splitLoadReqs_0_nc <= _GEN_63 & splitLoadReqs_0_nc;
      splitLoadReqs_0_mmio <= _GEN_63 & splitLoadReqs_0_mmio;
      splitLoadReqs_0_memBackTypeMM <= _GEN_63 & splitLoadReqs_0_memBackTypeMM;
      splitLoadReqs_0_is128bit <= _GEN_63 & splitLoadReqs_0_is128bit;
      splitLoadReqs_0_vecActive <= _GEN_63 & splitLoadReqs_0_vecActive;
      if (_GEN_62) begin
        splitLoadReqs_0_mshrid <= 2'h0;
        splitLoadReqs_0_schedIndex <= 5'h0;
        splitLoadReqs_1_uop_exceptionVec_3 <= lowAddrLoad_uop_exceptionVec_3;
      end
      splitLoadReqs_1_uop_exceptionVec_4 <= _GEN_63 & splitLoadReqs_1_uop_exceptionVec_4;
      if (_GEN_62) begin
        splitLoadReqs_1_uop_exceptionVec_5 <= lowAddrLoad_uop_exceptionVec_5;
        splitLoadReqs_1_uop_exceptionVec_13 <= lowAddrLoad_uop_exceptionVec_13;
        splitLoadReqs_1_uop_exceptionVec_19 <= lowAddrLoad_uop_exceptionVec_19;
        splitLoadReqs_1_uop_exceptionVec_21 <= lowAddrLoad_uop_exceptionVec_21;
        splitLoadReqs_1_uop_trigger <= lowAddrLoad_uop_trigger;
        splitLoadReqs_1_uop_preDecodeInfo_isRVC <= lowAddrLoad_uop_preDecodeInfo_isRVC;
        splitLoadReqs_1_uop_ftqPtr_flag <= lowAddrLoad_uop_ftqPtr_flag;
        splitLoadReqs_1_uop_ftqPtr_value <= lowAddrLoad_uop_ftqPtr_value;
        splitLoadReqs_1_uop_ftqOffset <= lowAddrLoad_uop_ftqOffset;
        splitLoadReqs_1_uop_fuOpType <= _GEN_62 ? _GEN_21[alignedType] : 9'h0;
        splitLoadReqs_1_uop_rfWen <= lowAddrLoad_uop_rfWen;
        splitLoadReqs_1_uop_fpWen <= lowAddrLoad_uop_fpWen;
        splitLoadReqs_1_uop_vpu_vstart <= lowAddrLoad_uop_vpu_vstart;
        splitLoadReqs_1_uop_vpu_veew <= lowAddrLoad_uop_vpu_veew;
        splitLoadReqs_1_uop_uopIdx <= lowAddrLoad_uop_uopIdx;
        splitLoadReqs_1_uop_pdest <= lowAddrLoad_uop_pdest;
        splitLoadReqs_1_uop_robIdx_flag <= lowAddrLoad_uop_robIdx_flag;
        splitLoadReqs_1_uop_robIdx_value <= lowAddrLoad_uop_robIdx_value;
        splitLoadReqs_1_uop_storeSetHit <= lowAddrLoad_uop_storeSetHit;
        splitLoadReqs_1_uop_waitForRobIdx_flag <= lowAddrLoad_uop_waitForRobIdx_flag;
        splitLoadReqs_1_uop_waitForRobIdx_value <= lowAddrLoad_uop_waitForRobIdx_value;
        splitLoadReqs_1_uop_loadWaitBit <= lowAddrLoad_uop_loadWaitBit;
        splitLoadReqs_1_uop_loadWaitStrict <= lowAddrLoad_uop_loadWaitStrict;
        splitLoadReqs_1_uop_lqIdx_flag <= lowAddrLoad_uop_lqIdx_flag;
        splitLoadReqs_1_uop_lqIdx_value <= lowAddrLoad_uop_lqIdx_value;
        splitLoadReqs_1_uop_sqIdx_flag <= lowAddrLoad_uop_sqIdx_flag;
        splitLoadReqs_1_uop_sqIdx_value <= lowAddrLoad_uop_sqIdx_value;
        splitLoadReqs_1_vaddr <= highAddrLoad_vaddr;
        splitLoadReqs_1_fullva <= lowAddrLoad_fullva;
        splitLoadReqs_1_mask <= _GEN_8 ? 16'h0 : _GEN_24[alignedType];
      end
      splitLoadReqs_1_nc <= _GEN_63 & splitLoadReqs_1_nc;
      splitLoadReqs_1_mmio <= _GEN_63 & splitLoadReqs_1_mmio;
      splitLoadReqs_1_memBackTypeMM <= _GEN_63 & splitLoadReqs_1_memBackTypeMM;
      splitLoadReqs_1_is128bit <= _GEN_63 & splitLoadReqs_1_is128bit;
      splitLoadReqs_1_vecActive <= _GEN_63 & splitLoadReqs_1_vecActive;
      if (_GEN_62) begin
        splitLoadReqs_1_mshrid <= 2'h0;
        splitLoadReqs_1_schedIndex <= 5'h0;
      end
      if (io_splitLoadResp_valid & ~curPtr)
        splitLoadResp_0_data <= io_splitLoadResp_bits_data;
      if (io_splitLoadResp_valid & curPtr)
        splitLoadResp_1_data <= io_splitLoadResp_bits_data;
      if (io_splitLoadResp_valid) begin
        exceptionVec_3 <=
          ~isUncache
          & (hasException
               ? exceptionVec_3 | io_splitLoadResp_bits_uop_exceptionVec_3
               : ~_GEN_70 & exceptionVec_3);
        exceptionVec_4 <=
          isUncache
          | (hasException
               ? exceptionVec_4 | io_splitLoadResp_bits_uop_exceptionVec_4
               : ~_GEN_70 & exceptionVec_4);
        exceptionVec_5 <=
          ~isUncache
          & (hasException
               ? exceptionVec_5 | io_splitLoadResp_bits_uop_exceptionVec_5
               : ~_GEN_70 & exceptionVec_5);
        exceptionVec_13 <=
          ~isUncache
          & (hasException
               ? exceptionVec_13 | io_splitLoadResp_bits_uop_exceptionVec_13
               : ~_GEN_70 & exceptionVec_13);
        exceptionVec_19 <=
          ~isUncache
          & (hasException
               ? exceptionVec_19 | io_splitLoadResp_bits_uop_exceptionVec_19
               : ~_GEN_70 & exceptionVec_19);
        exceptionVec_21 <=
          ~isUncache
          & (hasException
               ? exceptionVec_21 | io_splitLoadResp_bits_uop_exceptionVec_21
               : ~_GEN_70 & exceptionVec_21);
      end
      else begin
        exceptionVec_3 <= ~_GEN_0 & exceptionVec_3;
        exceptionVec_4 <= ~_GEN_0 & exceptionVec_4;
        exceptionVec_5 <= ~_GEN_0 & exceptionVec_5;
        exceptionVec_13 <= ~_GEN_0 & exceptionVec_13;
        exceptionVec_19 <= ~_GEN_0 & exceptionVec_19;
        exceptionVec_21 <= ~_GEN_0 & exceptionVec_21;
      end
      curPtr <=
        ~flush
        & (~io_splitLoadResp_valid | _GEN_65 | ~_GEN_64
             ? _GEN_63
               & (_GEN_59
                    ? curPtr
                    : req_isvec ? ~io_vecWriteBack_valid_0 & curPtr : ~_GEN_57 & curPtr)
             : 1'(curPtr - 1'h1));
      if (canEnqValid)
        data_select <=
          {_data_select_result_T_37 & select_req_bit_uop_fpWen,
           _data_select_result_T_42 & select_req_bit_uop_fpWen,
           _data_select_result_T_37 & ~select_req_bit_uop_fpWen
             | select_req_bit_uop_fuOpType == 9'h12,
           _data_select_result_T_42 & ~select_req_bit_uop_fpWen
             | select_req_bit_uop_fuOpType == 9'h11,
           select_req_bit_uop_fuOpType == 9'h0 | select_req_bit_uop_fuOpType == 9'h10,
           select_req_bit_uop_fuOpType == 9'h3 | select_req_bit_uop_fuOpType == 9'h13,
           select_req_bit_uop_fuOpType == 9'h6 | select_req_bit_uop_fuOpType == 9'h16
             | select_req_bit_uop_fuOpType == 9'h1E,
           select_req_bit_uop_fuOpType == 9'h5 | select_req_bit_uop_fuOpType == 9'h15
             | select_req_bit_uop_fuOpType == 9'h1D,
           select_req_bit_uop_fuOpType == 9'h4 | select_req_bit_uop_fuOpType == 9'h14};
      globalException <=
        ~flush
        & (_GEN_61
             ? globalException
             : _GEN_2
                 ? (_GEN_54 ? hasException : globalException)
                 : _GEN_60
                     ? globalException
                     : req_isvec
                         ? ~io_vecWriteBack_valid_0 & globalException
                         : ~_GEN_57 & globalException);
      globalUncache <=
        ~flush
        & (_GEN_61
             ? globalUncache
             : _GEN_2
                 ? (_GEN_54 ? isUncache : globalUncache)
                 : _GEN_60
                     ? globalUncache
                     : req_isvec
                         ? ~io_vecWriteBack_valid_0 & globalUncache
                         : ~_GEN_57 & globalUncache);
      globalMMIO <=
        ~flush
        & (_GEN_61
             ? globalMMIO
             : _GEN_2
                 ? (_GEN_54 ? io_splitLoadResp_bits_mmio : globalMMIO)
                 : _GEN_60
                     ? globalMMIO
                     : req_isvec
                         ? ~io_vecWriteBack_valid_0 & globalMMIO
                         : ~_GEN_57 & globalMMIO);
      globalNC <=
        ~flush
        & (_GEN_61
             ? globalNC
             : _GEN_2
                 ? (_GEN_54 ? io_splitLoadResp_bits_nc : globalNC)
                 : _GEN_60
                     ? globalNC
                     : req_isvec
                         ? ~io_vecWriteBack_valid_0 & globalNC
                         : ~_GEN_57 & globalNC);
      globalMemBackTypeMM <=
        ~flush
        & (_GEN_61
             ? globalMemBackTypeMM
             : _GEN_2
                 ? (_GEN_54 ? io_splitLoadResp_bits_memBackTypeMM : globalMemBackTypeMM)
                 : _GEN_60
                     ? globalMemBackTypeMM
                     : req_isvec
                         ? ~io_vecWriteBack_valid_0 & globalMemBackTypeMM
                         : ~_GEN_57 & globalMemBackTypeMM);
      if (_GEN_8) begin
      end
      else begin
        lowResultShift <= _GEN_27[alignedType];
        lowResultWidth <= _GEN_30[alignedType];
        highResultShift <= _GEN_33[alignedType];
        highResultWidth <= _GEN_36[alignedType];
      end
      if (_io_splitLoadReq_valid_T_1)
        combinedData <=
          req_isvec
            ? (req_alignedType == 3'h0 ? {56'h0, catResult_0} : 64'h0)
              | (req_alignedType == 3'h1 ? {48'h0, catResult_1, catResult_0} : 64'h0)
              | (req_alignedType == 3'h2
                   ? {32'h0, catResult_3, catResult_2, catResult_1, catResult_0}
                   : 64'h0)
              | (req_alignedType == 3'h3
                   ? {catResult_7,
                      catResult_6,
                      catResult_5,
                      catResult_4,
                      catResult_3,
                      catResult_2,
                      catResult_1,
                      catResult_0}
                   : 64'h0)
            : (req_uop_fuOpType == 9'h0 ? {{56{catResult_0[7]}}, catResult_0} : 64'h0)
              | (req_uop_fuOpType == 9'h1
                   ? {{48{catResult_1[7]}}, catResult_1, catResult_0}
                   : 64'h0)
              | (req_uop_fuOpType == 9'h2
                   ? {req_uop_fpWen ? 32'hFFFFFFFF : {32{catResult_3[7]}},
                      catResult_3,
                      catResult_2,
                      catResult_1,
                      catResult_0}
                   : 64'h0) | (req_uop_fuOpType == 9'h3 ? _combinedData_T_80 : 64'h0)
              | (req_uop_fuOpType == 9'h4 ? {56'h0, catResult_0} : 64'h0)
              | (req_uop_fuOpType == 9'h5 ? {48'h0, catResult_1, catResult_0} : 64'h0)
              | (req_uop_fuOpType == 9'h6
                   ? {32'h0, catResult_3, catResult_2, catResult_1, catResult_0}
                   : 64'h0)
              | (req_uop_fuOpType == 9'h10 ? {{56{catResult_0[7]}}, catResult_0} : 64'h0)
              | (req_uop_fuOpType == 9'h11
                   ? {{48{catResult_1[7]}}, catResult_1, catResult_0}
                   : 64'h0)
              | (req_uop_fuOpType == 9'h12
                   ? {{32{catResult_3[7]}},
                      catResult_3,
                      catResult_2,
                      catResult_1,
                      catResult_0}
                   : 64'h0) | (req_uop_fuOpType == 9'h13 ? _combinedData_T_80 : 64'h0)
              | (req_uop_fuOpType == 9'h14 ? {56'h0, catResult_0} : 64'h0)
              | (req_uop_fuOpType == 9'h15 ? {48'h0, catResult_1, catResult_0} : 64'h0)
              | (req_uop_fuOpType == 9'h16
                   ? {32'h0, catResult_3, catResult_2, catResult_1, catResult_0}
                   : 64'h0)
              | (req_uop_fuOpType == 9'h1D ? {48'h0, catResult_1, catResult_0} : 64'h0)
              | (req_uop_fuOpType == 9'h1E
                   ? {32'h0, catResult_3, catResult_2, catResult_1, catResult_0}
                   : 64'h0);
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (canEnqValid) begin
      req_uop_exceptionVec_3 <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_exceptionVec_3
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_exceptionVec_3
              : io_enq_2_req_bits_uop_exceptionVec_3;
      req_uop_exceptionVec_5 <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_exceptionVec_5
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_exceptionVec_5
              : io_enq_2_req_bits_uop_exceptionVec_5;
      req_uop_exceptionVec_13 <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_exceptionVec_13
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_exceptionVec_13
              : io_enq_2_req_bits_uop_exceptionVec_13;
      req_uop_exceptionVec_19 <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_exceptionVec_19
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_exceptionVec_19
              : io_enq_2_req_bits_uop_exceptionVec_19;
      req_uop_exceptionVec_21 <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_exceptionVec_21
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_exceptionVec_21
              : io_enq_2_req_bits_uop_exceptionVec_21;
      req_uop_trigger <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_trigger
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_trigger
              : io_enq_2_req_bits_uop_trigger;
      req_uop_preDecodeInfo_isRVC <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_preDecodeInfo_isRVC
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_preDecodeInfo_isRVC
              : io_enq_2_req_bits_uop_preDecodeInfo_isRVC;
      req_uop_ftqPtr_flag <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_ftqPtr_flag
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_ftqPtr_flag
              : io_enq_2_req_bits_uop_ftqPtr_flag;
      req_uop_ftqPtr_value <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_ftqPtr_value
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_ftqPtr_value
              : io_enq_2_req_bits_uop_ftqPtr_value;
      req_uop_ftqOffset <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_ftqOffset
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_ftqOffset
              : io_enq_2_req_bits_uop_ftqOffset;
      req_uop_fuOpType <= select_req_bit_uop_fuOpType;
      req_uop_rfWen <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_rfWen
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_rfWen
              : io_enq_2_req_bits_uop_rfWen;
      req_uop_fpWen <= select_req_bit_uop_fpWen;
      req_uop_vpu_vstart <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_vpu_vstart
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_vpu_vstart
              : io_enq_2_req_bits_uop_vpu_vstart;
      req_uop_vpu_veew <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_vpu_veew
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_vpu_veew
              : io_enq_2_req_bits_uop_vpu_veew;
      req_uop_uopIdx <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_uopIdx
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_uopIdx
              : io_enq_2_req_bits_uop_uopIdx;
      req_uop_pdest <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_pdest
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_pdest
              : io_enq_2_req_bits_uop_pdest;
      req_uop_robIdx_flag <= select_req_bit_uop_robIdx_flag;
      req_uop_robIdx_value <= select_req_bit_uop_robIdx_value;
      req_uop_storeSetHit <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_storeSetHit
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_storeSetHit
              : io_enq_2_req_bits_uop_storeSetHit;
      req_uop_waitForRobIdx_flag <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_waitForRobIdx_flag
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_waitForRobIdx_flag
              : io_enq_2_req_bits_uop_waitForRobIdx_flag;
      req_uop_waitForRobIdx_value <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_waitForRobIdx_value
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_waitForRobIdx_value
              : io_enq_2_req_bits_uop_waitForRobIdx_value;
      req_uop_loadWaitBit <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_loadWaitBit
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_loadWaitBit
              : io_enq_2_req_bits_uop_loadWaitBit;
      req_uop_loadWaitStrict <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_loadWaitStrict
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_loadWaitStrict
              : io_enq_2_req_bits_uop_loadWaitStrict;
      req_uop_lqIdx_flag <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_lqIdx_flag
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_lqIdx_flag
              : io_enq_2_req_bits_uop_lqIdx_flag;
      req_uop_lqIdx_value <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_lqIdx_value
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_lqIdx_value
              : io_enq_2_req_bits_uop_lqIdx_value;
      req_uop_sqIdx_flag <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_sqIdx_flag
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_sqIdx_flag
              : io_enq_2_req_bits_uop_sqIdx_flag;
      req_uop_sqIdx_value <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_uop_sqIdx_value
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_uop_sqIdx_value
              : io_enq_2_req_bits_uop_sqIdx_value;
      req_vaddr <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_vaddr
          : io_enq_1_req_valid ? io_enq_1_req_bits_vaddr : io_enq_2_req_bits_vaddr;
      req_fullva <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_fullva
          : io_enq_1_req_valid ? io_enq_1_req_bits_fullva : io_enq_2_req_bits_fullva;
      req_vaNeedExt <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_vaNeedExt
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_vaNeedExt
              : io_enq_2_req_bits_vaNeedExt;
      req_gpaddr <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_gpaddr
          : io_enq_1_req_valid ? io_enq_1_req_bits_gpaddr : io_enq_2_req_bits_gpaddr;
      req_mask <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_mask
          : io_enq_1_req_valid ? io_enq_1_req_bits_mask : io_enq_2_req_bits_mask;
      req_isvec <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_isvec
          : io_enq_1_req_valid ? io_enq_1_req_bits_isvec : io_enq_2_req_bits_isvec;
      req_elemIdx <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_elemIdx
          : io_enq_1_req_valid ? io_enq_1_req_bits_elemIdx : io_enq_2_req_bits_elemIdx;
      req_alignedType <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_alignedType
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_alignedType
              : io_enq_2_req_bits_alignedType;
      req_mbIndex <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_mbIndex
          : io_enq_1_req_valid ? io_enq_1_req_bits_mbIndex : io_enq_2_req_bits_mbIndex;
      req_elemIdxInsideVd <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_elemIdxInsideVd
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_elemIdxInsideVd
              : io_enq_2_req_bits_elemIdxInsideVd;
      req_vecTriggerMask <=
        io_enq_0_req_valid
          ? io_enq_0_req_bits_vecTriggerMask
          : io_enq_1_req_valid
              ? io_enq_1_req_bits_vecTriggerMask
              : io_enq_2_req_bits_vecTriggerMask;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:374];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [8:0] i = 9'h0; i < 9'h177; i += 9'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        req_valid = _RANDOM[9'h0][0];
        req_uop_exceptionVec_3 = _RANDOM[9'h3][0];
        req_uop_exceptionVec_5 = _RANDOM[9'h3][2];
        req_uop_exceptionVec_13 = _RANDOM[9'h3][10];
        req_uop_exceptionVec_19 = _RANDOM[9'h3][16];
        req_uop_exceptionVec_21 = _RANDOM[9'h3][18];
        req_uop_trigger = _RANDOM[9'h3][26:23];
        req_uop_preDecodeInfo_isRVC = _RANDOM[9'h3][28];
        req_uop_ftqPtr_flag = _RANDOM[9'h4][3];
        req_uop_ftqPtr_value = _RANDOM[9'h4][6:4];
        req_uop_ftqOffset = _RANDOM[9'h4][10:7];
        req_uop_fuOpType = _RANDOM[9'h6][16:8];
        req_uop_rfWen = _RANDOM[9'h6][17];
        req_uop_fpWen = _RANDOM[9'h6][18];
        req_uop_vpu_vstart = {_RANDOM[9'h8][31:26], _RANDOM[9'h9][1:0]};
        req_uop_vpu_veew = _RANDOM[9'hE][2:1];
        req_uop_uopIdx = _RANDOM[9'hE][22:16];
        req_uop_pdest = _RANDOM[9'h11][29:22];
        req_uop_robIdx_flag = _RANDOM[9'h12][10];
        req_uop_robIdx_value = _RANDOM[9'h12][16:11];
        req_uop_storeSetHit = _RANDOM[9'h27][2];
        req_uop_waitForRobIdx_flag = _RANDOM[9'h27][3];
        req_uop_waitForRobIdx_value = _RANDOM[9'h27][9:4];
        req_uop_loadWaitBit = _RANDOM[9'h27][10];
        req_uop_loadWaitStrict = _RANDOM[9'h27][11];
        req_uop_lqIdx_flag = _RANDOM[9'h27][17];
        req_uop_lqIdx_value = _RANDOM[9'h27][22:18];
        req_uop_sqIdx_flag = _RANDOM[9'h27][23];
        req_uop_sqIdx_value = _RANDOM[9'h27][28:24];
        req_vaddr = {_RANDOM[9'h28][31:4], _RANDOM[9'h29][21:0]};
        req_fullva = {_RANDOM[9'h29][31:22], _RANDOM[9'h2A], _RANDOM[9'h2B][21:0]};
        req_vaNeedExt = _RANDOM[9'h2B][22];
        req_gpaddr = {_RANDOM[9'h2D][31:7], _RANDOM[9'h2E], _RANDOM[9'h2F][6:0]};
        req_mask = _RANDOM[9'h2F][22:7];
        req_isvec = _RANDOM[9'h38][24];
        req_elemIdx = {_RANDOM[9'h38][31:29], _RANDOM[9'h39][4:0]};
        req_alignedType = _RANDOM[9'h39][7:5];
        req_mbIndex = _RANDOM[9'h39][11:8];
        req_elemIdxInsideVd = _RANDOM[9'h39][23:16];
        req_vecTriggerMask = {_RANDOM[9'h3C][31:29], _RANDOM[9'h3D][12:0]};
        bufferState = _RANDOM[9'h51][29:27];
        splitLoadReqs_0_uop_exceptionVec_3 = _RANDOM[9'h54][29];
        splitLoadReqs_0_uop_exceptionVec_4 = _RANDOM[9'h54][30];
        splitLoadReqs_0_uop_exceptionVec_5 = _RANDOM[9'h54][31];
        splitLoadReqs_0_uop_exceptionVec_13 = _RANDOM[9'h55][7];
        splitLoadReqs_0_uop_exceptionVec_19 = _RANDOM[9'h55][13];
        splitLoadReqs_0_uop_exceptionVec_21 = _RANDOM[9'h55][15];
        splitLoadReqs_0_uop_trigger = _RANDOM[9'h55][23:20];
        splitLoadReqs_0_uop_preDecodeInfo_isRVC = _RANDOM[9'h55][25];
        splitLoadReqs_0_uop_ftqPtr_flag = _RANDOM[9'h56][0];
        splitLoadReqs_0_uop_ftqPtr_value = _RANDOM[9'h56][3:1];
        splitLoadReqs_0_uop_ftqOffset = _RANDOM[9'h56][7:4];
        splitLoadReqs_0_uop_fuOpType = _RANDOM[9'h58][13:5];
        splitLoadReqs_0_uop_rfWen = _RANDOM[9'h58][14];
        splitLoadReqs_0_uop_fpWen = _RANDOM[9'h58][15];
        splitLoadReqs_0_uop_vpu_vstart = _RANDOM[9'h5A][30:23];
        splitLoadReqs_0_uop_vpu_veew = _RANDOM[9'h5F][31:30];
        splitLoadReqs_0_uop_uopIdx = _RANDOM[9'h60][19:13];
        splitLoadReqs_0_uop_pdest = _RANDOM[9'h63][26:19];
        splitLoadReqs_0_uop_robIdx_flag = _RANDOM[9'h64][7];
        splitLoadReqs_0_uop_robIdx_value = _RANDOM[9'h64][13:8];
        splitLoadReqs_0_uop_storeSetHit = _RANDOM[9'h78][31];
        splitLoadReqs_0_uop_waitForRobIdx_flag = _RANDOM[9'h79][0];
        splitLoadReqs_0_uop_waitForRobIdx_value = _RANDOM[9'h79][6:1];
        splitLoadReqs_0_uop_loadWaitBit = _RANDOM[9'h79][7];
        splitLoadReqs_0_uop_loadWaitStrict = _RANDOM[9'h79][8];
        splitLoadReqs_0_uop_lqIdx_flag = _RANDOM[9'h79][14];
        splitLoadReqs_0_uop_lqIdx_value = _RANDOM[9'h79][19:15];
        splitLoadReqs_0_uop_sqIdx_flag = _RANDOM[9'h79][20];
        splitLoadReqs_0_uop_sqIdx_value = _RANDOM[9'h79][25:21];
        splitLoadReqs_0_vaddr = {_RANDOM[9'h7A][31:1], _RANDOM[9'h7B][18:0]};
        splitLoadReqs_0_fullva =
          {_RANDOM[9'h7B][31:19], _RANDOM[9'h7C], _RANDOM[9'h7D][18:0]};
        splitLoadReqs_0_mask = _RANDOM[9'h81][19:4];
        splitLoadReqs_0_nc = _RANDOM[9'h85][26];
        splitLoadReqs_0_mmio = _RANDOM[9'h85][27];
        splitLoadReqs_0_memBackTypeMM = _RANDOM[9'h85][28];
        splitLoadReqs_0_is128bit = _RANDOM[9'h8A][23];
        splitLoadReqs_0_vecActive = _RANDOM[9'h8F][10];
        splitLoadReqs_0_mshrid = _RANDOM[9'h8F][22:21];
        splitLoadReqs_0_schedIndex = {_RANDOM[9'h8F][31], _RANDOM[9'h90][3:0]};
        splitLoadReqs_1_uop_exceptionVec_3 = _RANDOM[9'h93][10];
        splitLoadReqs_1_uop_exceptionVec_4 = _RANDOM[9'h93][11];
        splitLoadReqs_1_uop_exceptionVec_5 = _RANDOM[9'h93][12];
        splitLoadReqs_1_uop_exceptionVec_13 = _RANDOM[9'h93][20];
        splitLoadReqs_1_uop_exceptionVec_19 = _RANDOM[9'h93][26];
        splitLoadReqs_1_uop_exceptionVec_21 = _RANDOM[9'h93][28];
        splitLoadReqs_1_uop_trigger = _RANDOM[9'h94][4:1];
        splitLoadReqs_1_uop_preDecodeInfo_isRVC = _RANDOM[9'h94][6];
        splitLoadReqs_1_uop_ftqPtr_flag = _RANDOM[9'h94][13];
        splitLoadReqs_1_uop_ftqPtr_value = _RANDOM[9'h94][16:14];
        splitLoadReqs_1_uop_ftqOffset = _RANDOM[9'h94][20:17];
        splitLoadReqs_1_uop_fuOpType = _RANDOM[9'h96][26:18];
        splitLoadReqs_1_uop_rfWen = _RANDOM[9'h96][27];
        splitLoadReqs_1_uop_fpWen = _RANDOM[9'h96][28];
        splitLoadReqs_1_uop_vpu_vstart = _RANDOM[9'h99][11:4];
        splitLoadReqs_1_uop_vpu_veew = _RANDOM[9'h9E][12:11];
        splitLoadReqs_1_uop_uopIdx = {_RANDOM[9'h9E][31:26], _RANDOM[9'h9F][0]};
        splitLoadReqs_1_uop_pdest = _RANDOM[9'hA2][7:0];
        splitLoadReqs_1_uop_robIdx_flag = _RANDOM[9'hA2][20];
        splitLoadReqs_1_uop_robIdx_value = _RANDOM[9'hA2][26:21];
        splitLoadReqs_1_uop_storeSetHit = _RANDOM[9'hB7][12];
        splitLoadReqs_1_uop_waitForRobIdx_flag = _RANDOM[9'hB7][13];
        splitLoadReqs_1_uop_waitForRobIdx_value = _RANDOM[9'hB7][19:14];
        splitLoadReqs_1_uop_loadWaitBit = _RANDOM[9'hB7][20];
        splitLoadReqs_1_uop_loadWaitStrict = _RANDOM[9'hB7][21];
        splitLoadReqs_1_uop_lqIdx_flag = _RANDOM[9'hB7][27];
        splitLoadReqs_1_uop_lqIdx_value = {_RANDOM[9'hB7][31:28], _RANDOM[9'hB8][0]};
        splitLoadReqs_1_uop_sqIdx_flag = _RANDOM[9'hB8][1];
        splitLoadReqs_1_uop_sqIdx_value = _RANDOM[9'hB8][6:2];
        splitLoadReqs_1_vaddr = {_RANDOM[9'hB8][31:14], _RANDOM[9'hB9]};
        splitLoadReqs_1_fullva = {_RANDOM[9'hBA], _RANDOM[9'hBB]};
        splitLoadReqs_1_mask = {_RANDOM[9'hBF][31:17], _RANDOM[9'hC0][0]};
        splitLoadReqs_1_nc = _RANDOM[9'hC4][7];
        splitLoadReqs_1_mmio = _RANDOM[9'hC4][8];
        splitLoadReqs_1_memBackTypeMM = _RANDOM[9'hC4][9];
        splitLoadReqs_1_is128bit = _RANDOM[9'hC9][4];
        splitLoadReqs_1_vecActive = _RANDOM[9'hCD][23];
        splitLoadReqs_1_mshrid = _RANDOM[9'hCE][3:2];
        splitLoadReqs_1_schedIndex = _RANDOM[9'hCE][16:12];
        splitLoadResp_0_data =
          {_RANDOM[9'hFE][31:14],
           _RANDOM[9'hFF],
           _RANDOM[9'h100],
           _RANDOM[9'h101],
           _RANDOM[9'h102][14:0]};
        splitLoadResp_1_data =
          {_RANDOM[9'h150][31:8],
           _RANDOM[9'h151],
           _RANDOM[9'h152],
           _RANDOM[9'h153],
           _RANDOM[9'h154][8:0]};
        exceptionVec_3 = _RANDOM[9'h172][15];
        exceptionVec_4 = _RANDOM[9'h172][16];
        exceptionVec_5 = _RANDOM[9'h172][17];
        exceptionVec_13 = _RANDOM[9'h172][25];
        exceptionVec_19 = _RANDOM[9'h172][31];
        exceptionVec_21 = _RANDOM[9'h173][1];
        unSentLoads = _RANDOM[9'h173][5:4];
        curPtr = _RANDOM[9'h173][6];
        data_select = _RANDOM[9'h173][16:8];
        globalException = _RANDOM[9'h173][17];
        globalUncache = _RANDOM[9'h173][18];
        globalMMIO = _RANDOM[9'h173][19];
        globalNC = _RANDOM[9'h173][20];
        globalMemBackTypeMM = _RANDOM[9'h173][21];
        lowResultShift = _RANDOM[9'h173][24:22];
        lowResultWidth = _RANDOM[9'h173][27:25];
        highResultShift = _RANDOM[9'h173][30:28];
        highResultWidth = {_RANDOM[9'h173][31], _RANDOM[9'h174][1:0]};
        combinedData = {_RANDOM[9'h174][31:2], _RANDOM[9'h175], _RANDOM[9'h176][1:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        req_valid = 1'h0;
        bufferState = 3'h0;
        splitLoadReqs_0_uop_exceptionVec_3 = 1'h0;
        splitLoadReqs_0_uop_exceptionVec_4 = 1'h0;
        splitLoadReqs_0_uop_exceptionVec_5 = 1'h0;
        splitLoadReqs_0_uop_exceptionVec_13 = 1'h0;
        splitLoadReqs_0_uop_exceptionVec_19 = 1'h0;
        splitLoadReqs_0_uop_exceptionVec_21 = 1'h0;
        splitLoadReqs_0_uop_trigger = 4'h0;
        splitLoadReqs_0_uop_preDecodeInfo_isRVC = 1'h0;
        splitLoadReqs_0_uop_ftqPtr_flag = 1'h0;
        splitLoadReqs_0_uop_ftqPtr_value = 3'h0;
        splitLoadReqs_0_uop_ftqOffset = 4'h0;
        splitLoadReqs_0_uop_fuOpType = 9'h0;
        splitLoadReqs_0_uop_rfWen = 1'h0;
        splitLoadReqs_0_uop_fpWen = 1'h0;
        splitLoadReqs_0_uop_vpu_vstart = 8'h0;
        splitLoadReqs_0_uop_vpu_veew = 2'h0;
        splitLoadReqs_0_uop_uopIdx = 7'h0;
        splitLoadReqs_0_uop_pdest = 8'h0;
        splitLoadReqs_0_uop_robIdx_flag = 1'h0;
        splitLoadReqs_0_uop_robIdx_value = 6'h0;
        splitLoadReqs_0_uop_storeSetHit = 1'h0;
        splitLoadReqs_0_uop_waitForRobIdx_flag = 1'h0;
        splitLoadReqs_0_uop_waitForRobIdx_value = 6'h0;
        splitLoadReqs_0_uop_loadWaitBit = 1'h0;
        splitLoadReqs_0_uop_loadWaitStrict = 1'h0;
        splitLoadReqs_0_uop_lqIdx_flag = 1'h0;
        splitLoadReqs_0_uop_lqIdx_value = 5'h0;
        splitLoadReqs_0_uop_sqIdx_flag = 1'h0;
        splitLoadReqs_0_uop_sqIdx_value = 5'h0;
        splitLoadReqs_0_vaddr = 50'h0;
        splitLoadReqs_0_fullva = 64'h0;
        splitLoadReqs_0_mask = 16'h0;
        splitLoadReqs_0_nc = 1'h0;
        splitLoadReqs_0_mmio = 1'h0;
        splitLoadReqs_0_memBackTypeMM = 1'h0;
        splitLoadReqs_0_is128bit = 1'h0;
        splitLoadReqs_0_vecActive = 1'h0;
        splitLoadReqs_0_mshrid = 2'h0;
        splitLoadReqs_0_schedIndex = 5'h0;
        splitLoadReqs_1_uop_exceptionVec_3 = 1'h0;
        splitLoadReqs_1_uop_exceptionVec_4 = 1'h0;
        splitLoadReqs_1_uop_exceptionVec_5 = 1'h0;
        splitLoadReqs_1_uop_exceptionVec_13 = 1'h0;
        splitLoadReqs_1_uop_exceptionVec_19 = 1'h0;
        splitLoadReqs_1_uop_exceptionVec_21 = 1'h0;
        splitLoadReqs_1_uop_trigger = 4'h0;
        splitLoadReqs_1_uop_preDecodeInfo_isRVC = 1'h0;
        splitLoadReqs_1_uop_ftqPtr_flag = 1'h0;
        splitLoadReqs_1_uop_ftqPtr_value = 3'h0;
        splitLoadReqs_1_uop_ftqOffset = 4'h0;
        splitLoadReqs_1_uop_fuOpType = 9'h0;
        splitLoadReqs_1_uop_rfWen = 1'h0;
        splitLoadReqs_1_uop_fpWen = 1'h0;
        splitLoadReqs_1_uop_vpu_vstart = 8'h0;
        splitLoadReqs_1_uop_vpu_veew = 2'h0;
        splitLoadReqs_1_uop_uopIdx = 7'h0;
        splitLoadReqs_1_uop_pdest = 8'h0;
        splitLoadReqs_1_uop_robIdx_flag = 1'h0;
        splitLoadReqs_1_uop_robIdx_value = 6'h0;
        splitLoadReqs_1_uop_storeSetHit = 1'h0;
        splitLoadReqs_1_uop_waitForRobIdx_flag = 1'h0;
        splitLoadReqs_1_uop_waitForRobIdx_value = 6'h0;
        splitLoadReqs_1_uop_loadWaitBit = 1'h0;
        splitLoadReqs_1_uop_loadWaitStrict = 1'h0;
        splitLoadReqs_1_uop_lqIdx_flag = 1'h0;
        splitLoadReqs_1_uop_lqIdx_value = 5'h0;
        splitLoadReqs_1_uop_sqIdx_flag = 1'h0;
        splitLoadReqs_1_uop_sqIdx_value = 5'h0;
        splitLoadReqs_1_vaddr = 50'h0;
        splitLoadReqs_1_fullva = 64'h0;
        splitLoadReqs_1_mask = 16'h0;
        splitLoadReqs_1_nc = 1'h0;
        splitLoadReqs_1_mmio = 1'h0;
        splitLoadReqs_1_memBackTypeMM = 1'h0;
        splitLoadReqs_1_is128bit = 1'h0;
        splitLoadReqs_1_vecActive = 1'h0;
        splitLoadReqs_1_mshrid = 2'h0;
        splitLoadReqs_1_schedIndex = 5'h0;
        splitLoadResp_0_data = 129'h0;
        splitLoadResp_1_data = 129'h0;
        exceptionVec_3 = 1'h0;
        exceptionVec_4 = 1'h0;
        exceptionVec_5 = 1'h0;
        exceptionVec_13 = 1'h0;
        exceptionVec_19 = 1'h0;
        exceptionVec_21 = 1'h0;
        unSentLoads = 2'h0;
        curPtr = 1'h0;
        data_select = 9'h0;
        globalException = 1'h0;
        globalUncache = 1'h0;
        globalMMIO = 1'h0;
        globalNC = 1'h0;
        globalMemBackTypeMM = 1'h0;
        lowResultShift = 3'h0;
        lowResultWidth = 3'h0;
        highResultShift = 3'h0;
        highResultWidth = 3'h0;
        combinedData = 64'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_enq_0_req_ready = io_enq_0_req_ready_0;
  assign io_enq_1_req_ready = io_enq_1_req_ready_0;
  assign io_enq_2_req_ready =
    ~(io_enq_0_req_ready_0 | io_enq_1_req_ready_0) & ~req_valid & io_enq_2_req_valid;
  assign io_splitLoadReq_valid = io_splitLoadReq_valid_0;
  assign io_splitLoadReq_bits_uop_exceptionVec_3 =
    curPtr ? splitLoadReqs_1_uop_exceptionVec_3 : splitLoadReqs_0_uop_exceptionVec_3;
  assign io_splitLoadReq_bits_uop_exceptionVec_4 =
    curPtr ? splitLoadReqs_1_uop_exceptionVec_4 : splitLoadReqs_0_uop_exceptionVec_4;
  assign io_splitLoadReq_bits_uop_exceptionVec_5 =
    curPtr ? splitLoadReqs_1_uop_exceptionVec_5 : splitLoadReqs_0_uop_exceptionVec_5;
  assign io_splitLoadReq_bits_uop_exceptionVec_13 =
    curPtr ? splitLoadReqs_1_uop_exceptionVec_13 : splitLoadReqs_0_uop_exceptionVec_13;
  assign io_splitLoadReq_bits_uop_exceptionVec_19 =
    curPtr ? splitLoadReqs_1_uop_exceptionVec_19 : splitLoadReqs_0_uop_exceptionVec_19;
  assign io_splitLoadReq_bits_uop_exceptionVec_21 =
    curPtr ? splitLoadReqs_1_uop_exceptionVec_21 : splitLoadReqs_0_uop_exceptionVec_21;
  assign io_splitLoadReq_bits_uop_trigger =
    curPtr ? splitLoadReqs_1_uop_trigger : splitLoadReqs_0_uop_trigger;
  assign io_splitLoadReq_bits_uop_preDecodeInfo_isRVC =
    curPtr
      ? splitLoadReqs_1_uop_preDecodeInfo_isRVC
      : splitLoadReqs_0_uop_preDecodeInfo_isRVC;
  assign io_splitLoadReq_bits_uop_ftqPtr_flag =
    curPtr ? splitLoadReqs_1_uop_ftqPtr_flag : splitLoadReqs_0_uop_ftqPtr_flag;
  assign io_splitLoadReq_bits_uop_ftqPtr_value =
    curPtr ? splitLoadReqs_1_uop_ftqPtr_value : splitLoadReqs_0_uop_ftqPtr_value;
  assign io_splitLoadReq_bits_uop_ftqOffset =
    curPtr ? splitLoadReqs_1_uop_ftqOffset : splitLoadReqs_0_uop_ftqOffset;
  assign io_splitLoadReq_bits_uop_fuOpType =
    req_isvec
      ? req_uop_fuOpType
      : {4'h0,
         req_uop_fuOpType[4] & ~(req_uop_fuOpType[5]) & ~(|(req_uop_fuOpType[8:7])),
         req_uop_fuOpType[4] & req_uop_fuOpType[3] & ~(req_uop_fuOpType[5])
           & ~(|(req_uop_fuOpType[8:7])),
         1'h0,
         curPtr ? splitLoadReqs_1_uop_fuOpType[1:0] : splitLoadReqs_0_uop_fuOpType[1:0]};
  assign io_splitLoadReq_bits_uop_rfWen =
    curPtr ? splitLoadReqs_1_uop_rfWen : splitLoadReqs_0_uop_rfWen;
  assign io_splitLoadReq_bits_uop_fpWen =
    curPtr ? splitLoadReqs_1_uop_fpWen : splitLoadReqs_0_uop_fpWen;
  assign io_splitLoadReq_bits_uop_vpu_vstart =
    curPtr ? splitLoadReqs_1_uop_vpu_vstart : splitLoadReqs_0_uop_vpu_vstart;
  assign io_splitLoadReq_bits_uop_vpu_veew =
    curPtr ? splitLoadReqs_1_uop_vpu_veew : splitLoadReqs_0_uop_vpu_veew;
  assign io_splitLoadReq_bits_uop_uopIdx =
    curPtr ? splitLoadReqs_1_uop_uopIdx : splitLoadReqs_0_uop_uopIdx;
  assign io_splitLoadReq_bits_uop_pdest =
    curPtr ? splitLoadReqs_1_uop_pdest : splitLoadReqs_0_uop_pdest;
  assign io_splitLoadReq_bits_uop_robIdx_flag =
    curPtr ? splitLoadReqs_1_uop_robIdx_flag : splitLoadReqs_0_uop_robIdx_flag;
  assign io_splitLoadReq_bits_uop_robIdx_value =
    curPtr ? splitLoadReqs_1_uop_robIdx_value : splitLoadReqs_0_uop_robIdx_value;
  assign io_splitLoadReq_bits_uop_storeSetHit =
    curPtr ? splitLoadReqs_1_uop_storeSetHit : splitLoadReqs_0_uop_storeSetHit;
  assign io_splitLoadReq_bits_uop_waitForRobIdx_flag =
    curPtr
      ? splitLoadReqs_1_uop_waitForRobIdx_flag
      : splitLoadReqs_0_uop_waitForRobIdx_flag;
  assign io_splitLoadReq_bits_uop_waitForRobIdx_value =
    curPtr
      ? splitLoadReqs_1_uop_waitForRobIdx_value
      : splitLoadReqs_0_uop_waitForRobIdx_value;
  assign io_splitLoadReq_bits_uop_loadWaitBit =
    curPtr ? splitLoadReqs_1_uop_loadWaitBit : splitLoadReqs_0_uop_loadWaitBit;
  assign io_splitLoadReq_bits_uop_loadWaitStrict =
    curPtr ? splitLoadReqs_1_uop_loadWaitStrict : splitLoadReqs_0_uop_loadWaitStrict;
  assign io_splitLoadReq_bits_uop_lqIdx_flag =
    curPtr ? splitLoadReqs_1_uop_lqIdx_flag : splitLoadReqs_0_uop_lqIdx_flag;
  assign io_splitLoadReq_bits_uop_lqIdx_value =
    curPtr ? splitLoadReqs_1_uop_lqIdx_value : splitLoadReqs_0_uop_lqIdx_value;
  assign io_splitLoadReq_bits_uop_sqIdx_flag =
    curPtr ? splitLoadReqs_1_uop_sqIdx_flag : splitLoadReqs_0_uop_sqIdx_flag;
  assign io_splitLoadReq_bits_uop_sqIdx_value =
    curPtr ? splitLoadReqs_1_uop_sqIdx_value : splitLoadReqs_0_uop_sqIdx_value;
  assign io_splitLoadReq_bits_vaddr =
    curPtr ? splitLoadReqs_1_vaddr : splitLoadReqs_0_vaddr;
  assign io_splitLoadReq_bits_fullva =
    curPtr ? splitLoadReqs_1_fullva : splitLoadReqs_0_fullva;
  assign io_splitLoadReq_bits_mask = curPtr ? splitLoadReqs_1_mask : splitLoadReqs_0_mask;
  assign io_splitLoadReq_bits_nc = curPtr ? splitLoadReqs_1_nc : splitLoadReqs_0_nc;
  assign io_splitLoadReq_bits_mmio = curPtr ? splitLoadReqs_1_mmio : splitLoadReqs_0_mmio;
  assign io_splitLoadReq_bits_memBackTypeMM =
    curPtr ? splitLoadReqs_1_memBackTypeMM : splitLoadReqs_0_memBackTypeMM;
  assign io_splitLoadReq_bits_isvec = req_isvec;
  assign io_splitLoadReq_bits_is128bit =
    curPtr ? splitLoadReqs_1_is128bit : splitLoadReqs_0_is128bit;
  assign io_splitLoadReq_bits_vecActive =
    curPtr ? splitLoadReqs_1_vecActive : splitLoadReqs_0_vecActive;
  assign io_splitLoadReq_bits_mshrid =
    curPtr ? splitLoadReqs_1_mshrid : splitLoadReqs_0_mshrid;
  assign io_splitLoadReq_bits_schedIndex =
    curPtr ? splitLoadReqs_1_schedIndex : splitLoadReqs_0_schedIndex;
  assign io_splitLoadReq_bits_isFinalSplit = curPtr & ~needWakeUpReqsWire;
  assign io_splitLoadReq_bits_misalignNeedWakeUp = needWakeUpReqsWire;
  assign io_writeBack_valid = io_writeBack_valid_0;
  assign io_writeBack_bits_uop_exceptionVec_3 = _flushLdExpBuff_T_2 & exceptionVec_3;
  assign io_writeBack_bits_uop_exceptionVec_4 = _flushLdExpBuff_T_2 & exceptionVec_4;
  assign io_writeBack_bits_uop_exceptionVec_5 = _flushLdExpBuff_T_2 & exceptionVec_5;
  assign io_writeBack_bits_uop_exceptionVec_13 = _flushLdExpBuff_T_2 & exceptionVec_13;
  assign io_writeBack_bits_uop_exceptionVec_19 = _flushLdExpBuff_T_2 & exceptionVec_19;
  assign io_writeBack_bits_uop_exceptionVec_21 = _flushLdExpBuff_T_2 & exceptionVec_21;
  assign io_writeBack_bits_uop_trigger = req_uop_trigger;
  assign io_writeBack_bits_uop_rfWen = ~globalException & ~globalUncache & req_uop_rfWen;
  assign io_writeBack_bits_uop_fpWen = req_uop_fpWen;
  assign io_writeBack_bits_uop_pdest = req_uop_pdest;
  assign io_writeBack_bits_uop_robIdx_flag = req_uop_robIdx_flag;
  assign io_writeBack_bits_uop_robIdx_value = req_uop_robIdx_value;
  assign io_writeBack_bits_data =
    (data_select[0] ? {56'h0, combinedData[7:0]} : 64'h0)
    | (data_select[1] ? {48'h0, combinedData[15:0]} : 64'h0)
    | (data_select[2] ? {32'h0, combinedData[31:0]} : 64'h0)
    | (data_select[3] ? combinedData : 64'h0)
    | (data_select[4] ? {{56{combinedData[7]}}, combinedData[7:0]} : 64'h0)
    | (data_select[5] ? {{48{combinedData[15]}}, combinedData[15:0]} : 64'h0)
    | (data_select[6] ? {{32{combinedData[31]}}, combinedData[31:0]} : 64'h0)
    | (data_select[7] ? {48'hFFFFFFFFFFFF, combinedData[15:0]} : 64'h0)
    | (data_select[8] ? {32'hFFFFFFFF, combinedData[31:0]} : 64'h0);
  assign io_writeBack_bits_debug_isMMIO = globalMMIO;
  assign io_writeBack_bits_debug_isNCIO = globalNC & ~globalMemBackTypeMM;
  assign io_vecWriteBack_valid = io_vecWriteBack_valid_0;
  assign io_vecWriteBack_bits_mBIndex = req_mbIndex;
  assign io_vecWriteBack_bits_exceptionVec_3 = exceptionVec_3;
  assign io_vecWriteBack_bits_exceptionVec_4 = exceptionVec_4;
  assign io_vecWriteBack_bits_exceptionVec_5 = exceptionVec_5;
  assign io_vecWriteBack_bits_exceptionVec_13 = exceptionVec_13;
  assign io_vecWriteBack_bits_exceptionVec_21 = exceptionVec_21;
  assign io_vecWriteBack_bits_hasException = globalException;
  assign io_vecWriteBack_bits_vaddr = req_fullva;
  assign io_vecWriteBack_bits_vaNeedExt = req_vaNeedExt;
  assign io_vecWriteBack_bits_gpaddr = req_gpaddr;
  assign io_vecWriteBack_bits_vstart = req_uop_vpu_vstart;
  assign io_vecWriteBack_bits_vecTriggerMask = req_vecTriggerMask;
  assign io_vecWriteBack_bits_elemIdx = req_elemIdx;
  assign io_vecWriteBack_bits_mask = req_mask;
  assign io_vecWriteBack_bits_alignedType = req_alignedType;
  assign io_vecWriteBack_bits_elemIdxInsideVd = req_elemIdxInsideVd;
  assign io_vecWriteBack_bits_vecdata = {64'h0, combinedData};
  assign io_loadMisalignFull = req_valid;
endmodule

