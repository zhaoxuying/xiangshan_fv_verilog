// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module HPerfMonitor_1(
  input         clock,
  input  [63:0] io_hpm_event_0,
  input  [63:0] io_hpm_event_1,
  input  [63:0] io_hpm_event_2,
  input  [63:0] io_hpm_event_3,
  input  [63:0] io_hpm_event_4,
  input  [5:0]  io_events_sets_0_value,
  input  [5:0]  io_events_sets_1_value,
  input  [5:0]  io_events_sets_2_value,
  input  [5:0]  io_events_sets_3_value,
  input  [5:0]  io_events_sets_4_value,
  input  [5:0]  io_events_sets_5_value,
  input  [5:0]  io_events_sets_6_value,
  input  [5:0]  io_events_sets_7_value,
  input  [5:0]  io_events_sets_8_value,
  input  [5:0]  io_events_sets_9_value,
  input  [5:0]  io_events_sets_10_value,
  input  [5:0]  io_events_sets_11_value,
  output [5:0]  io_perf_0_value,
  output [5:0]  io_perf_1_value,
  output [5:0]  io_perf_2_value,
  output [5:0]  io_perf_3_value,
  output [5:0]  io_perf_4_value
);

  wire [5:0] _perfEvents_hpc_4_io_perf_0_value;
  wire [5:0] _perfEvents_hpc_3_io_perf_0_value;
  wire [5:0] _perfEvents_hpc_2_io_perf_0_value;
  wire [5:0] _perfEvents_hpc_1_io_perf_0_value;
  wire [5:0] _perfEvents_hpc_io_perf_0_value;
  reg  [5:0] io_perf_0_value_REG;
  reg  [5:0] io_perf_0_value_REG_1;
  reg  [5:0] io_perf_1_value_REG;
  reg  [5:0] io_perf_1_value_REG_1;
  reg  [5:0] io_perf_2_value_REG;
  reg  [5:0] io_perf_2_value_REG_1;
  reg  [5:0] io_perf_3_value_REG;
  reg  [5:0] io_perf_3_value_REG_1;
  reg  [5:0] io_perf_4_value_REG;
  reg  [5:0] io_perf_4_value_REG_1;
  always @(posedge clock) begin
    io_perf_0_value_REG <= _perfEvents_hpc_io_perf_0_value;
    io_perf_0_value_REG_1 <= io_perf_0_value_REG;
    io_perf_1_value_REG <= _perfEvents_hpc_1_io_perf_0_value;
    io_perf_1_value_REG_1 <= io_perf_1_value_REG;
    io_perf_2_value_REG <= _perfEvents_hpc_2_io_perf_0_value;
    io_perf_2_value_REG_1 <= io_perf_2_value_REG;
    io_perf_3_value_REG <= _perfEvents_hpc_3_io_perf_0_value;
    io_perf_3_value_REG_1 <= io_perf_3_value_REG;
    io_perf_4_value_REG <= _perfEvents_hpc_4_io_perf_0_value;
    io_perf_4_value_REG_1 <= io_perf_4_value_REG;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        io_perf_0_value_REG = _RANDOM[1'h0][5:0];
        io_perf_0_value_REG_1 = _RANDOM[1'h0][11:6];
        io_perf_1_value_REG = _RANDOM[1'h0][17:12];
        io_perf_1_value_REG_1 = _RANDOM[1'h0][23:18];
        io_perf_2_value_REG = _RANDOM[1'h0][29:24];
        io_perf_2_value_REG_1 = {_RANDOM[1'h0][31:30], _RANDOM[1'h1][3:0]};
        io_perf_3_value_REG = _RANDOM[1'h1][9:4];
        io_perf_3_value_REG_1 = _RANDOM[1'h1][15:10];
        io_perf_4_value_REG = _RANDOM[1'h1][21:16];
        io_perf_4_value_REG_1 = _RANDOM[1'h1][27:22];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  HPerfCounter_8 perfEvents_hpc (
    .clock                   (clock),
    .io_hpm_event            (io_hpm_event_0),
    .io_events_sets_0_value  (io_events_sets_0_value),
    .io_events_sets_1_value  (io_events_sets_1_value),
    .io_events_sets_2_value  (io_events_sets_2_value),
    .io_events_sets_3_value  (io_events_sets_3_value),
    .io_events_sets_4_value  (io_events_sets_4_value),
    .io_events_sets_5_value  (io_events_sets_5_value),
    .io_events_sets_6_value  (io_events_sets_6_value),
    .io_events_sets_7_value  (io_events_sets_7_value),
    .io_events_sets_8_value  (io_events_sets_8_value),
    .io_events_sets_9_value  (io_events_sets_9_value),
    .io_events_sets_10_value (io_events_sets_10_value),
    .io_events_sets_11_value (io_events_sets_11_value),
    .io_perf_0_value         (_perfEvents_hpc_io_perf_0_value)
  );
  HPerfCounter_8 perfEvents_hpc_1 (
    .clock                   (clock),
    .io_hpm_event            (io_hpm_event_1),
    .io_events_sets_0_value  (io_events_sets_0_value),
    .io_events_sets_1_value  (io_events_sets_1_value),
    .io_events_sets_2_value  (io_events_sets_2_value),
    .io_events_sets_3_value  (io_events_sets_3_value),
    .io_events_sets_4_value  (io_events_sets_4_value),
    .io_events_sets_5_value  (io_events_sets_5_value),
    .io_events_sets_6_value  (io_events_sets_6_value),
    .io_events_sets_7_value  (io_events_sets_7_value),
    .io_events_sets_8_value  (io_events_sets_8_value),
    .io_events_sets_9_value  (io_events_sets_9_value),
    .io_events_sets_10_value (io_events_sets_10_value),
    .io_events_sets_11_value (io_events_sets_11_value),
    .io_perf_0_value         (_perfEvents_hpc_1_io_perf_0_value)
  );
  HPerfCounter_8 perfEvents_hpc_2 (
    .clock                   (clock),
    .io_hpm_event            (io_hpm_event_2),
    .io_events_sets_0_value  (io_events_sets_0_value),
    .io_events_sets_1_value  (io_events_sets_1_value),
    .io_events_sets_2_value  (io_events_sets_2_value),
    .io_events_sets_3_value  (io_events_sets_3_value),
    .io_events_sets_4_value  (io_events_sets_4_value),
    .io_events_sets_5_value  (io_events_sets_5_value),
    .io_events_sets_6_value  (io_events_sets_6_value),
    .io_events_sets_7_value  (io_events_sets_7_value),
    .io_events_sets_8_value  (io_events_sets_8_value),
    .io_events_sets_9_value  (io_events_sets_9_value),
    .io_events_sets_10_value (io_events_sets_10_value),
    .io_events_sets_11_value (io_events_sets_11_value),
    .io_perf_0_value         (_perfEvents_hpc_2_io_perf_0_value)
  );
  HPerfCounter_8 perfEvents_hpc_3 (
    .clock                   (clock),
    .io_hpm_event            (io_hpm_event_3),
    .io_events_sets_0_value  (io_events_sets_0_value),
    .io_events_sets_1_value  (io_events_sets_1_value),
    .io_events_sets_2_value  (io_events_sets_2_value),
    .io_events_sets_3_value  (io_events_sets_3_value),
    .io_events_sets_4_value  (io_events_sets_4_value),
    .io_events_sets_5_value  (io_events_sets_5_value),
    .io_events_sets_6_value  (io_events_sets_6_value),
    .io_events_sets_7_value  (io_events_sets_7_value),
    .io_events_sets_8_value  (io_events_sets_8_value),
    .io_events_sets_9_value  (io_events_sets_9_value),
    .io_events_sets_10_value (io_events_sets_10_value),
    .io_events_sets_11_value (io_events_sets_11_value),
    .io_perf_0_value         (_perfEvents_hpc_3_io_perf_0_value)
  );
  HPerfCounter_8 perfEvents_hpc_4 (
    .clock                   (clock),
    .io_hpm_event            (io_hpm_event_4),
    .io_events_sets_0_value  (io_events_sets_0_value),
    .io_events_sets_1_value  (io_events_sets_1_value),
    .io_events_sets_2_value  (io_events_sets_2_value),
    .io_events_sets_3_value  (io_events_sets_3_value),
    .io_events_sets_4_value  (io_events_sets_4_value),
    .io_events_sets_5_value  (io_events_sets_5_value),
    .io_events_sets_6_value  (io_events_sets_6_value),
    .io_events_sets_7_value  (io_events_sets_7_value),
    .io_events_sets_8_value  (io_events_sets_8_value),
    .io_events_sets_9_value  (io_events_sets_9_value),
    .io_events_sets_10_value (io_events_sets_10_value),
    .io_events_sets_11_value (io_events_sets_11_value),
    .io_perf_0_value         (_perfEvents_hpc_4_io_perf_0_value)
  );
  assign io_perf_0_value = io_perf_0_value_REG_1;
  assign io_perf_1_value = io_perf_1_value_REG_1;
  assign io_perf_2_value = io_perf_2_value_REG_1;
  assign io_perf_3_value = io_perf_3_value_REG_1;
  assign io_perf_4_value = io_perf_4_value_REG_1;
endmodule

