// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SplittedSRAMTemplate_18(
  input        clock,
  input        reset,
  input        io_r_req_valid,
  input  [8:0] io_r_req_bits_setIdx,
  output [1:0] io_r_resp_data_0,
  output [1:0] io_r_resp_data_1,
  output [1:0] io_r_resp_data_2,
  output [1:0] io_r_resp_data_3,
  output [1:0] io_r_resp_data_4,
  output [1:0] io_r_resp_data_5,
  output [1:0] io_r_resp_data_6,
  output [1:0] io_r_resp_data_7,
  input        io_w_req_valid,
  input  [8:0] io_w_req_bits_setIdx,
  input  [1:0] io_w_req_bits_data_0,
  input  [1:0] io_w_req_bits_data_1,
  input  [1:0] io_w_req_bits_data_2,
  input  [1:0] io_w_req_bits_data_3,
  input  [1:0] io_w_req_bits_data_4,
  input  [1:0] io_w_req_bits_data_5,
  input  [1:0] io_w_req_bits_data_6,
  input  [1:0] io_w_req_bits_data_7,
  input  [7:0] io_w_req_bits_waymask
);

  wire [1:0] _array_1_0_0_io_r_resp_data_0;
  wire [1:0] _array_1_0_0_io_r_resp_data_1;
  wire [1:0] _array_1_0_0_io_r_resp_data_2;
  wire [1:0] _array_1_0_0_io_r_resp_data_3;
  wire [1:0] _array_1_0_0_io_r_resp_data_4;
  wire [1:0] _array_1_0_0_io_r_resp_data_5;
  wire [1:0] _array_1_0_0_io_r_resp_data_6;
  wire [1:0] _array_1_0_0_io_r_resp_data_7;
  wire [1:0] _array_0_0_0_io_r_resp_data_0;
  wire [1:0] _array_0_0_0_io_r_resp_data_1;
  wire [1:0] _array_0_0_0_io_r_resp_data_2;
  wire [1:0] _array_0_0_0_io_r_resp_data_3;
  wire [1:0] _array_0_0_0_io_r_resp_data_4;
  wire [1:0] _array_0_0_0_io_r_resp_data_5;
  wire [1:0] _array_0_0_0_io_r_resp_data_6;
  wire [1:0] _array_0_0_0_io_r_resp_data_7;
  reg        ren_vec_1_0;
  reg        ren_vec_1_1;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ren_vec_1_0 <= 1'h0;
      ren_vec_1_1 <= 1'h0;
    end
    else if (io_r_req_valid) begin
      ren_vec_1_0 <= ~(io_r_req_bits_setIdx[0]);
      ren_vec_1_1 <= io_r_req_bits_setIdx[0];
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        ren_vec_1_0 = _RANDOM[/*Zero width*/ 1'b0][0];
        ren_vec_1_1 = _RANDOM[/*Zero width*/ 1'b0][1];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        ren_vec_1_0 = 1'h0;
        ren_vec_1_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SRAMTemplate_59 array_0_0_0 (
    .clock                 (clock),
    .reset                 (reset),
    .io_r_req_valid        (io_r_req_valid & ~(io_r_req_bits_setIdx[0])),
    .io_r_req_bits_setIdx  (io_r_req_bits_setIdx[8:1]),
    .io_r_resp_data_0      (_array_0_0_0_io_r_resp_data_0),
    .io_r_resp_data_1      (_array_0_0_0_io_r_resp_data_1),
    .io_r_resp_data_2      (_array_0_0_0_io_r_resp_data_2),
    .io_r_resp_data_3      (_array_0_0_0_io_r_resp_data_3),
    .io_r_resp_data_4      (_array_0_0_0_io_r_resp_data_4),
    .io_r_resp_data_5      (_array_0_0_0_io_r_resp_data_5),
    .io_r_resp_data_6      (_array_0_0_0_io_r_resp_data_6),
    .io_r_resp_data_7      (_array_0_0_0_io_r_resp_data_7),
    .io_w_req_valid        (io_w_req_valid & ~(io_w_req_bits_setIdx[0])),
    .io_w_req_bits_setIdx  (io_w_req_bits_setIdx[8:1]),
    .io_w_req_bits_data_0  (io_w_req_bits_data_0),
    .io_w_req_bits_data_1  (io_w_req_bits_data_1),
    .io_w_req_bits_data_2  (io_w_req_bits_data_2),
    .io_w_req_bits_data_3  (io_w_req_bits_data_3),
    .io_w_req_bits_data_4  (io_w_req_bits_data_4),
    .io_w_req_bits_data_5  (io_w_req_bits_data_5),
    .io_w_req_bits_data_6  (io_w_req_bits_data_6),
    .io_w_req_bits_data_7  (io_w_req_bits_data_7),
    .io_w_req_bits_waymask (io_w_req_bits_waymask)
  );
  SRAMTemplate_59 array_1_0_0 (
    .clock                 (clock),
    .reset                 (reset),
    .io_r_req_valid        (io_r_req_valid & io_r_req_bits_setIdx[0]),
    .io_r_req_bits_setIdx  (io_r_req_bits_setIdx[8:1]),
    .io_r_resp_data_0      (_array_1_0_0_io_r_resp_data_0),
    .io_r_resp_data_1      (_array_1_0_0_io_r_resp_data_1),
    .io_r_resp_data_2      (_array_1_0_0_io_r_resp_data_2),
    .io_r_resp_data_3      (_array_1_0_0_io_r_resp_data_3),
    .io_r_resp_data_4      (_array_1_0_0_io_r_resp_data_4),
    .io_r_resp_data_5      (_array_1_0_0_io_r_resp_data_5),
    .io_r_resp_data_6      (_array_1_0_0_io_r_resp_data_6),
    .io_r_resp_data_7      (_array_1_0_0_io_r_resp_data_7),
    .io_w_req_valid        (io_w_req_valid & io_w_req_bits_setIdx[0]),
    .io_w_req_bits_setIdx  (io_w_req_bits_setIdx[8:1]),
    .io_w_req_bits_data_0  (io_w_req_bits_data_0),
    .io_w_req_bits_data_1  (io_w_req_bits_data_1),
    .io_w_req_bits_data_2  (io_w_req_bits_data_2),
    .io_w_req_bits_data_3  (io_w_req_bits_data_3),
    .io_w_req_bits_data_4  (io_w_req_bits_data_4),
    .io_w_req_bits_data_5  (io_w_req_bits_data_5),
    .io_w_req_bits_data_6  (io_w_req_bits_data_6),
    .io_w_req_bits_data_7  (io_w_req_bits_data_7),
    .io_w_req_bits_waymask (io_w_req_bits_waymask)
  );
  assign io_r_resp_data_0 =
    (ren_vec_1_0 ? _array_0_0_0_io_r_resp_data_0 : 2'h0)
    | (ren_vec_1_1 ? _array_1_0_0_io_r_resp_data_0 : 2'h0);
  assign io_r_resp_data_1 =
    (ren_vec_1_0 ? _array_0_0_0_io_r_resp_data_1 : 2'h0)
    | (ren_vec_1_1 ? _array_1_0_0_io_r_resp_data_1 : 2'h0);
  assign io_r_resp_data_2 =
    (ren_vec_1_0 ? _array_0_0_0_io_r_resp_data_2 : 2'h0)
    | (ren_vec_1_1 ? _array_1_0_0_io_r_resp_data_2 : 2'h0);
  assign io_r_resp_data_3 =
    (ren_vec_1_0 ? _array_0_0_0_io_r_resp_data_3 : 2'h0)
    | (ren_vec_1_1 ? _array_1_0_0_io_r_resp_data_3 : 2'h0);
  assign io_r_resp_data_4 =
    (ren_vec_1_0 ? _array_0_0_0_io_r_resp_data_4 : 2'h0)
    | (ren_vec_1_1 ? _array_1_0_0_io_r_resp_data_4 : 2'h0);
  assign io_r_resp_data_5 =
    (ren_vec_1_0 ? _array_0_0_0_io_r_resp_data_5 : 2'h0)
    | (ren_vec_1_1 ? _array_1_0_0_io_r_resp_data_5 : 2'h0);
  assign io_r_resp_data_6 =
    (ren_vec_1_0 ? _array_0_0_0_io_r_resp_data_6 : 2'h0)
    | (ren_vec_1_1 ? _array_1_0_0_io_r_resp_data_6 : 2'h0);
  assign io_r_resp_data_7 =
    (ren_vec_1_0 ? _array_0_0_0_io_r_resp_data_7 : 2'h0)
    | (ren_vec_1_1 ? _array_1_0_0_io_r_resp_data_7 : 2'h0);
endmodule

