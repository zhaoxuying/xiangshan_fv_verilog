// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SyncDataModuleTemplate__8entry(
  input         clock,
  input         reset,
  input         io_ren_0,
  input         io_ren_1,
  input         io_ren_2,
  input  [2:0]  io_raddr_0,
  input  [2:0]  io_raddr_1,
  input  [2:0]  io_raddr_2,
  output [5:0]  io_rdata_0_histPtr_value,
  output [2:0]  io_rdata_0_ssp,
  output [2:0]  io_rdata_0_sctr,
  output        io_rdata_0_TOSW_flag,
  output [3:0]  io_rdata_0_TOSW_value,
  output        io_rdata_0_TOSR_flag,
  output [3:0]  io_rdata_0_TOSR_value,
  output        io_rdata_0_NOS_flag,
  output [3:0]  io_rdata_0_NOS_value,
  output [49:0] io_rdata_0_topAddr,
  output [5:0]  io_rdata_1_histPtr_value,
  output [2:0]  io_rdata_1_ssp,
  output [2:0]  io_rdata_1_sctr,
  output        io_rdata_1_TOSW_flag,
  output [3:0]  io_rdata_1_TOSW_value,
  output        io_rdata_1_TOSR_flag,
  output [3:0]  io_rdata_1_TOSR_value,
  output        io_rdata_1_NOS_flag,
  output [3:0]  io_rdata_1_NOS_value,
  output [5:0]  io_rdata_2_histPtr_value,
  input         io_wen_0,
  input  [2:0]  io_waddr_0,
  input  [5:0]  io_wdata_0_histPtr_value,
  input  [2:0]  io_wdata_0_ssp,
  input  [2:0]  io_wdata_0_sctr,
  input         io_wdata_0_TOSW_flag,
  input  [3:0]  io_wdata_0_TOSW_value,
  input         io_wdata_0_TOSR_flag,
  input  [3:0]  io_wdata_0_TOSR_value,
  input         io_wdata_0_NOS_flag,
  input  [3:0]  io_wdata_0_NOS_value,
  input  [49:0] io_wdata_0_topAddr
);

  reg [2:0]  raddr_dup_0;
  reg [2:0]  raddr_dup_1;
  reg [2:0]  raddr_dup_2;
  reg        wen_dup_last_REG;
  reg [2:0]  waddr_dup_0;
  reg [5:0]  r_histPtr_value;
  reg [2:0]  r_ssp;
  reg [2:0]  r_sctr;
  reg        r_TOSW_flag;
  reg [3:0]  r_TOSW_value;
  reg        r_TOSR_flag;
  reg [3:0]  r_TOSR_value;
  reg        r_NOS_flag;
  reg [3:0]  r_NOS_value;
  reg [49:0] r_topAddr;
  always @(posedge clock) begin
    if (io_ren_0)
      raddr_dup_0 <= io_raddr_0;
    if (io_ren_1)
      raddr_dup_1 <= io_raddr_1;
    if (io_ren_2)
      raddr_dup_2 <= io_raddr_2;
    if (io_wen_0) begin
      waddr_dup_0 <= io_waddr_0;
      r_histPtr_value <= io_wdata_0_histPtr_value;
      r_ssp <= io_wdata_0_ssp;
      r_sctr <= io_wdata_0_sctr;
      r_TOSW_flag <= io_wdata_0_TOSW_flag;
      r_TOSW_value <= io_wdata_0_TOSW_value;
      r_TOSR_flag <= io_wdata_0_TOSR_flag;
      r_TOSR_value <= io_wdata_0_TOSR_value;
      r_NOS_flag <= io_wdata_0_NOS_flag;
      r_NOS_value <= io_wdata_0_NOS_value;
      r_topAddr <= io_wdata_0_topAddr;
    end
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      wen_dup_last_REG <= 1'h0;
    else
      wen_dup_last_REG <= io_wen_0;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        raddr_dup_0 = _RANDOM[2'h0][2:0];
        raddr_dup_1 = _RANDOM[2'h0][5:3];
        raddr_dup_2 = _RANDOM[2'h0][8:6];
        wen_dup_last_REG = _RANDOM[2'h0][9];
        waddr_dup_0 = _RANDOM[2'h0][12:10];
        r_histPtr_value = _RANDOM[2'h0][19:14];
        r_ssp = _RANDOM[2'h0][22:20];
        r_sctr = _RANDOM[2'h0][25:23];
        r_TOSW_flag = _RANDOM[2'h0][26];
        r_TOSW_value = _RANDOM[2'h0][30:27];
        r_TOSR_flag = _RANDOM[2'h0][31];
        r_TOSR_value = _RANDOM[2'h1][3:0];
        r_NOS_flag = _RANDOM[2'h1][4];
        r_NOS_value = _RANDOM[2'h1][8:5];
        r_topAddr = {_RANDOM[2'h1][31:9], _RANDOM[2'h2][26:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        wen_dup_last_REG = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DataModule__8entry dataBanks_0 (
    .clock                    (clock),
    .io_raddr_0               (raddr_dup_0),
    .io_raddr_1               (raddr_dup_1),
    .io_raddr_2               (raddr_dup_2),
    .io_rdata_0_histPtr_value (io_rdata_0_histPtr_value),
    .io_rdata_0_ssp           (io_rdata_0_ssp),
    .io_rdata_0_sctr          (io_rdata_0_sctr),
    .io_rdata_0_TOSW_flag     (io_rdata_0_TOSW_flag),
    .io_rdata_0_TOSW_value    (io_rdata_0_TOSW_value),
    .io_rdata_0_TOSR_flag     (io_rdata_0_TOSR_flag),
    .io_rdata_0_TOSR_value    (io_rdata_0_TOSR_value),
    .io_rdata_0_NOS_flag      (io_rdata_0_NOS_flag),
    .io_rdata_0_NOS_value     (io_rdata_0_NOS_value),
    .io_rdata_0_topAddr       (io_rdata_0_topAddr),
    .io_rdata_1_histPtr_value (io_rdata_1_histPtr_value),
    .io_rdata_1_ssp           (io_rdata_1_ssp),
    .io_rdata_1_sctr          (io_rdata_1_sctr),
    .io_rdata_1_TOSW_flag     (io_rdata_1_TOSW_flag),
    .io_rdata_1_TOSW_value    (io_rdata_1_TOSW_value),
    .io_rdata_1_TOSR_flag     (io_rdata_1_TOSR_flag),
    .io_rdata_1_TOSR_value    (io_rdata_1_TOSR_value),
    .io_rdata_1_NOS_flag      (io_rdata_1_NOS_flag),
    .io_rdata_1_NOS_value     (io_rdata_1_NOS_value),
    .io_rdata_2_histPtr_value (io_rdata_2_histPtr_value),
    .io_wen_0                 (wen_dup_last_REG),
    .io_waddr_0               (waddr_dup_0),
    .io_wdata_0_histPtr_value (r_histPtr_value),
    .io_wdata_0_ssp           (r_ssp),
    .io_wdata_0_sctr          (r_sctr),
    .io_wdata_0_TOSW_flag     (r_TOSW_flag),
    .io_wdata_0_TOSW_value    (r_TOSW_value),
    .io_wdata_0_TOSR_flag     (r_TOSR_flag),
    .io_wdata_0_TOSR_value    (r_TOSR_value),
    .io_wdata_0_NOS_flag      (r_NOS_flag),
    .io_wdata_0_NOS_value     (r_NOS_value),
    .io_wdata_0_topAddr       (r_topAddr)
  );
endmodule

