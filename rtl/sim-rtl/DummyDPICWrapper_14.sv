// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DummyDPICWrapper_14(
  input        clock,
  input [63:0] io_bits_privilegeMode,
  input [63:0] io_bits_mstatus,
  input [63:0] io_bits_sstatus,
  input [63:0] io_bits_mepc,
  input [63:0] io_bits_sepc,
  input [63:0] io_bits_mtval,
  input [63:0] io_bits_stval,
  input [63:0] io_bits_mtvec,
  input [63:0] io_bits_stvec,
  input [63:0] io_bits_mcause,
  input [63:0] io_bits_scause,
  input [63:0] io_bits_satp,
  input [63:0] io_bits_mip,
  input [63:0] io_bits_mie,
  input [63:0] io_bits_mscratch,
  input [63:0] io_bits_sscratch,
  input [63:0] io_bits_mideleg,
  input [63:0] io_bits_medeleg,
  input [7:0]  io_bits_coreid
);

  DiffExtCSRState dpic (
    .clock            (clock),
    .enable           (1'h1),
    .io_privilegeMode (io_bits_privilegeMode),
    .io_mstatus       (io_bits_mstatus),
    .io_sstatus       (io_bits_sstatus),
    .io_mepc          (io_bits_mepc),
    .io_sepc          (io_bits_sepc),
    .io_mtval         (io_bits_mtval),
    .io_stval         (io_bits_stval),
    .io_mtvec         (io_bits_mtvec),
    .io_stvec         (io_bits_stvec),
    .io_mcause        (io_bits_mcause),
    .io_scause        (io_bits_scause),
    .io_satp          (io_bits_satp),
    .io_mip           (io_bits_mip),
    .io_mie           (io_bits_mie),
    .io_mscratch      (io_bits_mscratch),
    .io_sscratch      (io_bits_sscratch),
    .io_mideleg       (io_bits_mideleg),
    .io_medeleg       (io_bits_medeleg),
    .io_coreid        (io_bits_coreid)
  );
endmodule

