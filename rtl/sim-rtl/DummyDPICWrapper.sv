// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DummyDPICWrapper(
  input       clock,
  input       io_valid,
  input       io_bits_valid,
  input       io_bits_skip,
  input       io_bits_isRVC,
  input       io_bits_rfwen,
  input       io_bits_fpwen,
  input       io_bits_vecwen,
  input       io_bits_v0wen,
  input [7:0] io_bits_wpdest,
  input [7:0] io_bits_wdest,
  input [7:0] io_bits_otherwpdest_0,
  input [7:0] io_bits_otherwpdest_1,
  input [7:0] io_bits_otherwpdest_2,
  input [7:0] io_bits_otherwpdest_3,
  input [7:0] io_bits_otherwpdest_4,
  input [7:0] io_bits_otherwpdest_5,
  input [7:0] io_bits_otherwpdest_6,
  input [7:0] io_bits_otherwpdest_7,
  input [7:0] io_bits_nFused,
  input [7:0] io_bits_coreid,
  input [7:0] io_bits_index
);

  DiffExtInstrCommit dpic (
    .clock            (clock),
    .enable           (io_valid),
    .io_valid         (io_bits_valid),
    .io_skip          (io_bits_skip),
    .io_isRVC         (io_bits_isRVC),
    .io_rfwen         (io_bits_rfwen),
    .io_fpwen         (io_bits_fpwen),
    .io_vecwen        (io_bits_vecwen),
    .io_v0wen         (io_bits_v0wen),
    .io_wpdest        (io_bits_wpdest),
    .io_wdest         (io_bits_wdest),
    .io_otherwpdest_0 (io_bits_otherwpdest_0),
    .io_otherwpdest_1 (io_bits_otherwpdest_1),
    .io_otherwpdest_2 (io_bits_otherwpdest_2),
    .io_otherwpdest_3 (io_bits_otherwpdest_3),
    .io_otherwpdest_4 (io_bits_otherwpdest_4),
    .io_otherwpdest_5 (io_bits_otherwpdest_5),
    .io_otherwpdest_6 (io_bits_otherwpdest_6),
    .io_otherwpdest_7 (io_bits_otherwpdest_7),
    .io_otherV0Wen_0  (1'h0),
    .io_otherV0Wen_1  (1'h0),
    .io_otherV0Wen_2  (1'h0),
    .io_otherV0Wen_3  (1'h0),
    .io_otherV0Wen_4  (1'h0),
    .io_otherV0Wen_5  (1'h0),
    .io_otherV0Wen_6  (1'h0),
    .io_otherV0Wen_7  (1'h0),
    .io_pc            (64'h0),
    .io_instr         (32'h0),
    .io_robIdx        (10'h0),
    .io_lqIdx         (7'h0),
    .io_sqIdx         (7'h0),
    .io_isLoad        (1'h0),
    .io_isStore       (1'h0),
    .io_nFused        (io_bits_nFused),
    .io_special       (8'h0),
    .io_coreid        (io_bits_coreid),
    .io_index         (io_bits_index)
  );
endmodule

