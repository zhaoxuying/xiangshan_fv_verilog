// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module NewPipelineConnectPipe_32(
  input        clock,
  input        reset,
  output       io_in_ready,
  input        io_in_valid,
  input        io_in_bits_uop_exceptionVec_0,
  input        io_in_bits_uop_exceptionVec_1,
  input        io_in_bits_uop_exceptionVec_2,
  input        io_in_bits_uop_exceptionVec_3,
  input        io_in_bits_uop_exceptionVec_4,
  input        io_in_bits_uop_exceptionVec_5,
  input        io_in_bits_uop_exceptionVec_6,
  input        io_in_bits_uop_exceptionVec_7,
  input        io_in_bits_uop_exceptionVec_8,
  input        io_in_bits_uop_exceptionVec_9,
  input        io_in_bits_uop_exceptionVec_10,
  input        io_in_bits_uop_exceptionVec_11,
  input        io_in_bits_uop_exceptionVec_12,
  input        io_in_bits_uop_exceptionVec_13,
  input        io_in_bits_uop_exceptionVec_14,
  input        io_in_bits_uop_exceptionVec_15,
  input        io_in_bits_uop_exceptionVec_16,
  input        io_in_bits_uop_exceptionVec_17,
  input        io_in_bits_uop_exceptionVec_18,
  input        io_in_bits_uop_exceptionVec_19,
  input        io_in_bits_uop_exceptionVec_20,
  input        io_in_bits_uop_exceptionVec_21,
  input        io_in_bits_uop_exceptionVec_22,
  input        io_in_bits_uop_exceptionVec_23,
  input  [3:0] io_in_bits_uop_trigger,
  input        io_in_bits_uop_flushPipe,
  input        io_in_bits_uop_robIdx_flag,
  input  [5:0] io_in_bits_uop_robIdx_value,
  input        io_in_bits_debug_isMMIO,
  input        io_out_ready,
  output       io_out_valid,
  output       io_out_bits_uop_exceptionVec_0,
  output       io_out_bits_uop_exceptionVec_1,
  output       io_out_bits_uop_exceptionVec_2,
  output       io_out_bits_uop_exceptionVec_3,
  output       io_out_bits_uop_exceptionVec_4,
  output       io_out_bits_uop_exceptionVec_5,
  output       io_out_bits_uop_exceptionVec_6,
  output       io_out_bits_uop_exceptionVec_7,
  output       io_out_bits_uop_exceptionVec_8,
  output       io_out_bits_uop_exceptionVec_9,
  output       io_out_bits_uop_exceptionVec_10,
  output       io_out_bits_uop_exceptionVec_11,
  output       io_out_bits_uop_exceptionVec_12,
  output       io_out_bits_uop_exceptionVec_13,
  output       io_out_bits_uop_exceptionVec_14,
  output       io_out_bits_uop_exceptionVec_15,
  output       io_out_bits_uop_exceptionVec_16,
  output       io_out_bits_uop_exceptionVec_17,
  output       io_out_bits_uop_exceptionVec_18,
  output       io_out_bits_uop_exceptionVec_19,
  output       io_out_bits_uop_exceptionVec_20,
  output       io_out_bits_uop_exceptionVec_21,
  output       io_out_bits_uop_exceptionVec_22,
  output       io_out_bits_uop_exceptionVec_23,
  output [3:0] io_out_bits_uop_trigger,
  output       io_out_bits_uop_flushPipe,
  output       io_out_bits_uop_robIdx_flag,
  output [5:0] io_out_bits_uop_robIdx_value,
  output       io_out_bits_debug_isMMIO,
  input        io_rightOutFire
);

  reg        valid;
  wire       io_in_ready_0 = io_out_ready | ~valid;
  wire       _data_T = io_in_ready_0 & io_in_valid;
  reg        data_uop_exceptionVec_0;
  reg        data_uop_exceptionVec_1;
  reg        data_uop_exceptionVec_2;
  reg        data_uop_exceptionVec_3;
  reg        data_uop_exceptionVec_4;
  reg        data_uop_exceptionVec_5;
  reg        data_uop_exceptionVec_6;
  reg        data_uop_exceptionVec_7;
  reg        data_uop_exceptionVec_8;
  reg        data_uop_exceptionVec_9;
  reg        data_uop_exceptionVec_10;
  reg        data_uop_exceptionVec_11;
  reg        data_uop_exceptionVec_12;
  reg        data_uop_exceptionVec_13;
  reg        data_uop_exceptionVec_14;
  reg        data_uop_exceptionVec_15;
  reg        data_uop_exceptionVec_16;
  reg        data_uop_exceptionVec_17;
  reg        data_uop_exceptionVec_18;
  reg        data_uop_exceptionVec_19;
  reg        data_uop_exceptionVec_20;
  reg        data_uop_exceptionVec_21;
  reg        data_uop_exceptionVec_22;
  reg        data_uop_exceptionVec_23;
  reg  [3:0] data_uop_trigger;
  reg        data_uop_flushPipe;
  reg        data_uop_robIdx_flag;
  reg  [5:0] data_uop_robIdx_value;
  reg        data_debug_isMMIO;
  always @(posedge clock or posedge reset) begin
    if (reset)
      valid <= 1'h0;
    else
      valid <= _data_T | ~io_rightOutFire & valid;
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_data_T) begin
      data_uop_exceptionVec_0 <= io_in_bits_uop_exceptionVec_0;
      data_uop_exceptionVec_1 <= io_in_bits_uop_exceptionVec_1;
      data_uop_exceptionVec_2 <= io_in_bits_uop_exceptionVec_2;
      data_uop_exceptionVec_3 <= io_in_bits_uop_exceptionVec_3;
      data_uop_exceptionVec_4 <= io_in_bits_uop_exceptionVec_4;
      data_uop_exceptionVec_5 <= io_in_bits_uop_exceptionVec_5;
      data_uop_exceptionVec_6 <= io_in_bits_uop_exceptionVec_6;
      data_uop_exceptionVec_7 <= io_in_bits_uop_exceptionVec_7;
      data_uop_exceptionVec_8 <= io_in_bits_uop_exceptionVec_8;
      data_uop_exceptionVec_9 <= io_in_bits_uop_exceptionVec_9;
      data_uop_exceptionVec_10 <= io_in_bits_uop_exceptionVec_10;
      data_uop_exceptionVec_11 <= io_in_bits_uop_exceptionVec_11;
      data_uop_exceptionVec_12 <= io_in_bits_uop_exceptionVec_12;
      data_uop_exceptionVec_13 <= io_in_bits_uop_exceptionVec_13;
      data_uop_exceptionVec_14 <= io_in_bits_uop_exceptionVec_14;
      data_uop_exceptionVec_15 <= io_in_bits_uop_exceptionVec_15;
      data_uop_exceptionVec_16 <= io_in_bits_uop_exceptionVec_16;
      data_uop_exceptionVec_17 <= io_in_bits_uop_exceptionVec_17;
      data_uop_exceptionVec_18 <= io_in_bits_uop_exceptionVec_18;
      data_uop_exceptionVec_19 <= io_in_bits_uop_exceptionVec_19;
      data_uop_exceptionVec_20 <= io_in_bits_uop_exceptionVec_20;
      data_uop_exceptionVec_21 <= io_in_bits_uop_exceptionVec_21;
      data_uop_exceptionVec_22 <= io_in_bits_uop_exceptionVec_22;
      data_uop_exceptionVec_23 <= io_in_bits_uop_exceptionVec_23;
      data_uop_trigger <= io_in_bits_uop_trigger;
      data_uop_flushPipe <= io_in_bits_uop_flushPipe;
      data_uop_robIdx_flag <= io_in_bits_uop_robIdx_flag;
      data_uop_robIdx_value <= io_in_bits_uop_robIdx_value;
      data_debug_isMMIO <= io_in_bits_debug_isMMIO;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:42];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h2B; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        valid = _RANDOM[6'h0][0];
        data_uop_exceptionVec_0 = _RANDOM[6'h2][29];
        data_uop_exceptionVec_1 = _RANDOM[6'h2][30];
        data_uop_exceptionVec_2 = _RANDOM[6'h2][31];
        data_uop_exceptionVec_3 = _RANDOM[6'h3][0];
        data_uop_exceptionVec_4 = _RANDOM[6'h3][1];
        data_uop_exceptionVec_5 = _RANDOM[6'h3][2];
        data_uop_exceptionVec_6 = _RANDOM[6'h3][3];
        data_uop_exceptionVec_7 = _RANDOM[6'h3][4];
        data_uop_exceptionVec_8 = _RANDOM[6'h3][5];
        data_uop_exceptionVec_9 = _RANDOM[6'h3][6];
        data_uop_exceptionVec_10 = _RANDOM[6'h3][7];
        data_uop_exceptionVec_11 = _RANDOM[6'h3][8];
        data_uop_exceptionVec_12 = _RANDOM[6'h3][9];
        data_uop_exceptionVec_13 = _RANDOM[6'h3][10];
        data_uop_exceptionVec_14 = _RANDOM[6'h3][11];
        data_uop_exceptionVec_15 = _RANDOM[6'h3][12];
        data_uop_exceptionVec_16 = _RANDOM[6'h3][13];
        data_uop_exceptionVec_17 = _RANDOM[6'h3][14];
        data_uop_exceptionVec_18 = _RANDOM[6'h3][15];
        data_uop_exceptionVec_19 = _RANDOM[6'h3][16];
        data_uop_exceptionVec_20 = _RANDOM[6'h3][17];
        data_uop_exceptionVec_21 = _RANDOM[6'h3][18];
        data_uop_exceptionVec_22 = _RANDOM[6'h3][19];
        data_uop_exceptionVec_23 = _RANDOM[6'h3][20];
        data_uop_trigger = _RANDOM[6'h3][26:23];
        data_uop_flushPipe = _RANDOM[6'h6][25];
        data_uop_robIdx_flag = _RANDOM[6'h12][10];
        data_uop_robIdx_value = _RANDOM[6'h12][16:11];
        data_debug_isMMIO = _RANDOM[6'h2A][5];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        valid = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = io_in_ready_0;
  assign io_out_valid = valid;
  assign io_out_bits_uop_exceptionVec_0 = data_uop_exceptionVec_0;
  assign io_out_bits_uop_exceptionVec_1 = data_uop_exceptionVec_1;
  assign io_out_bits_uop_exceptionVec_2 = data_uop_exceptionVec_2;
  assign io_out_bits_uop_exceptionVec_3 = data_uop_exceptionVec_3;
  assign io_out_bits_uop_exceptionVec_4 = data_uop_exceptionVec_4;
  assign io_out_bits_uop_exceptionVec_5 = data_uop_exceptionVec_5;
  assign io_out_bits_uop_exceptionVec_6 = data_uop_exceptionVec_6;
  assign io_out_bits_uop_exceptionVec_7 = data_uop_exceptionVec_7;
  assign io_out_bits_uop_exceptionVec_8 = data_uop_exceptionVec_8;
  assign io_out_bits_uop_exceptionVec_9 = data_uop_exceptionVec_9;
  assign io_out_bits_uop_exceptionVec_10 = data_uop_exceptionVec_10;
  assign io_out_bits_uop_exceptionVec_11 = data_uop_exceptionVec_11;
  assign io_out_bits_uop_exceptionVec_12 = data_uop_exceptionVec_12;
  assign io_out_bits_uop_exceptionVec_13 = data_uop_exceptionVec_13;
  assign io_out_bits_uop_exceptionVec_14 = data_uop_exceptionVec_14;
  assign io_out_bits_uop_exceptionVec_15 = data_uop_exceptionVec_15;
  assign io_out_bits_uop_exceptionVec_16 = data_uop_exceptionVec_16;
  assign io_out_bits_uop_exceptionVec_17 = data_uop_exceptionVec_17;
  assign io_out_bits_uop_exceptionVec_18 = data_uop_exceptionVec_18;
  assign io_out_bits_uop_exceptionVec_19 = data_uop_exceptionVec_19;
  assign io_out_bits_uop_exceptionVec_20 = data_uop_exceptionVec_20;
  assign io_out_bits_uop_exceptionVec_21 = data_uop_exceptionVec_21;
  assign io_out_bits_uop_exceptionVec_22 = data_uop_exceptionVec_22;
  assign io_out_bits_uop_exceptionVec_23 = data_uop_exceptionVec_23;
  assign io_out_bits_uop_trigger = data_uop_trigger;
  assign io_out_bits_uop_flushPipe = data_uop_flushPipe;
  assign io_out_bits_uop_robIdx_flag = data_uop_robIdx_flag;
  assign io_out_bits_uop_robIdx_value = data_uop_robIdx_value;
  assign io_out_bits_debug_isMMIO = data_debug_isMMIO;
endmodule

