// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SRAMTemplate_66(
  input         clock,
  input         reset,
  input         io_r_req_valid,
  input  [2:0]  io_r_req_bits_setIdx,
  output [79:0] io_r_resp_data_0,
  input         io_w_req_valid,
  input  [2:0]  io_w_req_bits_setIdx,
  input  [79:0] io_w_req_bits_data_0
);

  wire [79:0] _array_R0_data;
  wire        _wcg_out_clock;
  wire        _rcg_out_clock;
  wire        conflictEarlyS0 = io_r_req_valid & io_w_req_valid;
  reg         conflictEarlyS1;
  reg  [2:0]  conflictRaddrS1;
  reg  [2:0]  conflictWaddrS1;
  reg  [63:0] randomData_lfsr;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      conflictEarlyS1 <= 1'h0;
      randomData_lfsr <= 64'h44DF4BA02B26AEC8;
    end
    else begin
      conflictEarlyS1 <= conflictEarlyS0;
      if (io_r_req_valid) begin
        if (randomData_lfsr == 64'h0)
          randomData_lfsr <= 64'h1;
        else
          randomData_lfsr <=
            {randomData_lfsr[0] ^ randomData_lfsr[1] ^ randomData_lfsr[3]
               ^ randomData_lfsr[4],
             randomData_lfsr[63:1]};
      end
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (io_r_req_valid)
      conflictRaddrS1 <= io_r_req_bits_setIdx;
    if (conflictEarlyS0)
      conflictWaddrS1 <= io_w_req_bits_setIdx;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        conflictEarlyS1 = _RANDOM[3'h0][0];
        conflictRaddrS1 = _RANDOM[3'h0][3:1];
        conflictWaddrS1 = _RANDOM[3'h0][6:4];
        randomData_lfsr = {_RANDOM[3'h2][31:25], _RANDOM[3'h3], _RANDOM[3'h4][24:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        conflictEarlyS1 = 1'h0;
        randomData_lfsr = 64'h44DF4BA02B26AEC8;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  MbistClockGateCell rcg (
    .clock     (clock),
    .E         (io_r_req_valid),
    .out_clock (_rcg_out_clock)
  );
  MbistClockGateCell wcg (
    .clock     (clock),
    .E         (io_w_req_valid),
    .out_clock (_wcg_out_clock)
  );
  sram_array_2p8x80m80s1h0l1_ftq array (
    .R0_clk  (_rcg_out_clock),
    .R0_addr (io_r_req_bits_setIdx),
    .R0_en   (io_r_req_valid),
    .R0_data (_array_R0_data),
    .W0_clk  (_wcg_out_clock),
    .W0_addr (io_w_req_bits_setIdx),
    .W0_en   (io_w_req_valid),
    .W0_data (io_w_req_bits_data_0)
  );
  assign io_r_resp_data_0 =
    conflictEarlyS1 & conflictRaddrS1 == conflictWaddrS1
      ? {16'h0, randomData_lfsr}
      : _array_R0_data;
endmodule

