// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module AXI4UART(
  input         clock,
  input         reset,
  output        auto_in_aw_ready,
  input         auto_in_aw_valid,
  input  [1:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  output        auto_in_w_ready,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
  input         auto_in_b_ready,
  output        auto_in_b_valid,
  output [1:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
  input         auto_in_ar_valid,
  input  [1:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input         auto_in_r_ready,
  output        auto_in_r_valid,
  output [1:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last,
  output        io_extra_out_valid,
  output [7:0]  io_extra_out_ch,
  output        io_extra_in_valid,
  input  [7:0]  io_extra_in_ch
);

  reg  [1:0]  state;
  wire        nodeIn_aw_valid = auto_in_aw_valid;
  wire [1:0]  nodeIn_aw_bits_id = auto_in_aw_bits_id;
  wire [30:0] nodeIn_aw_bits_addr = auto_in_aw_bits_addr;
  wire [7:0]  nodeIn_aw_bits_len = auto_in_aw_bits_len;
  wire [2:0]  nodeIn_aw_bits_size = auto_in_aw_bits_size;
  wire [1:0]  nodeIn_aw_bits_burst = auto_in_aw_bits_burst;
  wire        nodeIn_aw_bits_lock = auto_in_aw_bits_lock;
  wire [3:0]  nodeIn_aw_bits_cache = auto_in_aw_bits_cache;
  wire [2:0]  nodeIn_aw_bits_prot = auto_in_aw_bits_prot;
  wire [3:0]  nodeIn_aw_bits_qos = auto_in_aw_bits_qos;
  wire        nodeIn_w_valid = auto_in_w_valid;
  wire [63:0] nodeIn_w_bits_data = auto_in_w_bits_data;
  wire [7:0]  nodeIn_w_bits_strb = auto_in_w_bits_strb;
  wire        nodeIn_w_bits_last = auto_in_w_bits_last;
  wire        nodeIn_b_ready = auto_in_b_ready;
  wire        nodeIn_ar_valid = auto_in_ar_valid;
  wire [1:0]  nodeIn_ar_bits_id = auto_in_ar_bits_id;
  wire [30:0] nodeIn_ar_bits_addr = auto_in_ar_bits_addr;
  wire [7:0]  nodeIn_ar_bits_len = auto_in_ar_bits_len;
  wire [2:0]  nodeIn_ar_bits_size = auto_in_ar_bits_size;
  wire [1:0]  nodeIn_ar_bits_burst = auto_in_ar_bits_burst;
  wire        nodeIn_ar_bits_lock = auto_in_ar_bits_lock;
  wire [3:0]  nodeIn_ar_bits_cache = auto_in_ar_bits_cache;
  wire [2:0]  nodeIn_ar_bits_prot = auto_in_ar_bits_prot;
  wire [3:0]  nodeIn_ar_bits_qos = auto_in_ar_bits_qos;
  wire        nodeIn_r_ready = auto_in_r_ready;
  wire [1:0]  nodeIn_b_bits_resp = 2'h0;
  wire [1:0]  nodeIn_r_bits_resp = 2'h0;
  wire        nodeIn_ar_ready = ~(|state);
  wire        _nodeIn_r_bits_user_T = nodeIn_ar_ready & nodeIn_ar_valid;
  wire        nodeIn_aw_ready;
  wire        _nodeIn_b_bits_user_T = nodeIn_aw_ready & nodeIn_aw_valid;
  wire        nodeIn_w_ready;
  wire        _io_extra_out_valid_T_2 = nodeIn_w_ready & nodeIn_w_valid;
  wire        nodeIn_r_valid;
  wire        _io_extra_in_valid_T_2 = nodeIn_r_ready & nodeIn_r_valid;
  reg  [7:0]  readBeatCnt;
  reg  [7:0]  len_hold_data;
  reg  [30:0] raddr_hold_data;
  wire [3:0]  raddr =
    _nodeIn_r_bits_user_T ? nodeIn_ar_bits_addr[3:0] : raddr_hold_data[3:0];
  wire        nodeIn_r_bits_last =
    readBeatCnt == (_nodeIn_r_bits_user_T ? nodeIn_ar_bits_len : len_hold_data);
  assign nodeIn_r_valid = state == 2'h1;
  reg  [30:0] waddr_hold_data;
  wire [3:0]  waddr =
    _nodeIn_b_bits_user_T ? nodeIn_aw_bits_addr[3:0] : waddr_hold_data[3:0];
  assign nodeIn_aw_ready = ~(|state) & ~nodeIn_ar_valid;
  assign nodeIn_w_ready = state == 2'h2;
  wire        nodeIn_b_valid = &state;
  reg  [1:0]  nodeIn_b_bits_id_r;
  wire [1:0]  nodeIn_b_bits_id = nodeIn_b_bits_id_r;
  reg  [1:0]  nodeIn_r_bits_id_r;
  wire [1:0]  nodeIn_r_bits_id = nodeIn_r_bits_id_r;
  reg  [31:0] txfifo;
  reg  [31:0] stat;
  reg  [31:0] ctrl;
  wire [63:0] nodeIn_r_bits_data =
    {32'h0,
     {24'h0, (|raddr) ? 8'h0 : io_extra_in_ch} | (raddr == 4'h4 ? txfifo : 32'h0)
       | (raddr == 4'h8 ? stat : 32'h0) | (raddr == 4'hC ? ctrl : 32'h0)};
  wire [7:0]  _GEN = nodeIn_w_bits_strb >> waddr[2:0];
  wire [31:0] _GEN_0 = {{8{_GEN[3]}}, {8{_GEN[2]}}, {8{_GEN[1]}}, {8{_GEN[0]}}};
  wire [31:0] _GEN_1 = nodeIn_w_bits_data[31:0] & _GEN_0;
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
      readBeatCnt <= 8'h0;
      stat <= 32'h0;
      ctrl <= 32'h0;
    end
    else begin
      if (|state) begin
        if (state == 2'h1) begin
          if (_io_extra_in_valid_T_2 & nodeIn_r_bits_last)
            state <= 2'h0;
        end
        else if (state == 2'h2) begin
          if (_io_extra_out_valid_T_2 & nodeIn_w_bits_last)
            state <= 2'h3;
        end
        else if ((&state) & nodeIn_b_ready & nodeIn_b_valid)
          state <= 2'h0;
      end
      else if (_nodeIn_b_bits_user_T)
        state <= 2'h2;
      else if (_nodeIn_r_bits_user_T)
        state <= 2'h1;
      if (_io_extra_in_valid_T_2) begin
        if (nodeIn_r_bits_last)
          readBeatCnt <= 8'h0;
        else
          readBeatCnt <= 8'(readBeatCnt + 8'h1);
      end
      if (_io_extra_out_valid_T_2 & waddr == 4'h8)
        stat <= _GEN_1 | ~_GEN_0 & stat;
      if (_io_extra_out_valid_T_2 & waddr == 4'hC)
        ctrl <= _GEN_1 | ~_GEN_0 & ctrl;
    end
    if (_nodeIn_r_bits_user_T) begin
      len_hold_data <= nodeIn_ar_bits_len;
      raddr_hold_data <= nodeIn_ar_bits_addr;
      nodeIn_r_bits_id_r <= nodeIn_ar_bits_id;
    end
    if (_nodeIn_b_bits_user_T) begin
      waddr_hold_data <= nodeIn_aw_bits_addr;
      nodeIn_b_bits_id_r <= nodeIn_aw_bits_id;
    end
    if (_io_extra_out_valid_T_2 & waddr == 4'h4)
      txfifo <= _GEN_1 | ~_GEN_0 & txfifo;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:6];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h7; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        state = _RANDOM[3'h0][1:0];
        readBeatCnt = _RANDOM[3'h0][9:2];
        len_hold_data = _RANDOM[3'h0][17:10];
        raddr_hold_data = {_RANDOM[3'h0][31:18], _RANDOM[3'h1][16:0]};
        waddr_hold_data = {_RANDOM[3'h1][31:25], _RANDOM[3'h2][23:0]};
        nodeIn_b_bits_id_r = _RANDOM[3'h2][25:24];
        nodeIn_r_bits_id_r = _RANDOM[3'h2][27:26];
        txfifo = {_RANDOM[3'h3][31:28], _RANDOM[3'h4][27:0]};
        stat = {_RANDOM[3'h4][31:28], _RANDOM[3'h5][27:0]};
        ctrl = {_RANDOM[3'h5][31:28], _RANDOM[3'h6][27:0]};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_in_aw_ready = nodeIn_aw_ready;
  assign auto_in_w_ready = nodeIn_w_ready;
  assign auto_in_b_valid = nodeIn_b_valid;
  assign auto_in_b_bits_id = nodeIn_b_bits_id;
  assign auto_in_b_bits_resp = nodeIn_b_bits_resp;
  assign auto_in_ar_ready = nodeIn_ar_ready;
  assign auto_in_r_valid = nodeIn_r_valid;
  assign auto_in_r_bits_id = nodeIn_r_bits_id;
  assign auto_in_r_bits_data = nodeIn_r_bits_data;
  assign auto_in_r_bits_resp = nodeIn_r_bits_resp;
  assign auto_in_r_bits_last = nodeIn_r_bits_last;
  assign io_extra_out_valid = waddr == 4'h4 & _io_extra_out_valid_T_2;
  assign io_extra_out_ch = nodeIn_w_bits_data[39:32];
  assign io_extra_in_valid = ~(|raddr) & _io_extra_in_valid_T_2;
endmodule

