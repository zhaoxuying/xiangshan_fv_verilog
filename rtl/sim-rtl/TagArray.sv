// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TagArray(
  input         clock,
  input         reset,
  output        io_read_ready,
  input         io_read_valid,
  input         io_read_bits_idx,
  output [47:0] io_resp_0,
  output [47:0] io_resp_1,
  output [47:0] io_resp_2,
  output [47:0] io_resp_3,
  input         io_write_valid,
  input         io_write_bits_idx,
  input  [3:0]  io_write_bits_way_en,
  input  [40:0] io_write_bits_tag,
  input  [6:0]  io_write_bits_ecc
);

  TagSRAMBank tag_arrays_0 (
    .clock                (clock),
    .reset                (reset),
    .io_read_ready        (/* unused */),
    .io_read_valid        (io_read_valid),
    .io_read_bits_idx     (io_read_bits_idx),
    .io_resp_0            (io_resp_0),
    .io_resp_1            (io_resp_1),
    .io_write_valid       (io_write_valid),
    .io_write_bits_idx    (io_write_bits_idx),
    .io_write_bits_tag    (io_write_bits_tag),
    .io_write_bits_ecc    (io_write_bits_ecc),
    .io_write_bits_way_en (io_write_bits_way_en[1:0])
  );
  TagSRAMBank tag_arrays_1 (
    .clock                (clock),
    .reset                (reset),
    .io_read_ready        (io_read_ready),
    .io_read_valid        (io_read_valid),
    .io_read_bits_idx     (io_read_bits_idx),
    .io_resp_0            (io_resp_2),
    .io_resp_1            (io_resp_3),
    .io_write_valid       (io_write_valid),
    .io_write_bits_idx    (io_write_bits_idx),
    .io_write_bits_tag    (io_write_bits_tag),
    .io_write_bits_ecc    (io_write_bits_ecc),
    .io_write_bits_way_en (io_write_bits_way_en[3:2])
  );
endmodule

