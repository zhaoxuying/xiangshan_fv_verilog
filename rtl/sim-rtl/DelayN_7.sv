// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DelayN_7(
  input         clock,
  input  [3:0]  io_in_satp_mode,
  input  [15:0] io_in_satp_asid,
  input         io_in_satp_changed,
  input  [3:0]  io_in_vsatp_mode,
  input  [15:0] io_in_vsatp_asid,
  input         io_in_vsatp_changed,
  input  [3:0]  io_in_hgatp_mode,
  input  [15:0] io_in_hgatp_vmid,
  input         io_in_hgatp_changed,
  input         io_in_priv_mxr,
  input         io_in_priv_sum,
  input         io_in_priv_vmxr,
  input         io_in_priv_vsum,
  input         io_in_priv_virt,
  input         io_in_priv_spvp,
  input  [1:0]  io_in_priv_imode,
  input  [1:0]  io_in_priv_dmode,
  input  [1:0]  io_in_pmm_mseccfg,
  input  [1:0]  io_in_pmm_menvcfg,
  input  [1:0]  io_in_pmm_henvcfg,
  input  [1:0]  io_in_pmm_hstatus,
  input  [1:0]  io_in_pmm_senvcfg,
  output [3:0]  io_out_satp_mode,
  output [15:0] io_out_satp_asid,
  output        io_out_satp_changed,
  output [3:0]  io_out_vsatp_mode,
  output [15:0] io_out_vsatp_asid,
  output        io_out_vsatp_changed,
  output [3:0]  io_out_hgatp_mode,
  output [15:0] io_out_hgatp_vmid,
  output        io_out_hgatp_changed,
  output        io_out_priv_mxr,
  output        io_out_priv_sum,
  output        io_out_priv_vmxr,
  output        io_out_priv_vsum,
  output        io_out_priv_virt,
  output        io_out_priv_spvp,
  output [1:0]  io_out_priv_imode,
  output [1:0]  io_out_priv_dmode,
  output [1:0]  io_out_pmm_mseccfg,
  output [1:0]  io_out_pmm_menvcfg,
  output [1:0]  io_out_pmm_henvcfg,
  output [1:0]  io_out_pmm_hstatus,
  output [1:0]  io_out_pmm_senvcfg
);

  reg [3:0]  REG_satp_mode;
  reg [15:0] REG_satp_asid;
  reg        REG_satp_changed;
  reg [3:0]  REG_vsatp_mode;
  reg [15:0] REG_vsatp_asid;
  reg        REG_vsatp_changed;
  reg [3:0]  REG_hgatp_mode;
  reg [15:0] REG_hgatp_vmid;
  reg        REG_hgatp_changed;
  reg        REG_priv_mxr;
  reg        REG_priv_sum;
  reg        REG_priv_vmxr;
  reg        REG_priv_vsum;
  reg        REG_priv_virt;
  reg        REG_priv_spvp;
  reg [1:0]  REG_priv_imode;
  reg [1:0]  REG_priv_dmode;
  reg [1:0]  REG_pmm_mseccfg;
  reg [1:0]  REG_pmm_menvcfg;
  reg [1:0]  REG_pmm_henvcfg;
  reg [1:0]  REG_pmm_hstatus;
  reg [1:0]  REG_pmm_senvcfg;
  reg [3:0]  REG_1_satp_mode;
  reg [15:0] REG_1_satp_asid;
  reg        REG_1_satp_changed;
  reg [3:0]  REG_1_vsatp_mode;
  reg [15:0] REG_1_vsatp_asid;
  reg        REG_1_vsatp_changed;
  reg [3:0]  REG_1_hgatp_mode;
  reg [15:0] REG_1_hgatp_vmid;
  reg        REG_1_hgatp_changed;
  reg        REG_1_priv_mxr;
  reg        REG_1_priv_sum;
  reg        REG_1_priv_vmxr;
  reg        REG_1_priv_vsum;
  reg        REG_1_priv_virt;
  reg        REG_1_priv_spvp;
  reg [1:0]  REG_1_priv_imode;
  reg [1:0]  REG_1_priv_dmode;
  reg [1:0]  REG_1_pmm_mseccfg;
  reg [1:0]  REG_1_pmm_menvcfg;
  reg [1:0]  REG_1_pmm_henvcfg;
  reg [1:0]  REG_1_pmm_hstatus;
  reg [1:0]  REG_1_pmm_senvcfg;
  always @(posedge clock) begin
    REG_satp_mode <= io_in_satp_mode;
    REG_satp_asid <= io_in_satp_asid;
    REG_satp_changed <= io_in_satp_changed;
    REG_vsatp_mode <= io_in_vsatp_mode;
    REG_vsatp_asid <= io_in_vsatp_asid;
    REG_vsatp_changed <= io_in_vsatp_changed;
    REG_hgatp_mode <= io_in_hgatp_mode;
    REG_hgatp_vmid <= io_in_hgatp_vmid;
    REG_hgatp_changed <= io_in_hgatp_changed;
    REG_priv_mxr <= io_in_priv_mxr;
    REG_priv_sum <= io_in_priv_sum;
    REG_priv_vmxr <= io_in_priv_vmxr;
    REG_priv_vsum <= io_in_priv_vsum;
    REG_priv_virt <= io_in_priv_virt;
    REG_priv_spvp <= io_in_priv_spvp;
    REG_priv_imode <= io_in_priv_imode;
    REG_priv_dmode <= io_in_priv_dmode;
    REG_pmm_mseccfg <= io_in_pmm_mseccfg;
    REG_pmm_menvcfg <= io_in_pmm_menvcfg;
    REG_pmm_henvcfg <= io_in_pmm_henvcfg;
    REG_pmm_hstatus <= io_in_pmm_hstatus;
    REG_pmm_senvcfg <= io_in_pmm_senvcfg;
    REG_1_satp_mode <= REG_satp_mode;
    REG_1_satp_asid <= REG_satp_asid;
    REG_1_satp_changed <= REG_satp_changed;
    REG_1_vsatp_mode <= REG_vsatp_mode;
    REG_1_vsatp_asid <= REG_vsatp_asid;
    REG_1_vsatp_changed <= REG_vsatp_changed;
    REG_1_hgatp_mode <= REG_hgatp_mode;
    REG_1_hgatp_vmid <= REG_hgatp_vmid;
    REG_1_hgatp_changed <= REG_hgatp_changed;
    REG_1_priv_mxr <= REG_priv_mxr;
    REG_1_priv_sum <= REG_priv_sum;
    REG_1_priv_vmxr <= REG_priv_vmxr;
    REG_1_priv_vsum <= REG_priv_vsum;
    REG_1_priv_virt <= REG_priv_virt;
    REG_1_priv_spvp <= REG_priv_spvp;
    REG_1_priv_imode <= REG_priv_imode;
    REG_1_priv_dmode <= REG_priv_dmode;
    REG_1_pmm_mseccfg <= REG_pmm_mseccfg;
    REG_1_pmm_menvcfg <= REG_pmm_menvcfg;
    REG_1_pmm_henvcfg <= REG_pmm_henvcfg;
    REG_1_pmm_hstatus <= REG_pmm_hstatus;
    REG_1_pmm_senvcfg <= REG_pmm_senvcfg;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:17];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h12; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        REG_satp_mode = _RANDOM[5'h0][3:0];
        REG_satp_asid = _RANDOM[5'h0][19:4];
        REG_satp_changed = _RANDOM[5'h2][0];
        REG_vsatp_mode = _RANDOM[5'h2][4:1];
        REG_vsatp_asid = _RANDOM[5'h2][20:5];
        REG_vsatp_changed = _RANDOM[5'h4][1];
        REG_hgatp_mode = _RANDOM[5'h4][5:2];
        REG_hgatp_vmid = _RANDOM[5'h4][21:6];
        REG_hgatp_changed = _RANDOM[5'h6][2];
        REG_priv_mxr = _RANDOM[5'h8][0];
        REG_priv_sum = _RANDOM[5'h8][1];
        REG_priv_vmxr = _RANDOM[5'h8][2];
        REG_priv_vsum = _RANDOM[5'h8][3];
        REG_priv_virt = _RANDOM[5'h8][4];
        REG_priv_spvp = _RANDOM[5'h8][5];
        REG_priv_imode = _RANDOM[5'h8][7:6];
        REG_priv_dmode = _RANDOM[5'h8][9:8];
        REG_pmm_mseccfg = _RANDOM[5'h8][13:12];
        REG_pmm_menvcfg = _RANDOM[5'h8][15:14];
        REG_pmm_henvcfg = _RANDOM[5'h8][17:16];
        REG_pmm_hstatus = _RANDOM[5'h8][19:18];
        REG_pmm_senvcfg = _RANDOM[5'h8][21:20];
        REG_1_satp_mode = _RANDOM[5'h8][25:22];
        REG_1_satp_asid = {_RANDOM[5'h8][31:26], _RANDOM[5'h9][9:0]};
        REG_1_satp_changed = _RANDOM[5'hA][22];
        REG_1_vsatp_mode = _RANDOM[5'hA][26:23];
        REG_1_vsatp_asid = {_RANDOM[5'hA][31:27], _RANDOM[5'hB][10:0]};
        REG_1_vsatp_changed = _RANDOM[5'hC][23];
        REG_1_hgatp_mode = _RANDOM[5'hC][27:24];
        REG_1_hgatp_vmid = {_RANDOM[5'hC][31:28], _RANDOM[5'hD][11:0]};
        REG_1_hgatp_changed = _RANDOM[5'hE][24];
        REG_1_priv_mxr = _RANDOM[5'h10][22];
        REG_1_priv_sum = _RANDOM[5'h10][23];
        REG_1_priv_vmxr = _RANDOM[5'h10][24];
        REG_1_priv_vsum = _RANDOM[5'h10][25];
        REG_1_priv_virt = _RANDOM[5'h10][26];
        REG_1_priv_spvp = _RANDOM[5'h10][27];
        REG_1_priv_imode = _RANDOM[5'h10][29:28];
        REG_1_priv_dmode = _RANDOM[5'h10][31:30];
        REG_1_pmm_mseccfg = _RANDOM[5'h11][3:2];
        REG_1_pmm_menvcfg = _RANDOM[5'h11][5:4];
        REG_1_pmm_henvcfg = _RANDOM[5'h11][7:6];
        REG_1_pmm_hstatus = _RANDOM[5'h11][9:8];
        REG_1_pmm_senvcfg = _RANDOM[5'h11][11:10];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_satp_mode = REG_1_satp_mode;
  assign io_out_satp_asid = REG_1_satp_asid;
  assign io_out_satp_changed = REG_1_satp_changed;
  assign io_out_vsatp_mode = REG_1_vsatp_mode;
  assign io_out_vsatp_asid = REG_1_vsatp_asid;
  assign io_out_vsatp_changed = REG_1_vsatp_changed;
  assign io_out_hgatp_mode = REG_1_hgatp_mode;
  assign io_out_hgatp_vmid = REG_1_hgatp_vmid;
  assign io_out_hgatp_changed = REG_1_hgatp_changed;
  assign io_out_priv_mxr = REG_1_priv_mxr;
  assign io_out_priv_sum = REG_1_priv_sum;
  assign io_out_priv_vmxr = REG_1_priv_vmxr;
  assign io_out_priv_vsum = REG_1_priv_vsum;
  assign io_out_priv_virt = REG_1_priv_virt;
  assign io_out_priv_spvp = REG_1_priv_spvp;
  assign io_out_priv_imode = REG_1_priv_imode;
  assign io_out_priv_dmode = REG_1_priv_dmode;
  assign io_out_pmm_mseccfg = REG_1_pmm_mseccfg;
  assign io_out_pmm_menvcfg = REG_1_pmm_menvcfg;
  assign io_out_pmm_henvcfg = REG_1_pmm_henvcfg;
  assign io_out_pmm_hstatus = REG_1_pmm_hstatus;
  assign io_out_pmm_senvcfg = REG_1_pmm_senvcfg;
endmodule

