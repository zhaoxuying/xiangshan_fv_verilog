// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DummyDPICWrapper_20(
  input       clock,
  input       io_valid,
  input       io_bits_valid,
  input       io_bits_platformIRPMeip,
  input       io_bits_platformIRPMtip,
  input       io_bits_platformIRPMsip,
  input       io_bits_platformIRPSeip,
  input       io_bits_platformIRPStip,
  input       io_bits_platformIRPVseip,
  input       io_bits_platformIRPVstip,
  input       io_bits_fromAIAMeip,
  input       io_bits_fromAIASeip,
  input       io_bits_localCounterOverflowInterruptReq,
  input [7:0] io_bits_coreid
);

  DiffExtNonRegInterruptPendingEvent dpic (
    .clock                               (clock),
    .enable                              (io_valid),
    .io_valid                            (io_bits_valid),
    .io_platformIRPMeip                  (io_bits_platformIRPMeip),
    .io_platformIRPMtip                  (io_bits_platformIRPMtip),
    .io_platformIRPMsip                  (io_bits_platformIRPMsip),
    .io_platformIRPSeip                  (io_bits_platformIRPSeip),
    .io_platformIRPStip                  (io_bits_platformIRPStip),
    .io_platformIRPVseip                 (io_bits_platformIRPVseip),
    .io_platformIRPVstip                 (io_bits_platformIRPVstip),
    .io_fromAIAMeip                      (io_bits_fromAIAMeip),
    .io_fromAIASeip                      (io_bits_fromAIASeip),
    .io_localCounterOverflowInterruptReq (io_bits_localCounterOverflowInterruptReq),
    .io_coreid                           (io_bits_coreid)
  );
endmodule

