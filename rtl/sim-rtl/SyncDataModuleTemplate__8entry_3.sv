// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SyncDataModuleTemplate__8entry_3(
  input         clock,
  input         reset,
  input         io_ren_0,
  input  [2:0]  io_raddr_0,
  output [55:0] io_rdata_0_gpaddr,
  output        io_rdata_0_isForVSnonLeafPTE,
  input         io_wen_0,
  input  [2:0]  io_waddr_0,
  input  [55:0] io_wdata_0_gpaddr,
  input         io_wdata_0_isForVSnonLeafPTE
);

  reg [2:0]  raddr_dup_0;
  reg        wen_dup_last_REG;
  reg [2:0]  waddr_dup_0;
  reg [55:0] r_gpaddr;
  reg        r_isForVSnonLeafPTE;
  always @(posedge clock) begin
    if (io_ren_0)
      raddr_dup_0 <= io_raddr_0;
    if (io_wen_0) begin
      waddr_dup_0 <= io_waddr_0;
      r_gpaddr <= io_wdata_0_gpaddr;
      r_isForVSnonLeafPTE <= io_wdata_0_isForVSnonLeafPTE;
    end
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      wen_dup_last_REG <= 1'h0;
    else
      wen_dup_last_REG <= io_wen_0;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        raddr_dup_0 = _RANDOM[1'h0][2:0];
        wen_dup_last_REG = _RANDOM[1'h0][3];
        waddr_dup_0 = _RANDOM[1'h0][6:4];
        r_gpaddr = {_RANDOM[1'h0][31:7], _RANDOM[1'h1][30:0]};
        r_isForVSnonLeafPTE = _RANDOM[1'h1][31];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        wen_dup_last_REG = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DataModule__8entry_3 dataBanks_0 (
    .clock                        (clock),
    .io_raddr_0                   (raddr_dup_0),
    .io_rdata_0_gpaddr            (io_rdata_0_gpaddr),
    .io_rdata_0_isForVSnonLeafPTE (io_rdata_0_isForVSnonLeafPTE),
    .io_wen_0                     (wen_dup_last_REG),
    .io_waddr_0                   (waddr_dup_0),
    .io_wdata_0_gpaddr            (r_gpaddr),
    .io_wdata_0_isForVSnonLeafPTE (r_isForVSnonLeafPTE)
  );
endmodule

