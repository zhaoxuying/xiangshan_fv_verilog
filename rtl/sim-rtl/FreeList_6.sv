// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FreeList_6(
  input        clock,
  input        reset,
  output [2:0] io_allocateSlot_0,
  output [2:0] io_allocateSlot_1,
  output [2:0] io_allocateSlot_2,
  output       io_canAllocate_0,
  output       io_canAllocate_1,
  output       io_canAllocate_2,
  input        io_doAllocate_0,
  input        io_doAllocate_1,
  input        io_doAllocate_2,
  input  [7:0] io_free
);

  reg  [2:0]      freeList_0;
  reg  [2:0]      freeList_1;
  reg  [2:0]      freeList_2;
  reg  [2:0]      freeList_3;
  reg  [2:0]      freeList_4;
  reg  [2:0]      freeList_5;
  reg  [2:0]      freeList_6;
  reg  [2:0]      freeList_7;
  reg             headPtr_flag;
  reg  [2:0]      headPtr_value;
  reg             tailPtr_flag;
  reg  [2:0]      tailPtr_value;
  reg  [7:0]      freeMask;
  reg             freeReq_next_nextVec_0_r;
  reg             freeReq_next_nextVec_1_r;
  reg             freeReq_next_nextVec_2_r;
  reg             freeReq_next_nextVec_3_r;
  reg  [7:0]      freeSlotOH_next_nextVec_0_r;
  reg  [7:0]      freeSlotOH_next_nextVec_1_r;
  reg  [7:0]      freeSlotOH_next_nextVec_2_r;
  reg  [7:0]      freeSlotOH_next_nextVec_3_r;
  wire [3:0]      _GEN = {headPtr_flag, headPtr_value};
  wire [3:0]      _GEN_0 =
    {2'h0,
     2'({1'h0, io_doAllocate_0} + 2'({1'h0, io_doAllocate_1} + {1'h0, io_doAllocate_2}))};
  reg             io_canAllocate_0_r;
  reg  [2:0]      io_allocateSlot_0_r;
  reg             io_canAllocate_1_r;
  reg  [2:0]      io_allocateSlot_1_r;
  reg             io_canAllocate_2_r;
  reg  [2:0]      io_allocateSlot_2_r;
  wire [3:0]      _headPtrNext_new_ptr_T_1 = 4'(_GEN + _GEN_0);
  wire [7:0]      _remFreeSelMaskVec_T_15 =
    ~((freeReq_next_nextVec_0_r ? freeSlotOH_next_nextVec_0_r : 8'h0)
      | (freeReq_next_nextVec_1_r ? freeSlotOH_next_nextVec_1_r : 8'h0)
      | (freeReq_next_nextVec_2_r ? freeSlotOH_next_nextVec_2_r : 8'h0)
      | (freeReq_next_nextVec_3_r ? freeSlotOH_next_nextVec_3_r : 8'h0));
  wire            _remFreeSelMaskVec_T_2 = freeMask[0] & _remFreeSelMaskVec_T_15[0];
  wire            _remFreeSelMaskVec_T_3 = freeMask[4] & _remFreeSelMaskVec_T_15[4];
  wire [1:0]      remFreeSelMaskVec_0 = {_remFreeSelMaskVec_T_3, _remFreeSelMaskVec_T_2};
  wire            _remFreeSelMaskVec_T_7 = freeMask[1] & _remFreeSelMaskVec_T_15[1];
  wire            _remFreeSelMaskVec_T_8 = freeMask[5] & _remFreeSelMaskVec_T_15[5];
  wire [1:0]      remFreeSelMaskVec_1 = {_remFreeSelMaskVec_T_8, _remFreeSelMaskVec_T_7};
  wire            _remFreeSelMaskVec_T_12 = freeMask[2] & _remFreeSelMaskVec_T_15[2];
  wire            _remFreeSelMaskVec_T_13 = freeMask[6] & _remFreeSelMaskVec_T_15[6];
  wire [1:0]      remFreeSelMaskVec_2 =
    {_remFreeSelMaskVec_T_13, _remFreeSelMaskVec_T_12};
  wire            _remFreeSelMaskVec_T_17 = freeMask[3] & _remFreeSelMaskVec_T_15[3];
  wire            _remFreeSelMaskVec_T_18 = freeMask[7] & _remFreeSelMaskVec_T_15[7];
  wire [1:0]      remFreeSelMaskVec_3 =
    {_remFreeSelMaskVec_T_18, _remFreeSelMaskVec_T_17};
  wire [1:0]      remFreeSelIndexOHVec_highIndexOH =
    _remFreeSelMaskVec_T_2 ? 2'h1 : {_remFreeSelMaskVec_T_3, 1'h0};
  wire [7:0]      remFreeSelIndexOHVec_0 =
    {3'h0,
     remFreeSelIndexOHVec_highIndexOH[1],
     3'h0,
     remFreeSelIndexOHVec_highIndexOH[0]};
  wire [1:0]      remFreeSelIndexOHVec_highIndexOH_1 =
    _remFreeSelMaskVec_T_7 ? 2'h1 : {_remFreeSelMaskVec_T_8, 1'h0};
  wire [7:0]      remFreeSelIndexOHVec_1 =
    {2'h0,
     remFreeSelIndexOHVec_highIndexOH_1[1],
     3'h0,
     remFreeSelIndexOHVec_highIndexOH_1[0],
     1'h0};
  wire [1:0]      remFreeSelIndexOHVec_highIndexOH_2 =
    _remFreeSelMaskVec_T_12 ? 2'h1 : {_remFreeSelMaskVec_T_13, 1'h0};
  wire [7:0]      remFreeSelIndexOHVec_2 =
    {1'h0,
     remFreeSelIndexOHVec_highIndexOH_2[1],
     3'h0,
     remFreeSelIndexOHVec_highIndexOH_2[0],
     2'h0};
  wire [1:0]      remFreeSelIndexOHVec_highIndexOH_3 =
    _remFreeSelMaskVec_T_17 ? 2'h1 : {_remFreeSelMaskVec_T_18, 1'h0};
  wire [7:0]      remFreeSelIndexOHVec_3 =
    {remFreeSelIndexOHVec_highIndexOH_3[1],
     3'h0,
     remFreeSelIndexOHVec_highIndexOH_3[0],
     3'h0};
  wire [2:0]      _freeList_T_1 =
    freeSlotOH_next_nextVec_0_r[7:5] | freeSlotOH_next_nextVec_0_r[3:1];
  wire [2:0]      _freeList_T_6 =
    {|(freeSlotOH_next_nextVec_0_r[7:4]),
     |(_freeList_T_1[2:1]),
     _freeList_T_1[2] | _freeList_T_1[0]};
  wire [2:0]      _enqPtr_new_ptr_T_6 =
    3'(tailPtr_value + {2'h0, freeReq_next_nextVec_0_r});
  wire [2:0]      _freeList_T_8 =
    freeSlotOH_next_nextVec_1_r[7:5] | freeSlotOH_next_nextVec_1_r[3:1];
  wire [2:0]      _freeList_T_13 =
    {|(freeSlotOH_next_nextVec_1_r[7:4]),
     |(_freeList_T_8[2:1]),
     _freeList_T_8[2] | _freeList_T_8[0]};
  wire [1:0]      _GEN_1 = {1'h0, freeReq_next_nextVec_0_r};
  wire [1:0]      _GEN_2 = {1'h0, freeReq_next_nextVec_1_r};
  wire [2:0]      _GEN_3 = {1'h0, 2'(_GEN_1 + _GEN_2)};
  wire [2:0]      _enqPtr_new_ptr_T_11 = 3'(tailPtr_value + _GEN_3);
  wire [2:0]      _freeList_T_15 =
    freeSlotOH_next_nextVec_2_r[7:5] | freeSlotOH_next_nextVec_2_r[3:1];
  wire [2:0]      _freeList_T_20 =
    {|(freeSlotOH_next_nextVec_2_r[7:4]),
     |(_freeList_T_15[2:1]),
     _freeList_T_15[2] | _freeList_T_15[0]};
  wire [1:0]      _GEN_4 = {1'h0, freeReq_next_nextVec_2_r};
  wire [2:0]      _enqPtr_new_ptr_T_16 =
    3'(tailPtr_value + {1'h0, 2'(_GEN_1 + 2'(_GEN_2 + _GEN_4))});
  wire [2:0]      _freeList_T_22 =
    freeSlotOH_next_nextVec_3_r[7:5] | freeSlotOH_next_nextVec_3_r[3:1];
  wire [2:0]      _freeList_T_27 =
    {|(freeSlotOH_next_nextVec_3_r[7:4]),
     |(_freeList_T_22[2:1]),
     _freeList_T_22[2] | _freeList_T_22[0]};
  wire [3:0]      _tailPtrNext_new_ptr_T_1 =
    4'({tailPtr_flag, tailPtr_value}
       + {1'h0, 3'(_GEN_3 + {1'h0, 2'(_GEN_4 + {1'h0, freeReq_next_nextVec_3_r})})});
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      freeList_0 <= 3'h0;
      freeList_1 <= 3'h1;
      freeList_2 <= 3'h2;
      freeList_3 <= 3'h3;
      freeList_4 <= 3'h4;
      freeList_5 <= 3'h5;
      freeList_6 <= 3'h6;
      freeList_7 <= 3'h7;
      headPtr_flag <= 1'h0;
      headPtr_value <= 3'h0;
      tailPtr_flag <= 1'h1;
      tailPtr_value <= 3'h0;
      freeMask <= 8'h0;
      freeReq_next_nextVec_0_r <= 1'h0;
      freeReq_next_nextVec_1_r <= 1'h0;
      freeReq_next_nextVec_2_r <= 1'h0;
      freeReq_next_nextVec_3_r <= 1'h0;
      freeSlotOH_next_nextVec_0_r <= 8'h0;
      freeSlotOH_next_nextVec_1_r <= 8'h0;
      freeSlotOH_next_nextVec_2_r <= 8'h0;
      freeSlotOH_next_nextVec_3_r <= 8'h0;
    end
    else begin
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_T_16 == 3'h0)
        freeList_0 <= _freeList_T_27;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_T_11 == 3'h0)
        freeList_0 <= _freeList_T_20;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 3'h0)
        freeList_0 <= _freeList_T_13;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h0)
        freeList_0 <= _freeList_T_6;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_T_16 == 3'h1)
        freeList_1 <= _freeList_T_27;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_T_11 == 3'h1)
        freeList_1 <= _freeList_T_20;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 3'h1)
        freeList_1 <= _freeList_T_13;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h1)
        freeList_1 <= _freeList_T_6;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_T_16 == 3'h2)
        freeList_2 <= _freeList_T_27;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_T_11 == 3'h2)
        freeList_2 <= _freeList_T_20;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 3'h2)
        freeList_2 <= _freeList_T_13;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h2)
        freeList_2 <= _freeList_T_6;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_T_16 == 3'h3)
        freeList_3 <= _freeList_T_27;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_T_11 == 3'h3)
        freeList_3 <= _freeList_T_20;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 3'h3)
        freeList_3 <= _freeList_T_13;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h3)
        freeList_3 <= _freeList_T_6;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_T_16 == 3'h4)
        freeList_4 <= _freeList_T_27;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_T_11 == 3'h4)
        freeList_4 <= _freeList_T_20;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 3'h4)
        freeList_4 <= _freeList_T_13;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h4)
        freeList_4 <= _freeList_T_6;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_T_16 == 3'h5)
        freeList_5 <= _freeList_T_27;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_T_11 == 3'h5)
        freeList_5 <= _freeList_T_20;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 3'h5)
        freeList_5 <= _freeList_T_13;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h5)
        freeList_5 <= _freeList_T_6;
      if (freeReq_next_nextVec_3_r & _enqPtr_new_ptr_T_16 == 3'h6)
        freeList_6 <= _freeList_T_27;
      else if (freeReq_next_nextVec_2_r & _enqPtr_new_ptr_T_11 == 3'h6)
        freeList_6 <= _freeList_T_20;
      else if (freeReq_next_nextVec_1_r & _enqPtr_new_ptr_T_6 == 3'h6)
        freeList_6 <= _freeList_T_13;
      else if (freeReq_next_nextVec_0_r & tailPtr_value == 3'h6)
        freeList_6 <= _freeList_T_6;
      if (freeReq_next_nextVec_3_r & (&_enqPtr_new_ptr_T_16))
        freeList_7 <= _freeList_T_27;
      else if (freeReq_next_nextVec_2_r & (&_enqPtr_new_ptr_T_11))
        freeList_7 <= _freeList_T_20;
      else if (freeReq_next_nextVec_1_r & (&_enqPtr_new_ptr_T_6))
        freeList_7 <= _freeList_T_13;
      else if (freeReq_next_nextVec_0_r & (&tailPtr_value))
        freeList_7 <= _freeList_T_6;
      if (|{io_doAllocate_2, io_doAllocate_1, io_doAllocate_0}) begin
        headPtr_flag <= _headPtrNext_new_ptr_T_1[3];
        headPtr_value <= _headPtrNext_new_ptr_T_1[2:0];
      end
      if (|{freeReq_next_nextVec_3_r,
            freeReq_next_nextVec_2_r,
            freeReq_next_nextVec_1_r,
            freeReq_next_nextVec_0_r}) begin
        tailPtr_flag <= _tailPtrNext_new_ptr_T_1[3];
        tailPtr_value <= _tailPtrNext_new_ptr_T_1[2:0];
      end
      freeMask <= (io_free | freeMask) & _remFreeSelMaskVec_T_15;
      if (~((|remFreeSelMaskVec_0) == freeReq_next_nextVec_0_r))
        freeReq_next_nextVec_0_r <= |remFreeSelMaskVec_0;
      if (~((|remFreeSelMaskVec_1) == freeReq_next_nextVec_1_r))
        freeReq_next_nextVec_1_r <= |remFreeSelMaskVec_1;
      if (~((|remFreeSelMaskVec_2) == freeReq_next_nextVec_2_r))
        freeReq_next_nextVec_2_r <= |remFreeSelMaskVec_2;
      if (~((|remFreeSelMaskVec_3) == freeReq_next_nextVec_3_r))
        freeReq_next_nextVec_3_r <= |remFreeSelMaskVec_3;
      if (~(remFreeSelIndexOHVec_0 == freeSlotOH_next_nextVec_0_r))
        freeSlotOH_next_nextVec_0_r <= remFreeSelIndexOHVec_0;
      if (~(remFreeSelIndexOHVec_1 == freeSlotOH_next_nextVec_1_r))
        freeSlotOH_next_nextVec_1_r <= remFreeSelIndexOHVec_1;
      if (~(remFreeSelIndexOHVec_2 == freeSlotOH_next_nextVec_2_r))
        freeSlotOH_next_nextVec_2_r <= remFreeSelIndexOHVec_2;
      if (~(remFreeSelIndexOHVec_3 == freeSlotOH_next_nextVec_3_r))
        freeSlotOH_next_nextVec_3_r <= remFreeSelIndexOHVec_3;
    end
  end // always @(posedge, posedge)
  wire [3:0]      _deqPtr_new_ptr_T_1 = 4'(_GEN + _GEN_0);
  wire [7:0][2:0] _GEN_5 =
    {{freeList_7},
     {freeList_6},
     {freeList_5},
     {freeList_4},
     {freeList_3},
     {freeList_2},
     {freeList_1},
     {freeList_0}};
  wire [3:0]      _deqPtr_new_ptr_T_16 = 4'(_GEN + 4'(_GEN_0 + 4'h1));
  wire [3:0]      _deqPtr_new_ptr_T_26 = 4'(_GEN + 4'(_GEN_0 + 4'h2));
  always @(posedge clock) begin
    io_canAllocate_0_r <=
      _deqPtr_new_ptr_T_1[3] ^ tailPtr_flag ^ _deqPtr_new_ptr_T_1[2:0] < tailPtr_value;
    io_allocateSlot_0_r <= _GEN_5[_deqPtr_new_ptr_T_1[2:0]];
    io_canAllocate_1_r <=
      _deqPtr_new_ptr_T_16[3] ^ tailPtr_flag ^ _deqPtr_new_ptr_T_16[2:0] < tailPtr_value;
    io_allocateSlot_1_r <= _GEN_5[_deqPtr_new_ptr_T_16[2:0]];
    io_canAllocate_2_r <=
      _deqPtr_new_ptr_T_26[3] ^ tailPtr_flag ^ _deqPtr_new_ptr_T_26[2:0] < tailPtr_value;
    io_allocateSlot_2_r <= _GEN_5[_deqPtr_new_ptr_T_26[2:0]];
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        freeList_0 = _RANDOM[2'h0][2:0];
        freeList_1 = _RANDOM[2'h0][5:3];
        freeList_2 = _RANDOM[2'h0][8:6];
        freeList_3 = _RANDOM[2'h0][11:9];
        freeList_4 = _RANDOM[2'h0][14:12];
        freeList_5 = _RANDOM[2'h0][17:15];
        freeList_6 = _RANDOM[2'h0][20:18];
        freeList_7 = _RANDOM[2'h0][23:21];
        headPtr_flag = _RANDOM[2'h0][24];
        headPtr_value = _RANDOM[2'h0][27:25];
        tailPtr_flag = _RANDOM[2'h0][28];
        tailPtr_value = _RANDOM[2'h0][31:29];
        freeMask = _RANDOM[2'h1][7:0];
        freeReq_next_nextVec_0_r = _RANDOM[2'h1][8];
        freeReq_next_nextVec_1_r = _RANDOM[2'h1][9];
        freeReq_next_nextVec_2_r = _RANDOM[2'h1][10];
        freeReq_next_nextVec_3_r = _RANDOM[2'h1][11];
        freeSlotOH_next_nextVec_0_r = _RANDOM[2'h1][19:12];
        freeSlotOH_next_nextVec_1_r = _RANDOM[2'h1][27:20];
        freeSlotOH_next_nextVec_2_r = {_RANDOM[2'h1][31:28], _RANDOM[2'h2][3:0]};
        freeSlotOH_next_nextVec_3_r = _RANDOM[2'h2][11:4];
        io_canAllocate_0_r = _RANDOM[2'h2][16];
        io_allocateSlot_0_r = _RANDOM[2'h2][19:17];
        io_canAllocate_1_r = _RANDOM[2'h2][20];
        io_allocateSlot_1_r = _RANDOM[2'h2][23:21];
        io_canAllocate_2_r = _RANDOM[2'h2][24];
        io_allocateSlot_2_r = _RANDOM[2'h2][27:25];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        freeList_0 = 3'h0;
        freeList_1 = 3'h1;
        freeList_2 = 3'h2;
        freeList_3 = 3'h3;
        freeList_4 = 3'h4;
        freeList_5 = 3'h5;
        freeList_6 = 3'h6;
        freeList_7 = 3'h7;
        headPtr_flag = 1'h0;
        headPtr_value = 3'h0;
        tailPtr_flag = 1'h1;
        tailPtr_value = 3'h0;
        freeMask = 8'h0;
        freeReq_next_nextVec_0_r = 1'h0;
        freeReq_next_nextVec_1_r = 1'h0;
        freeReq_next_nextVec_2_r = 1'h0;
        freeReq_next_nextVec_3_r = 1'h0;
        freeSlotOH_next_nextVec_0_r = 8'h0;
        freeSlotOH_next_nextVec_1_r = 8'h0;
        freeSlotOH_next_nextVec_2_r = 8'h0;
        freeSlotOH_next_nextVec_3_r = 8'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_allocateSlot_0 = io_allocateSlot_0_r;
  assign io_allocateSlot_1 = io_allocateSlot_1_r;
  assign io_allocateSlot_2 = io_allocateSlot_2_r;
  assign io_canAllocate_0 = io_canAllocate_0_r;
  assign io_canAllocate_1 = io_canAllocate_1_r;
  assign io_canAllocate_2 = io_canAllocate_2_r;
endmodule

