// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IMSICGateWay(
  input         clock,
  input         reset,
  input         msiio_vld_req,
  input  [10:0] msiio_data,
  output [7:0]  msi_data_o,
  output [6:0]  msi_valid_o
);

  wire       _msi_vld_req_cpu_chain_io_q;
  reg  [7:0] msi_data_catch;
  reg  [6:0] msi_intf_valids;
  wire [7:0] _msi_intf_valids_T_1 = 8'h1 << msiio_data[10:8];
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      msi_data_catch <= 8'h0;
      msi_intf_valids <= 7'h0;
    end
    else begin
      if (_msi_vld_req_cpu_chain_io_q)
        msi_data_catch <= msiio_data[7:0];
      msi_intf_valids <= _msi_vld_req_cpu_chain_io_q ? _msi_intf_valids_T_1[6:0] : 7'h0;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        msi_data_catch = _RANDOM[/*Zero width*/ 1'b0][8:1];
        msi_intf_valids = _RANDOM[/*Zero width*/ 1'b0][15:9];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        msi_data_catch = 8'h0;
        msi_intf_valids = 7'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  AsyncResetSynchronizerShiftReg_w1_d3_i0 msi_vld_req_cpu_chain (
    .clock (clock),
    .reset (reset),
    .io_d  (msiio_vld_req),
    .io_q  (_msi_vld_req_cpu_chain_io_q)
  );
  assign msi_data_o = msi_data_catch;
  assign msi_valid_o = msi_intf_valids;
endmodule

