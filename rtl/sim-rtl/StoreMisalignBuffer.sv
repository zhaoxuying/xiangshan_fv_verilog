// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module StoreMisalignBuffer(
  input         clock,
  input         reset,
  input         io_redirect_valid,
  input         io_redirect_bits_robIdx_flag,
  input  [5:0]  io_redirect_bits_robIdx_value,
  input         io_redirect_bits_level,
  output        io_enq_0_req_ready,
  input         io_enq_0_req_valid,
  input         io_enq_0_req_bits_uop_exceptionVec_0,
  input         io_enq_0_req_bits_uop_exceptionVec_1,
  input         io_enq_0_req_bits_uop_exceptionVec_2,
  input         io_enq_0_req_bits_uop_exceptionVec_4,
  input         io_enq_0_req_bits_uop_exceptionVec_5,
  input         io_enq_0_req_bits_uop_exceptionVec_8,
  input         io_enq_0_req_bits_uop_exceptionVec_9,
  input         io_enq_0_req_bits_uop_exceptionVec_10,
  input         io_enq_0_req_bits_uop_exceptionVec_11,
  input         io_enq_0_req_bits_uop_exceptionVec_12,
  input         io_enq_0_req_bits_uop_exceptionVec_13,
  input         io_enq_0_req_bits_uop_exceptionVec_14,
  input         io_enq_0_req_bits_uop_exceptionVec_16,
  input         io_enq_0_req_bits_uop_exceptionVec_17,
  input         io_enq_0_req_bits_uop_exceptionVec_18,
  input         io_enq_0_req_bits_uop_exceptionVec_19,
  input         io_enq_0_req_bits_uop_exceptionVec_20,
  input         io_enq_0_req_bits_uop_exceptionVec_21,
  input         io_enq_0_req_bits_uop_exceptionVec_22,
  input  [3:0]  io_enq_0_req_bits_uop_trigger,
  input  [8:0]  io_enq_0_req_bits_uop_fuOpType,
  input  [7:0]  io_enq_0_req_bits_uop_vpu_vstart,
  input  [1:0]  io_enq_0_req_bits_uop_vpu_veew,
  input  [6:0]  io_enq_0_req_bits_uop_uopIdx,
  input         io_enq_0_req_bits_uop_robIdx_flag,
  input  [5:0]  io_enq_0_req_bits_uop_robIdx_value,
  input         io_enq_0_req_bits_uop_sqIdx_flag,
  input  [4:0]  io_enq_0_req_bits_uop_sqIdx_value,
  input  [49:0] io_enq_0_req_bits_vaddr,
  input  [15:0] io_enq_0_req_bits_mask,
  input         io_enq_0_req_bits_isvec,
  input  [7:0]  io_enq_0_req_bits_elemIdx,
  input  [2:0]  io_enq_0_req_bits_alignedType,
  input  [3:0]  io_enq_0_req_bits_mbIndex,
  input         io_enq_0_revoke,
  output        io_enq_1_req_ready,
  input         io_enq_1_req_valid,
  input         io_enq_1_req_bits_uop_exceptionVec_0,
  input         io_enq_1_req_bits_uop_exceptionVec_1,
  input         io_enq_1_req_bits_uop_exceptionVec_2,
  input         io_enq_1_req_bits_uop_exceptionVec_4,
  input         io_enq_1_req_bits_uop_exceptionVec_5,
  input         io_enq_1_req_bits_uop_exceptionVec_8,
  input         io_enq_1_req_bits_uop_exceptionVec_9,
  input         io_enq_1_req_bits_uop_exceptionVec_10,
  input         io_enq_1_req_bits_uop_exceptionVec_11,
  input         io_enq_1_req_bits_uop_exceptionVec_12,
  input         io_enq_1_req_bits_uop_exceptionVec_13,
  input         io_enq_1_req_bits_uop_exceptionVec_14,
  input         io_enq_1_req_bits_uop_exceptionVec_16,
  input         io_enq_1_req_bits_uop_exceptionVec_17,
  input         io_enq_1_req_bits_uop_exceptionVec_18,
  input         io_enq_1_req_bits_uop_exceptionVec_19,
  input         io_enq_1_req_bits_uop_exceptionVec_20,
  input         io_enq_1_req_bits_uop_exceptionVec_21,
  input         io_enq_1_req_bits_uop_exceptionVec_22,
  input  [3:0]  io_enq_1_req_bits_uop_trigger,
  input  [8:0]  io_enq_1_req_bits_uop_fuOpType,
  input  [7:0]  io_enq_1_req_bits_uop_vpu_vstart,
  input  [1:0]  io_enq_1_req_bits_uop_vpu_veew,
  input  [6:0]  io_enq_1_req_bits_uop_uopIdx,
  input         io_enq_1_req_bits_uop_robIdx_flag,
  input  [5:0]  io_enq_1_req_bits_uop_robIdx_value,
  input         io_enq_1_req_bits_uop_sqIdx_flag,
  input  [4:0]  io_enq_1_req_bits_uop_sqIdx_value,
  input  [49:0] io_enq_1_req_bits_vaddr,
  input  [15:0] io_enq_1_req_bits_mask,
  input         io_enq_1_req_bits_isvec,
  input  [7:0]  io_enq_1_req_bits_elemIdx,
  input  [2:0]  io_enq_1_req_bits_alignedType,
  input  [3:0]  io_enq_1_req_bits_mbIndex,
  input         io_enq_1_revoke,
  input         io_rob_pendingst,
  input         io_rob_pendingPtr_flag,
  input  [5:0]  io_rob_pendingPtr_value,
  input         io_splitStoreReq_ready,
  output        io_splitStoreReq_valid,
  output        io_splitStoreReq_bits_uop_exceptionVec_0,
  output        io_splitStoreReq_bits_uop_exceptionVec_1,
  output        io_splitStoreReq_bits_uop_exceptionVec_2,
  output        io_splitStoreReq_bits_uop_exceptionVec_4,
  output        io_splitStoreReq_bits_uop_exceptionVec_5,
  output        io_splitStoreReq_bits_uop_exceptionVec_8,
  output        io_splitStoreReq_bits_uop_exceptionVec_9,
  output        io_splitStoreReq_bits_uop_exceptionVec_10,
  output        io_splitStoreReq_bits_uop_exceptionVec_11,
  output        io_splitStoreReq_bits_uop_exceptionVec_12,
  output        io_splitStoreReq_bits_uop_exceptionVec_13,
  output        io_splitStoreReq_bits_uop_exceptionVec_14,
  output        io_splitStoreReq_bits_uop_exceptionVec_16,
  output        io_splitStoreReq_bits_uop_exceptionVec_17,
  output        io_splitStoreReq_bits_uop_exceptionVec_18,
  output        io_splitStoreReq_bits_uop_exceptionVec_19,
  output        io_splitStoreReq_bits_uop_exceptionVec_20,
  output        io_splitStoreReq_bits_uop_exceptionVec_21,
  output        io_splitStoreReq_bits_uop_exceptionVec_22,
  output [3:0]  io_splitStoreReq_bits_uop_trigger,
  output [8:0]  io_splitStoreReq_bits_uop_fuOpType,
  output [7:0]  io_splitStoreReq_bits_uop_vpu_vstart,
  output [1:0]  io_splitStoreReq_bits_uop_vpu_veew,
  output [6:0]  io_splitStoreReq_bits_uop_uopIdx,
  output        io_splitStoreReq_bits_uop_robIdx_flag,
  output [5:0]  io_splitStoreReq_bits_uop_robIdx_value,
  output        io_splitStoreReq_bits_uop_sqIdx_flag,
  output [4:0]  io_splitStoreReq_bits_uop_sqIdx_value,
  output [49:0] io_splitStoreReq_bits_vaddr,
  output [15:0] io_splitStoreReq_bits_mask,
  output        io_splitStoreReq_bits_isvec,
  output        io_splitStoreReq_bits_is128bit,
  output        io_splitStoreReq_bits_isFinalSplit,
  input         io_splitStoreResp_valid,
  input         io_splitStoreResp_bits_uop_exceptionVec_3,
  input         io_splitStoreResp_bits_uop_exceptionVec_6,
  input         io_splitStoreResp_bits_uop_exceptionVec_7,
  input         io_splitStoreResp_bits_uop_exceptionVec_15,
  input         io_splitStoreResp_bits_uop_exceptionVec_23,
  input  [3:0]  io_splitStoreResp_bits_uop_trigger,
  input  [47:0] io_splitStoreResp_bits_paddr,
  input         io_splitStoreResp_bits_nc,
  input         io_splitStoreResp_bits_mmio,
  input         io_splitStoreResp_bits_memBackTypeMM,
  input         io_splitStoreResp_bits_vecActive,
  input         io_splitStoreResp_bits_need_rep,
  input         io_writeBack_ready,
  output        io_writeBack_valid,
  output        io_writeBack_bits_uop_exceptionVec_3,
  output        io_writeBack_bits_uop_exceptionVec_6,
  output        io_writeBack_bits_uop_exceptionVec_7,
  output        io_writeBack_bits_uop_exceptionVec_15,
  output        io_writeBack_bits_uop_exceptionVec_23,
  output [3:0]  io_writeBack_bits_uop_trigger,
  output        io_writeBack_bits_uop_flushPipe,
  output        io_writeBack_bits_uop_robIdx_flag,
  output [5:0]  io_writeBack_bits_uop_robIdx_value,
  output        io_writeBack_bits_debug_isMMIO,
  output        io_writeBack_bits_debug_isNCIO,
  output        io_vecWriteBack_0_valid,
  output [2:0]  io_vecWriteBack_0_bits_mBIndex,
  output        io_vecWriteBack_0_bits_exceptionVec_3,
  output        io_vecWriteBack_0_bits_exceptionVec_6,
  output        io_vecWriteBack_0_bits_exceptionVec_7,
  output        io_vecWriteBack_0_bits_exceptionVec_15,
  output        io_vecWriteBack_0_bits_exceptionVec_23,
  output        io_vecWriteBack_0_bits_hasException,
  output [63:0] io_vecWriteBack_0_bits_vaddr,
  output        io_vecWriteBack_0_bits_vaNeedExt,
  output [63:0] io_vecWriteBack_0_bits_gpaddr,
  output        io_vecWriteBack_0_bits_isForVSnonLeafPTE,
  output [7:0]  io_vecWriteBack_0_bits_vstart,
  output [7:0]  io_vecWriteBack_0_bits_elemIdx,
  output [15:0] io_vecWriteBack_0_bits_mask,
  output        io_vecWriteBack_1_valid,
  output [2:0]  io_vecWriteBack_1_bits_mBIndex,
  output        io_vecWriteBack_1_bits_exceptionVec_3,
  output        io_vecWriteBack_1_bits_exceptionVec_6,
  output        io_vecWriteBack_1_bits_exceptionVec_7,
  output        io_vecWriteBack_1_bits_exceptionVec_15,
  output        io_vecWriteBack_1_bits_exceptionVec_23,
  output        io_vecWriteBack_1_bits_hasException,
  output [63:0] io_vecWriteBack_1_bits_vaddr,
  output        io_vecWriteBack_1_bits_vaNeedExt,
  output [63:0] io_vecWriteBack_1_bits_gpaddr,
  output        io_vecWriteBack_1_bits_isForVSnonLeafPTE,
  output [7:0]  io_vecWriteBack_1_bits_vstart,
  output [7:0]  io_vecWriteBack_1_bits_elemIdx,
  output [15:0] io_vecWriteBack_1_bits_mask,
  input         io_storeOutValid,
  input         io_storeVecOutValid,
  output        io_sqControl_toStoreQueue_crossPageWithHit,
  output        io_sqControl_toStoreQueue_crossPageCanDeq,
  output [47:0] io_sqControl_toStoreQueue_paddr,
  output        io_sqControl_toStoreQueue_withSameUop,
  input         io_sqControl_toStoreMisalignBuffer_sqPtr_flag,
  input  [4:0]  io_sqControl_toStoreMisalignBuffer_sqPtr_value,
  input         io_sqControl_toStoreMisalignBuffer_doDeq,
  input  [6:0]  io_sqControl_toStoreMisalignBuffer_uop_uopIdx,
  input         io_sqControl_toStoreMisalignBuffer_uop_robIdx_flag,
  input  [5:0]  io_sqControl_toStoreMisalignBuffer_uop_robIdx_value,
  output [2:0]  io_toVecStoreMergeBuffer_0_mbIndex,
  output        io_toVecStoreMergeBuffer_0_flush,
  output [2:0]  io_toVecStoreMergeBuffer_1_mbIndex,
  output        io_toVecStoreMergeBuffer_1_flush,
  output        io_full
);

  wire             cross4KBPageBoundary;
  reg              req_valid;
  reg              req_uop_exceptionVec_0;
  reg              req_uop_exceptionVec_1;
  reg              req_uop_exceptionVec_2;
  reg              req_uop_exceptionVec_4;
  reg              req_uop_exceptionVec_5;
  reg              req_uop_exceptionVec_8;
  reg              req_uop_exceptionVec_9;
  reg              req_uop_exceptionVec_10;
  reg              req_uop_exceptionVec_11;
  reg              req_uop_exceptionVec_12;
  reg              req_uop_exceptionVec_13;
  reg              req_uop_exceptionVec_14;
  reg              req_uop_exceptionVec_16;
  reg              req_uop_exceptionVec_17;
  reg              req_uop_exceptionVec_18;
  reg              req_uop_exceptionVec_19;
  reg              req_uop_exceptionVec_20;
  reg              req_uop_exceptionVec_21;
  reg              req_uop_exceptionVec_22;
  reg  [3:0]       req_uop_trigger;
  reg  [8:0]       req_uop_fuOpType;
  reg  [7:0]       req_uop_vpu_vstart;
  reg  [1:0]       req_uop_vpu_veew;
  reg  [6:0]       req_uop_uopIdx;
  reg              req_uop_robIdx_flag;
  reg  [5:0]       req_uop_robIdx_value;
  reg              req_uop_sqIdx_flag;
  reg  [4:0]       req_uop_sqIdx_value;
  reg  [49:0]      req_vaddr;
  reg              req_vaNeedExt;
  reg  [63:0]      req_gpaddr;
  reg  [15:0]      req_mask;
  reg              req_isForVSnonLeafPTE;
  reg              req_isvec;
  reg  [7:0]       req_elemIdx;
  reg  [2:0]       req_alignedType;
  reg  [3:0]       req_mbIndex;
  reg              req_portIndex;
  reg              needFlushPipe;
  reg  [2:0]       bufferState;
  wire             _reqSel_oldestIndex_T = io_enq_0_req_valid & io_enq_1_req_valid;
  wire             reqSel_oldest_differentFlag =
    io_enq_0_req_bits_uop_robIdx_flag ^ io_enq_1_req_bits_uop_robIdx_flag;
  wire             reqSel_oldest_compare =
    io_enq_0_req_bits_uop_robIdx_value > io_enq_1_req_bits_uop_robIdx_value;
  wire             _reqSel_oldestIndex_T_5 =
    io_enq_0_req_bits_uop_uopIdx > io_enq_1_req_bits_uop_uopIdx;
  wire             _reqSel_oldest_T_5 =
    reqSel_oldest_differentFlag ^ reqSel_oldest_compare
    | (reqSel_oldest_differentFlag
       ^ io_enq_0_req_bits_uop_robIdx_value >= io_enq_1_req_bits_uop_robIdx_value)
    & _reqSel_oldestIndex_T_5;
  wire             _reqSel_oldest_T_8 = io_enq_0_req_valid & ~io_enq_1_req_valid;
  wire             reqSel_oldest_valid =
    _reqSel_oldestIndex_T
      ? (_reqSel_oldest_T_5 ? io_enq_1_req_valid : io_enq_0_req_valid)
      : _reqSel_oldest_T_8 ? io_enq_0_req_valid : io_enq_1_req_valid;
  wire [6:0]       reqSel_oldest_bits_uop_uopIdx =
    _reqSel_oldestIndex_T
      ? (_reqSel_oldest_T_5 ? io_enq_1_req_bits_uop_uopIdx : io_enq_0_req_bits_uop_uopIdx)
      : _reqSel_oldest_T_8 ? io_enq_0_req_bits_uop_uopIdx : io_enq_1_req_bits_uop_uopIdx;
  wire             reqSel_oldest_bits_uop_robIdx_flag =
    _reqSel_oldestIndex_T
      ? (_reqSel_oldest_T_5
           ? io_enq_1_req_bits_uop_robIdx_flag
           : io_enq_0_req_bits_uop_robIdx_flag)
      : _reqSel_oldest_T_8
          ? io_enq_0_req_bits_uop_robIdx_flag
          : io_enq_1_req_bits_uop_robIdx_flag;
  wire [5:0]       reqSel_oldest_bits_uop_robIdx_value =
    _reqSel_oldestIndex_T
      ? (_reqSel_oldest_T_5
           ? io_enq_1_req_bits_uop_robIdx_value
           : io_enq_0_req_bits_uop_robIdx_value)
      : _reqSel_oldest_T_8
          ? io_enq_0_req_bits_uop_robIdx_value
          : io_enq_1_req_bits_uop_robIdx_value;
  wire             reqSel_3_0 =
    _reqSel_oldestIndex_T
      ? reqSel_oldest_differentFlag ^ reqSel_oldest_compare
        | {io_enq_0_req_bits_uop_robIdx_flag,
           io_enq_0_req_bits_uop_robIdx_value} == {io_enq_1_req_bits_uop_robIdx_flag,
                                                   io_enq_1_req_bits_uop_robIdx_value}
        & _reqSel_oldestIndex_T_5
      : ~(io_enq_0_req_valid & ~io_enq_1_req_valid);
  wire [6:0]       _flush_flushItself_T_2 =
    {io_redirect_bits_robIdx_flag, io_redirect_bits_robIdx_value};
  wire             reqRedirect =
    io_redirect_valid
    & (io_redirect_bits_level
       & {reqSel_oldest_bits_uop_robIdx_flag,
          reqSel_oldest_bits_uop_robIdx_value} == _flush_flushItself_T_2
       | reqSel_oldest_bits_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
       ^ reqSel_oldest_bits_uop_robIdx_value > io_redirect_bits_robIdx_value);
  wire             canEnq = ~req_valid & ~reqRedirect & reqSel_oldest_valid;
  wire [6:0]       _flush_flushItself_T_1 = {req_uop_robIdx_flag, req_uop_robIdx_value};
  wire             robMatch =
    req_valid & io_rob_pendingst
    & {io_rob_pendingPtr_flag, io_rob_pendingPtr_value} == _flush_flushItself_T_1;
  reg              s2_canEnq_next_r;
  reg              s2_reqSelPort_next_r;
  wire             _GEN = cross4KBPageBoundary & ~reqRedirect;
  wire             differentFlag =
    req_uop_robIdx_flag ^ reqSel_oldest_bits_uop_robIdx_flag;
  wire             _GEN_0 = bufferState == 3'h0;
  wire             _GEN_1 =
    reqSel_oldest_valid
    & (differentFlag ^ req_uop_robIdx_value > reqSel_oldest_bits_uop_robIdx_value
       | (differentFlag ^ req_uop_robIdx_value >= reqSel_oldest_bits_uop_robIdx_value)
       & req_uop_uopIdx > reqSel_oldest_bits_uop_uopIdx) & _GEN_0;
  wire             cross4KBPageEnq = _GEN & _GEN_1;
  wire             _io_enq_1_req_ready_T_2 = cross4KBPageBoundary & cross4KBPageEnq;
  wire             _io_toVecStoreMergeBuffer_1_flush_T = req_valid & cross4KBPageBoundary;
  reg              splitStoreReqs_0_uop_exceptionVec_0;
  reg              splitStoreReqs_0_uop_exceptionVec_1;
  reg              splitStoreReqs_0_uop_exceptionVec_2;
  reg              splitStoreReqs_0_uop_exceptionVec_4;
  reg              splitStoreReqs_0_uop_exceptionVec_5;
  reg              splitStoreReqs_0_uop_exceptionVec_8;
  reg              splitStoreReqs_0_uop_exceptionVec_9;
  reg              splitStoreReqs_0_uop_exceptionVec_10;
  reg              splitStoreReqs_0_uop_exceptionVec_11;
  reg              splitStoreReqs_0_uop_exceptionVec_12;
  reg              splitStoreReqs_0_uop_exceptionVec_13;
  reg              splitStoreReqs_0_uop_exceptionVec_14;
  reg              splitStoreReqs_0_uop_exceptionVec_16;
  reg              splitStoreReqs_0_uop_exceptionVec_17;
  reg              splitStoreReqs_0_uop_exceptionVec_18;
  reg              splitStoreReqs_0_uop_exceptionVec_19;
  reg              splitStoreReqs_0_uop_exceptionVec_20;
  reg              splitStoreReqs_0_uop_exceptionVec_21;
  reg              splitStoreReqs_0_uop_exceptionVec_22;
  reg  [3:0]       splitStoreReqs_0_uop_trigger;
  reg  [8:0]       splitStoreReqs_0_uop_fuOpType;
  reg  [7:0]       splitStoreReqs_0_uop_vpu_vstart;
  reg  [1:0]       splitStoreReqs_0_uop_vpu_veew;
  reg  [6:0]       splitStoreReqs_0_uop_uopIdx;
  reg              splitStoreReqs_0_uop_robIdx_flag;
  reg  [5:0]       splitStoreReqs_0_uop_robIdx_value;
  reg              splitStoreReqs_0_uop_sqIdx_flag;
  reg  [4:0]       splitStoreReqs_0_uop_sqIdx_value;
  reg  [49:0]      splitStoreReqs_0_vaddr;
  reg  [15:0]      splitStoreReqs_0_mask;
  reg              splitStoreReqs_0_is128bit;
  reg              splitStoreReqs_1_uop_exceptionVec_0;
  reg              splitStoreReqs_1_uop_exceptionVec_1;
  reg              splitStoreReqs_1_uop_exceptionVec_2;
  reg              splitStoreReqs_1_uop_exceptionVec_4;
  reg              splitStoreReqs_1_uop_exceptionVec_5;
  reg              splitStoreReqs_1_uop_exceptionVec_8;
  reg              splitStoreReqs_1_uop_exceptionVec_9;
  reg              splitStoreReqs_1_uop_exceptionVec_10;
  reg              splitStoreReqs_1_uop_exceptionVec_11;
  reg              splitStoreReqs_1_uop_exceptionVec_12;
  reg              splitStoreReqs_1_uop_exceptionVec_13;
  reg              splitStoreReqs_1_uop_exceptionVec_14;
  reg              splitStoreReqs_1_uop_exceptionVec_16;
  reg              splitStoreReqs_1_uop_exceptionVec_17;
  reg              splitStoreReqs_1_uop_exceptionVec_18;
  reg              splitStoreReqs_1_uop_exceptionVec_19;
  reg              splitStoreReqs_1_uop_exceptionVec_20;
  reg              splitStoreReqs_1_uop_exceptionVec_21;
  reg              splitStoreReqs_1_uop_exceptionVec_22;
  reg  [3:0]       splitStoreReqs_1_uop_trigger;
  reg  [8:0]       splitStoreReqs_1_uop_fuOpType;
  reg  [7:0]       splitStoreReqs_1_uop_vpu_vstart;
  reg  [1:0]       splitStoreReqs_1_uop_vpu_veew;
  reg  [6:0]       splitStoreReqs_1_uop_uopIdx;
  reg              splitStoreReqs_1_uop_robIdx_flag;
  reg  [5:0]       splitStoreReqs_1_uop_robIdx_value;
  reg              splitStoreReqs_1_uop_sqIdx_flag;
  reg  [4:0]       splitStoreReqs_1_uop_sqIdx_value;
  reg  [49:0]      splitStoreReqs_1_vaddr;
  reg  [15:0]      splitStoreReqs_1_mask;
  reg              splitStoreReqs_1_is128bit;
  reg  [47:0]      splitStoreResp_1_paddr;
  reg              isCrossPage;
  reg              exceptionVec_3;
  reg              exceptionVec_6;
  reg              exceptionVec_7;
  reg              exceptionVec_15;
  reg              exceptionVec_23;
  reg  [1:0]       unSentStores;
  reg              curPtr;
  reg              globalException;
  reg              globalUncache;
  reg              globalMMIO;
  reg              globalNC;
  reg              globalMemBackTypeMM;
  wire             hasException =
    io_splitStoreResp_bits_vecActive & ~io_splitStoreResp_bits_need_rep
    & (|{io_splitStoreResp_bits_uop_exceptionVec_23,
         io_splitStoreResp_bits_uop_exceptionVec_15,
         io_splitStoreResp_bits_uop_exceptionVec_7,
         io_splitStoreResp_bits_uop_exceptionVec_6,
         io_splitStoreResp_bits_uop_exceptionVec_3})
    | io_splitStoreResp_bits_uop_trigger == 4'h1;
  wire             isUncache =
    (io_splitStoreResp_bits_mmio | io_splitStoreResp_bits_nc)
    & ~io_splitStoreResp_bits_need_rep;
  wire             _GEN_2 = bufferState == 3'h1;
  wire [1:0]       _GEN_3 = {1'h0, curPtr};
  wire             _GEN_4 = hasException | isUncache;
  wire             _GEN_5 =
    io_splitStoreResp_bits_need_rep | (|(unSentStores & ~(2'h1 << _GEN_3)));
  reg              REG;
  wire [1:0]       alignedType = req_isvec ? req_alignedType[1:0] : req_uop_fuOpType[1:0];
  wire             _highPageAddress_T_2 = alignedType == 2'h2;
  wire [1:0]       _GEN_6 = {1'h0, alignedType == 2'h1};
  wire [4:0]       _highAddress_T_12 =
    5'({2'h0, {1'h0, _GEN_6 | {2{_highPageAddress_T_2}}} | {3{&alignedType}}}
       + req_vaddr[4:0]);
  wire [12:0]      _highPageAddress_T_12 =
    13'({10'h0, {1'h0, _GEN_6 | {2{_highPageAddress_T_2}}} | {3{&alignedType}}}
        + req_vaddr[12:0]);
  wire             cross16BytesBoundary =
    req_valid & _highAddress_T_12[4] != req_vaddr[4];
  assign cross4KBPageBoundary = req_valid & _highPageAddress_T_12[12] != req_vaddr[12];
  wire [3:0][49:0] _GEN_7 = {{req_vaddr}, {req_vaddr}, {50'(req_vaddr - 50'h1)}, {50'h0}};
  wire [3:0][49:0] _GEN_8 =
    {{50'(req_vaddr + 50'h1)},
     {50'(req_vaddr + 50'h2)},
     {50'(req_vaddr + 50'h3)},
     {50'h0}};
  wire [7:0][49:0] _GEN_9 =
    {{50'(req_vaddr - 50'h7)},
     {50'(req_vaddr - 50'h6)},
     {50'(req_vaddr - 50'h5)},
     {req_vaddr},
     {50'(req_vaddr - 50'h3)},
     {50'(req_vaddr - 50'h2)},
     {50'(req_vaddr - 50'h1)},
     {50'h0}};
  wire [3:0][49:0] _GEN_10 =
    {{_GEN_9[req_vaddr[2:0]]}, {_GEN_7[req_vaddr[1:0]]}, {req_vaddr}, {50'h0}};
  wire             _GEN_11 = ~_GEN_2 | ~cross16BytesBoundary | alignedType == 2'h0;
  wire [49:0]      lowAddrStore_vaddr = _GEN_11 ? 50'h0 : _GEN_10[alignedType];
  wire [7:0][49:0] _GEN_12 =
    {{50'(req_vaddr + 50'h1)},
     {50'(req_vaddr + 50'h2)},
     {50'(req_vaddr + 50'h3)},
     {50'(req_vaddr + 50'h4)},
     {50'(req_vaddr + 50'h5)},
     {50'(req_vaddr + 50'h6)},
     {50'(req_vaddr + 50'h7)},
     {50'h0}};
  wire [3:0][49:0] _GEN_13 =
    {{_GEN_12[req_vaddr[2:0]]},
     {_GEN_8[req_vaddr[1:0]]},
     {50'(req_vaddr + 50'h1)},
     {50'h0}};
  wire [49:0]      highAddrStore_vaddr = _GEN_11 ? 50'h0 : _GEN_13[alignedType];
  wire             io_splitStoreReq_valid_0 = req_valid & bufferState == 3'h2;
  wire             _io_vecWriteBack_1_valid_T = bufferState == 3'h4;
  wire             io_writeBack_valid_0 =
    req_valid & _io_vecWriteBack_1_valid_T & ~io_storeOutValid & ~req_isvec;
  wire             _io_writeBack_bits_uop_exceptionVec_3_T =
    globalUncache | globalException;
  wire             io_vecWriteBack_0_valid_0 =
    req_valid & _io_vecWriteBack_1_valid_T & req_isvec & ~io_storeVecOutValid
    & ~req_portIndex;
  wire [63:0]      io_vecWriteBack_1_bits_vaddr_0 = {14'h0, req_vaddr};
  wire             io_vecWriteBack_1_valid_0 =
    req_valid & _io_vecWriteBack_1_valid_T & req_isvec & ~io_storeVecOutValid
    & req_portIndex;
  wire             _GEN_14 = canEnq | req_valid;
  wire [3:0][8:0]  _GEN_15 = {{9'h0}, {9'h1}, {9'h2}, {req_uop_fuOpType}};
  wire [22:0]      _lowAddrStore_mask_T_21 = 23'hFF << lowAddrStore_vaddr[3:0];
  wire [22:0]      _lowAddrStore_mask_T_19 = 23'hFF << lowAddrStore_vaddr[3:0];
  wire [22:0]      _lowAddrStore_mask_T_17 = 23'hFF << lowAddrStore_vaddr[3:0];
  wire [18:0]      _lowAddrStore_mask_T_15 = 19'hF << lowAddrStore_vaddr[3:0];
  wire [22:0]      _lowAddrStore_mask_T_13 = 23'hFF << lowAddrStore_vaddr[3:0];
  wire [22:0]      _lowAddrStore_mask_T_11 = 23'hFF << lowAddrStore_vaddr[3:0];
  wire [22:0]      _lowAddrStore_mask_T_9 = 23'hFF << lowAddrStore_vaddr[3:0];
  wire [7:0][15:0] _GEN_16 =
    {{_lowAddrStore_mask_T_21[15:0]},
     {_lowAddrStore_mask_T_19[15:0]},
     {_lowAddrStore_mask_T_17[15:0]},
     {_lowAddrStore_mask_T_15[15:0]},
     {_lowAddrStore_mask_T_13[15:0]},
     {_lowAddrStore_mask_T_11[15:0]},
     {_lowAddrStore_mask_T_9[15:0]},
     {16'h0}};
  wire [16:0]      _lowAddrStore_mask_T_5 = 17'h3 << lowAddrStore_vaddr[3:0];
  wire [18:0]      _lowAddrStore_mask_T_3 = 19'hF << lowAddrStore_vaddr[3:0];
  wire [3:0][15:0] _GEN_17 =
    {{16'h1 << lowAddrStore_vaddr[3:0]},
     {_lowAddrStore_mask_T_5[15:0]},
     {_lowAddrStore_mask_T_3[15:0]},
     {16'h0}};
  wire [3:0][15:0] _GEN_18 =
    {{_GEN_16[req_vaddr[2:0]]},
     {_GEN_17[req_vaddr[1:0]]},
     {16'h1 << lowAddrStore_vaddr[3:0]},
     {16'h0}};
  wire [3:0][8:0]  _GEN_19 = {{9'h2}, {9'h1}, {9'h0}, {req_uop_fuOpType}};
  wire [22:0]      _highAddrStore_mask_T_21 = 23'hFF << highAddrStore_vaddr[3:0];
  wire [22:0]      _highAddrStore_mask_T_19 = 23'hFF << highAddrStore_vaddr[3:0];
  wire [22:0]      _highAddrStore_mask_T_17 = 23'hFF << highAddrStore_vaddr[3:0];
  wire [18:0]      _highAddrStore_mask_T_15 = 19'hF << highAddrStore_vaddr[3:0];
  wire [18:0]      _highAddrStore_mask_T_13 = 19'hF << highAddrStore_vaddr[3:0];
  wire [16:0]      _highAddrStore_mask_T_11 = 17'h3 << highAddrStore_vaddr[3:0];
  wire [7:0][15:0] _GEN_20 =
    {{_highAddrStore_mask_T_21[15:0]},
     {_highAddrStore_mask_T_19[15:0]},
     {_highAddrStore_mask_T_17[15:0]},
     {_highAddrStore_mask_T_15[15:0]},
     {_highAddrStore_mask_T_13[15:0]},
     {_highAddrStore_mask_T_11[15:0]},
     {16'h1 << highAddrStore_vaddr[3:0]},
     {16'h0}};
  wire [18:0]      _highAddrStore_mask_T_7 = 19'hF << highAddrStore_vaddr[3:0];
  wire [16:0]      _highAddrStore_mask_T_5 = 17'h3 << highAddrStore_vaddr[3:0];
  wire [3:0][15:0] _GEN_21 =
    {{_highAddrStore_mask_T_7[15:0]},
     {_highAddrStore_mask_T_5[15:0]},
     {16'h1 << highAddrStore_vaddr[3:0]},
     {16'h0}};
  wire [3:0][15:0] _GEN_22 =
    {{_GEN_20[req_vaddr[2:0]]},
     {_GEN_21[req_vaddr[1:0]]},
     {16'h1 << highAddrStore_vaddr[3:0]},
     {16'h0}};
  wire             s2_needRevoke =
    s2_canEnq_next_r
    & (io_enq_0_revoke & ~s2_reqSelPort_next_r | io_enq_1_revoke & s2_reqSelPort_next_r);
  wire             _GEN_23 = _GEN & _GEN_1 | needFlushPipe;
  wire             _GEN_24 = cross4KBPageBoundary & ~s2_needRevoke;
  wire             _GEN_25 = req_valid & ~s2_needRevoke;
  wire             _GEN_26 = bufferState == 3'h2;
  wire             _GEN_27 = bufferState == 3'h3;
  wire             _GEN_28 = io_splitStoreResp_valid & _GEN_4;
  wire             _GEN_29 = bufferState == 3'h4;
  wire             _GEN_30 = io_vecWriteBack_0_valid_0 | io_vecWriteBack_1_valid_0;
  wire             _GEN_31 = io_writeBack_ready & io_writeBack_valid_0;
  wire             _GEN_32 = _GEN_31 & (~isCrossPage | globalUncache | globalException);
  wire             _GEN_33 =
    bufferState == 3'h5 & io_sqControl_toStoreMisalignBuffer_doDeq;
  wire             _GEN_34 = _GEN_0 | _GEN_2 | _GEN_26 | _GEN_27;
  wire             _GEN_35 = _GEN_0 | _GEN_2 | _GEN_26;
  wire             _GEN_36 = ~_GEN_33 & isCrossPage;
  wire             _GEN_37 = _GEN_2 & cross16BytesBoundary;
  wire             _GEN_38 = ~_GEN_2 | ~cross16BytesBoundary;
  wire             lowAddrStore_uop_exceptionVec_0 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_0;
  wire             lowAddrStore_uop_exceptionVec_1 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_1;
  wire             lowAddrStore_uop_exceptionVec_2 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_2;
  wire             lowAddrStore_uop_exceptionVec_4 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_4;
  wire             lowAddrStore_uop_exceptionVec_5 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_5;
  wire             lowAddrStore_uop_exceptionVec_8 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_8;
  wire             lowAddrStore_uop_exceptionVec_9 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_9;
  wire             lowAddrStore_uop_exceptionVec_10 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_10;
  wire             lowAddrStore_uop_exceptionVec_11 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_11;
  wire             lowAddrStore_uop_exceptionVec_12 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_12;
  wire             lowAddrStore_uop_exceptionVec_13 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_13;
  wire             lowAddrStore_uop_exceptionVec_14 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_14;
  wire             lowAddrStore_uop_exceptionVec_16 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_16;
  wire             lowAddrStore_uop_exceptionVec_17 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_17;
  wire             lowAddrStore_uop_exceptionVec_18 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_18;
  wire             lowAddrStore_uop_exceptionVec_19 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_19;
  wire             lowAddrStore_uop_exceptionVec_20 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_20;
  wire             lowAddrStore_uop_exceptionVec_21 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_21;
  wire             lowAddrStore_uop_exceptionVec_22 =
    _GEN_2 & cross16BytesBoundary & req_uop_exceptionVec_22;
  wire [3:0]       lowAddrStore_uop_trigger = _GEN_37 ? req_uop_trigger : 4'h0;
  wire [7:0]       lowAddrStore_uop_vpu_vstart = _GEN_37 ? req_uop_vpu_vstart : 8'h0;
  wire [1:0]       lowAddrStore_uop_vpu_veew = _GEN_37 ? req_uop_vpu_veew : 2'h0;
  wire [6:0]       lowAddrStore_uop_uopIdx = _GEN_37 ? req_uop_uopIdx : 7'h0;
  wire             lowAddrStore_uop_robIdx_flag =
    _GEN_2 & cross16BytesBoundary & req_uop_robIdx_flag;
  wire [5:0]       lowAddrStore_uop_robIdx_value = _GEN_37 ? req_uop_robIdx_value : 6'h0;
  wire             lowAddrStore_uop_sqIdx_flag =
    _GEN_2 & cross16BytesBoundary & req_uop_sqIdx_flag;
  wire [4:0]       lowAddrStore_uop_sqIdx_value = _GEN_37 ? req_uop_sqIdx_value : 5'h0;
  wire [8:0]       _GEN_39 =
    req_vaddr[2:0] == 3'h5 | req_vaddr[2:0] == 3'h6 | (&(req_vaddr[2:0]))
      ? 9'h3
      : req_uop_fuOpType;
  wire             _GEN_40 = isUncache | hasException;
  wire             _GEN_41 =
    req_valid & io_redirect_valid
    & (io_redirect_bits_level & _flush_flushItself_T_1 == _flush_flushItself_T_2
       | req_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
       ^ req_uop_robIdx_value > io_redirect_bits_robIdx_value) | s2_needRevoke;
  wire [2:0]       _GEN_42 = _GEN_33 ? 3'h0 : bufferState;
  wire             _GEN_43 =
    _GEN_34 | ~(_GEN_29 ? (req_isvec ? _GEN_30 : _GEN_32) : _GEN_33);
  wire [7:0][2:0]  _GEN_44 =
    {{_GEN_42},
     {_GEN_42},
     {_GEN_42},
     {req_isvec
        ? (_GEN_30 ? 3'h0 : bufferState)
        : _GEN_32 ? 3'h0 : {2'h2, _GEN_31 & isCrossPage}},
     {REG
        ? 3'h4
        : io_splitStoreResp_valid ? (_GEN_4 ? 3'h4 : {2'h1, ~_GEN_5}) : bufferState},
     {io_splitStoreReq_ready & io_splitStoreReq_valid_0 ? 3'h3 : bufferState},
     {3'h2},
     {(_GEN_24 ? robMatch : _GEN_25) ? 3'h1 : bufferState}};
  wire [7:0][8:0]  _GEN_45 =
    {{_GEN_39}, {_GEN_39}, {_GEN_39}, {9'h2}, {9'h3}, {9'h3}, {9'h3}, {req_uop_fuOpType}};
  wire [3:0][8:0]  _GEN_46 =
    {{_GEN_45[req_vaddr[2:0]]}, {_GEN_15[req_vaddr[1:0]]}, {9'h0}, {req_uop_fuOpType}};
  wire [7:0][8:0]  _GEN_47 =
    {{_GEN_39}, {_GEN_39}, {_GEN_39}, {9'h2}, {9'h2}, {9'h1}, {9'h0}, {req_uop_fuOpType}};
  wire [3:0][8:0]  _GEN_48 =
    {{_GEN_47[req_vaddr[2:0]]}, {_GEN_19[req_vaddr[1:0]]}, {9'h0}, {req_uop_fuOpType}};
  wire [7:0]       _GEN_49 =
    {{_GEN_36},
     {_GEN_36},
     {_GEN_36},
     {req_isvec ? ~_GEN_30 & isCrossPage : ~_GEN_32 & isCrossPage},
     {isCrossPage},
     {isCrossPage},
     {isCrossPage},
     {_GEN_24 ? robMatch | isCrossPage : ~_GEN_25 & isCrossPage}};
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      req_valid <= 1'h0;
      needFlushPipe <= 1'h0;
      bufferState <= 3'h0;
      s2_canEnq_next_r <= 1'h0;
      s2_reqSelPort_next_r <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_0 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_1 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_2 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_4 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_5 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_8 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_9 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_10 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_11 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_12 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_13 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_14 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_16 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_17 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_18 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_19 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_20 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_21 <= 1'h0;
      splitStoreReqs_0_uop_exceptionVec_22 <= 1'h0;
      splitStoreReqs_0_uop_trigger <= 4'h0;
      splitStoreReqs_0_uop_fuOpType <= 9'h0;
      splitStoreReqs_0_uop_vpu_vstart <= 8'h0;
      splitStoreReqs_0_uop_vpu_veew <= 2'h0;
      splitStoreReqs_0_uop_uopIdx <= 7'h0;
      splitStoreReqs_0_uop_robIdx_flag <= 1'h0;
      splitStoreReqs_0_uop_robIdx_value <= 6'h0;
      splitStoreReqs_0_uop_sqIdx_flag <= 1'h0;
      splitStoreReqs_0_uop_sqIdx_value <= 5'h0;
      splitStoreReqs_0_vaddr <= 50'h0;
      splitStoreReqs_0_mask <= 16'h0;
      splitStoreReqs_0_is128bit <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_0 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_1 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_2 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_4 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_5 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_8 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_9 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_10 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_11 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_12 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_13 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_14 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_16 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_17 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_18 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_19 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_20 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_21 <= 1'h0;
      splitStoreReqs_1_uop_exceptionVec_22 <= 1'h0;
      splitStoreReqs_1_uop_trigger <= 4'h0;
      splitStoreReqs_1_uop_fuOpType <= 9'h0;
      splitStoreReqs_1_uop_vpu_vstart <= 8'h0;
      splitStoreReqs_1_uop_vpu_veew <= 2'h0;
      splitStoreReqs_1_uop_uopIdx <= 7'h0;
      splitStoreReqs_1_uop_robIdx_flag <= 1'h0;
      splitStoreReqs_1_uop_robIdx_value <= 6'h0;
      splitStoreReqs_1_uop_sqIdx_flag <= 1'h0;
      splitStoreReqs_1_uop_sqIdx_value <= 5'h0;
      splitStoreReqs_1_vaddr <= 50'h0;
      splitStoreReqs_1_mask <= 16'h0;
      splitStoreReqs_1_is128bit <= 1'h0;
      splitStoreResp_1_paddr <= 48'h0;
      isCrossPage <= 1'h0;
      exceptionVec_3 <= 1'h0;
      exceptionVec_6 <= 1'h0;
      exceptionVec_7 <= 1'h0;
      exceptionVec_15 <= 1'h0;
      exceptionVec_23 <= 1'h0;
      unSentStores <= 2'h0;
      curPtr <= 1'h0;
      globalException <= 1'h0;
      globalUncache <= 1'h0;
      globalMMIO <= 1'h0;
      globalNC <= 1'h0;
      globalMemBackTypeMM <= 1'h0;
    end
    else begin
      if (_GEN_41) begin
        req_valid <= cross4KBPageEnq & cross4KBPageBoundary & ~reqRedirect & req_valid;
        bufferState <= 3'h0;
        unSentStores <= 2'h0;
      end
      else begin
        if (_GEN_34)
          req_valid <= _GEN_14;
        else if (_GEN_29) begin
          if (req_isvec)
            req_valid <= ~_GEN_30 & _GEN_14;
          else
            req_valid <= ~_GEN_32 & _GEN_14;
        end
        else
          req_valid <= ~_GEN_33 & _GEN_14;
        bufferState <= _GEN_44[bufferState];
        if (io_splitStoreResp_valid) begin
          if (_GEN_40)
            unSentStores <= 2'h0;
          else if (io_splitStoreResp_bits_need_rep) begin
            if (_GEN_37)
              unSentStores <= 2'h3;
            else if (_GEN_43) begin
            end
            else
              unSentStores <= 2'h0;
          end
          else
            unSentStores <= unSentStores & ~(2'h1 << _GEN_3);
        end
        else if (_GEN_37)
          unSentStores <= 2'h3;
        else if (_GEN_43) begin
        end
        else
          unSentStores <= 2'h0;
      end
      needFlushPipe <=
        ~_GEN_41
        & (_GEN_34
             ? _GEN_23
             : _GEN_29
                 ? (req_isvec ? ~_GEN_30 & _GEN_23 : ~_GEN_32 & _GEN_23)
                 : ~_GEN_33 & _GEN_23);
      if (~(canEnq == s2_canEnq_next_r))
        s2_canEnq_next_r <= canEnq;
      if (~(reqSel_3_0 == s2_reqSelPort_next_r))
        s2_reqSelPort_next_r <= reqSel_3_0;
      if (_GEN_37) begin
        splitStoreReqs_0_uop_exceptionVec_0 <= lowAddrStore_uop_exceptionVec_0;
        splitStoreReqs_0_uop_exceptionVec_1 <= lowAddrStore_uop_exceptionVec_1;
        splitStoreReqs_0_uop_exceptionVec_2 <= lowAddrStore_uop_exceptionVec_2;
        splitStoreReqs_0_uop_exceptionVec_4 <= lowAddrStore_uop_exceptionVec_4;
        splitStoreReqs_0_uop_exceptionVec_5 <= lowAddrStore_uop_exceptionVec_5;
        splitStoreReqs_0_uop_exceptionVec_8 <= lowAddrStore_uop_exceptionVec_8;
        splitStoreReqs_0_uop_exceptionVec_9 <= lowAddrStore_uop_exceptionVec_9;
        splitStoreReqs_0_uop_exceptionVec_10 <= lowAddrStore_uop_exceptionVec_10;
        splitStoreReqs_0_uop_exceptionVec_11 <= lowAddrStore_uop_exceptionVec_11;
        splitStoreReqs_0_uop_exceptionVec_12 <= lowAddrStore_uop_exceptionVec_12;
        splitStoreReqs_0_uop_exceptionVec_13 <= lowAddrStore_uop_exceptionVec_13;
        splitStoreReqs_0_uop_exceptionVec_14 <= lowAddrStore_uop_exceptionVec_14;
        splitStoreReqs_0_uop_exceptionVec_16 <= lowAddrStore_uop_exceptionVec_16;
        splitStoreReqs_0_uop_exceptionVec_17 <= lowAddrStore_uop_exceptionVec_17;
        splitStoreReqs_0_uop_exceptionVec_18 <= lowAddrStore_uop_exceptionVec_18;
        splitStoreReqs_0_uop_exceptionVec_19 <= lowAddrStore_uop_exceptionVec_19;
        splitStoreReqs_0_uop_exceptionVec_20 <= lowAddrStore_uop_exceptionVec_20;
        splitStoreReqs_0_uop_exceptionVec_21 <= lowAddrStore_uop_exceptionVec_21;
        splitStoreReqs_0_uop_exceptionVec_22 <= lowAddrStore_uop_exceptionVec_22;
        splitStoreReqs_0_uop_trigger <= lowAddrStore_uop_trigger;
        splitStoreReqs_0_uop_fuOpType <= _GEN_37 ? _GEN_46[alignedType] : 9'h0;
        splitStoreReqs_0_uop_vpu_vstart <= lowAddrStore_uop_vpu_vstart;
        splitStoreReqs_0_uop_vpu_veew <= lowAddrStore_uop_vpu_veew;
        splitStoreReqs_0_uop_uopIdx <= lowAddrStore_uop_uopIdx;
        splitStoreReqs_0_uop_robIdx_flag <= lowAddrStore_uop_robIdx_flag;
        splitStoreReqs_0_uop_robIdx_value <= lowAddrStore_uop_robIdx_value;
        splitStoreReqs_0_uop_sqIdx_flag <= lowAddrStore_uop_sqIdx_flag;
        splitStoreReqs_0_uop_sqIdx_value <= lowAddrStore_uop_sqIdx_value;
        splitStoreReqs_0_vaddr <= lowAddrStore_vaddr;
        splitStoreReqs_0_mask <= _GEN_11 ? 16'h0 : _GEN_18[alignedType];
      end
      splitStoreReqs_0_is128bit <= _GEN_38 & splitStoreReqs_0_is128bit;
      if (_GEN_37) begin
        splitStoreReqs_1_uop_exceptionVec_0 <= lowAddrStore_uop_exceptionVec_0;
        splitStoreReqs_1_uop_exceptionVec_1 <= lowAddrStore_uop_exceptionVec_1;
        splitStoreReqs_1_uop_exceptionVec_2 <= lowAddrStore_uop_exceptionVec_2;
        splitStoreReqs_1_uop_exceptionVec_4 <= lowAddrStore_uop_exceptionVec_4;
        splitStoreReqs_1_uop_exceptionVec_5 <= lowAddrStore_uop_exceptionVec_5;
        splitStoreReqs_1_uop_exceptionVec_8 <= lowAddrStore_uop_exceptionVec_8;
        splitStoreReqs_1_uop_exceptionVec_9 <= lowAddrStore_uop_exceptionVec_9;
        splitStoreReqs_1_uop_exceptionVec_10 <= lowAddrStore_uop_exceptionVec_10;
        splitStoreReqs_1_uop_exceptionVec_11 <= lowAddrStore_uop_exceptionVec_11;
        splitStoreReqs_1_uop_exceptionVec_12 <= lowAddrStore_uop_exceptionVec_12;
        splitStoreReqs_1_uop_exceptionVec_13 <= lowAddrStore_uop_exceptionVec_13;
        splitStoreReqs_1_uop_exceptionVec_14 <= lowAddrStore_uop_exceptionVec_14;
        splitStoreReqs_1_uop_exceptionVec_16 <= lowAddrStore_uop_exceptionVec_16;
        splitStoreReqs_1_uop_exceptionVec_17 <= lowAddrStore_uop_exceptionVec_17;
        splitStoreReqs_1_uop_exceptionVec_18 <= lowAddrStore_uop_exceptionVec_18;
        splitStoreReqs_1_uop_exceptionVec_19 <= lowAddrStore_uop_exceptionVec_19;
        splitStoreReqs_1_uop_exceptionVec_20 <= lowAddrStore_uop_exceptionVec_20;
        splitStoreReqs_1_uop_exceptionVec_21 <= lowAddrStore_uop_exceptionVec_21;
        splitStoreReqs_1_uop_exceptionVec_22 <= lowAddrStore_uop_exceptionVec_22;
        splitStoreReqs_1_uop_trigger <= lowAddrStore_uop_trigger;
        splitStoreReqs_1_uop_fuOpType <= _GEN_37 ? _GEN_48[alignedType] : 9'h0;
        splitStoreReqs_1_uop_vpu_vstart <= lowAddrStore_uop_vpu_vstart;
        splitStoreReqs_1_uop_vpu_veew <= lowAddrStore_uop_vpu_veew;
        splitStoreReqs_1_uop_uopIdx <= lowAddrStore_uop_uopIdx;
        splitStoreReqs_1_uop_robIdx_flag <= lowAddrStore_uop_robIdx_flag;
        splitStoreReqs_1_uop_robIdx_value <= lowAddrStore_uop_robIdx_value;
        splitStoreReqs_1_uop_sqIdx_flag <= lowAddrStore_uop_sqIdx_flag;
        splitStoreReqs_1_uop_sqIdx_value <= lowAddrStore_uop_sqIdx_value;
        splitStoreReqs_1_vaddr <= highAddrStore_vaddr;
        splitStoreReqs_1_mask <= _GEN_11 ? 16'h0 : _GEN_22[alignedType];
      end
      splitStoreReqs_1_is128bit <= _GEN_38 & splitStoreReqs_1_is128bit;
      if (io_splitStoreResp_valid & curPtr)
        splitStoreResp_1_paddr <= io_splitStoreResp_bits_paddr;
      isCrossPage <= ~_GEN_41 & _GEN_49[bufferState];
      if (io_splitStoreResp_valid) begin
        exceptionVec_3 <=
          ~isUncache
          & (hasException
               ? exceptionVec_3 | io_splitStoreResp_bits_uop_exceptionVec_3
               : io_splitStoreResp_bits_need_rep & exceptionVec_3);
        exceptionVec_6 <=
          isUncache
          | (hasException
               ? exceptionVec_6 | io_splitStoreResp_bits_uop_exceptionVec_6
               : io_splitStoreResp_bits_need_rep & exceptionVec_6);
        exceptionVec_7 <=
          ~isUncache
          & (hasException
               ? exceptionVec_7 | io_splitStoreResp_bits_uop_exceptionVec_7
               : io_splitStoreResp_bits_need_rep & exceptionVec_7);
        exceptionVec_15 <=
          ~isUncache
          & (hasException
               ? exceptionVec_15 | io_splitStoreResp_bits_uop_exceptionVec_15
               : io_splitStoreResp_bits_need_rep & exceptionVec_15);
        exceptionVec_23 <=
          ~isUncache
          & (hasException
               ? exceptionVec_23 | io_splitStoreResp_bits_uop_exceptionVec_23
               : io_splitStoreResp_bits_need_rep & exceptionVec_23);
      end
      curPtr <=
        ~_GEN_41
        & (~io_splitStoreResp_valid | _GEN_40 | io_splitStoreResp_bits_need_rep
             ? _GEN_38
               & (_GEN_34
                    ? curPtr
                    : _GEN_29
                        ? (req_isvec ? ~_GEN_30 & curPtr : ~_GEN_32 & curPtr)
                        : ~_GEN_33 & curPtr)
             : 1'(curPtr - 1'h1));
      globalException <=
        ~_GEN_41
        & (_GEN_35
             ? globalException
             : _GEN_27
                 ? (_GEN_28 ? hasException : globalException)
                 : _GEN_29
                     ? (req_isvec
                          ? ~_GEN_30 & globalException
                          : ~_GEN_32 & globalException)
                     : ~_GEN_33 & globalException);
      globalUncache <=
        ~_GEN_41
        & (_GEN_35
             ? globalUncache
             : _GEN_27
                 ? (_GEN_28 ? isUncache : globalUncache)
                 : _GEN_29
                     ? (req_isvec ? ~_GEN_30 & globalUncache : ~_GEN_32 & globalUncache)
                     : ~_GEN_33 & globalUncache);
      globalMMIO <=
        ~_GEN_41
        & (_GEN_35
             ? globalMMIO
             : _GEN_27
                 ? (_GEN_28 ? io_splitStoreResp_bits_mmio : globalMMIO)
                 : _GEN_29
                     ? (req_isvec ? ~_GEN_30 & globalMMIO : ~_GEN_32 & globalMMIO)
                     : ~_GEN_33 & globalMMIO);
      globalNC <=
        ~_GEN_41
        & (_GEN_35
             ? globalNC
             : _GEN_27
                 ? (_GEN_28 ? io_splitStoreResp_bits_nc : globalNC)
                 : _GEN_29
                     ? (req_isvec ? ~_GEN_30 & globalNC : ~_GEN_32 & globalNC)
                     : ~_GEN_33 & globalNC);
      globalMemBackTypeMM <=
        ~_GEN_41
        & (_GEN_35
             ? globalMemBackTypeMM
             : _GEN_27
                 ? (_GEN_28 ? io_splitStoreResp_bits_memBackTypeMM : globalMemBackTypeMM)
                 : _GEN_29
                     ? (req_isvec
                          ? ~_GEN_30 & globalMemBackTypeMM
                          : ~_GEN_32 & globalMemBackTypeMM)
                     : ~_GEN_33 & globalMemBackTypeMM);
    end
  end // always @(posedge, posedge)
  wire             _GEN_50 = _GEN ? _GEN_1 : canEnq;
  always @(posedge clock) begin
    if (_GEN_50) begin
      req_uop_exceptionVec_0 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_0
               : io_enq_0_req_bits_uop_exceptionVec_0)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_0
              : io_enq_1_req_bits_uop_exceptionVec_0;
      req_uop_exceptionVec_1 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_1
               : io_enq_0_req_bits_uop_exceptionVec_1)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_1
              : io_enq_1_req_bits_uop_exceptionVec_1;
      req_uop_exceptionVec_2 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_2
               : io_enq_0_req_bits_uop_exceptionVec_2)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_2
              : io_enq_1_req_bits_uop_exceptionVec_2;
      req_uop_exceptionVec_4 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_4
               : io_enq_0_req_bits_uop_exceptionVec_4)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_4
              : io_enq_1_req_bits_uop_exceptionVec_4;
      req_uop_exceptionVec_5 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_5
               : io_enq_0_req_bits_uop_exceptionVec_5)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_5
              : io_enq_1_req_bits_uop_exceptionVec_5;
      req_uop_exceptionVec_8 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_8
               : io_enq_0_req_bits_uop_exceptionVec_8)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_8
              : io_enq_1_req_bits_uop_exceptionVec_8;
      req_uop_exceptionVec_9 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_9
               : io_enq_0_req_bits_uop_exceptionVec_9)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_9
              : io_enq_1_req_bits_uop_exceptionVec_9;
      req_uop_exceptionVec_10 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_10
               : io_enq_0_req_bits_uop_exceptionVec_10)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_10
              : io_enq_1_req_bits_uop_exceptionVec_10;
      req_uop_exceptionVec_11 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_11
               : io_enq_0_req_bits_uop_exceptionVec_11)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_11
              : io_enq_1_req_bits_uop_exceptionVec_11;
      req_uop_exceptionVec_12 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_12
               : io_enq_0_req_bits_uop_exceptionVec_12)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_12
              : io_enq_1_req_bits_uop_exceptionVec_12;
      req_uop_exceptionVec_13 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_13
               : io_enq_0_req_bits_uop_exceptionVec_13)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_13
              : io_enq_1_req_bits_uop_exceptionVec_13;
      req_uop_exceptionVec_14 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_14
               : io_enq_0_req_bits_uop_exceptionVec_14)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_14
              : io_enq_1_req_bits_uop_exceptionVec_14;
      req_uop_exceptionVec_16 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_16
               : io_enq_0_req_bits_uop_exceptionVec_16)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_16
              : io_enq_1_req_bits_uop_exceptionVec_16;
      req_uop_exceptionVec_17 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_17
               : io_enq_0_req_bits_uop_exceptionVec_17)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_17
              : io_enq_1_req_bits_uop_exceptionVec_17;
      req_uop_exceptionVec_18 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_18
               : io_enq_0_req_bits_uop_exceptionVec_18)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_18
              : io_enq_1_req_bits_uop_exceptionVec_18;
      req_uop_exceptionVec_19 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_19
               : io_enq_0_req_bits_uop_exceptionVec_19)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_19
              : io_enq_1_req_bits_uop_exceptionVec_19;
      req_uop_exceptionVec_20 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_20
               : io_enq_0_req_bits_uop_exceptionVec_20)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_20
              : io_enq_1_req_bits_uop_exceptionVec_20;
      req_uop_exceptionVec_21 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_21
               : io_enq_0_req_bits_uop_exceptionVec_21)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_21
              : io_enq_1_req_bits_uop_exceptionVec_21;
      req_uop_exceptionVec_22 <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_exceptionVec_22
               : io_enq_0_req_bits_uop_exceptionVec_22)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_exceptionVec_22
              : io_enq_1_req_bits_uop_exceptionVec_22;
      req_uop_trigger <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_trigger
               : io_enq_0_req_bits_uop_trigger)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_trigger
              : io_enq_1_req_bits_uop_trigger;
      req_uop_fuOpType <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_fuOpType
               : io_enq_0_req_bits_uop_fuOpType)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_fuOpType
              : io_enq_1_req_bits_uop_fuOpType;
      req_uop_vpu_vstart <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_vpu_vstart
               : io_enq_0_req_bits_uop_vpu_vstart)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_vpu_vstart
              : io_enq_1_req_bits_uop_vpu_vstart;
      req_uop_vpu_veew <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_vpu_veew
               : io_enq_0_req_bits_uop_vpu_veew)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_vpu_veew
              : io_enq_1_req_bits_uop_vpu_veew;
      req_uop_uopIdx <= reqSel_oldest_bits_uop_uopIdx;
      req_uop_robIdx_flag <= reqSel_oldest_bits_uop_robIdx_flag;
      req_uop_robIdx_value <= reqSel_oldest_bits_uop_robIdx_value;
      req_uop_sqIdx_flag <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_sqIdx_flag
               : io_enq_0_req_bits_uop_sqIdx_flag)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_sqIdx_flag
              : io_enq_1_req_bits_uop_sqIdx_flag;
      req_uop_sqIdx_value <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_uop_sqIdx_value
               : io_enq_0_req_bits_uop_sqIdx_value)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_uop_sqIdx_value
              : io_enq_1_req_bits_uop_sqIdx_value;
      req_vaddr <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5 ? io_enq_1_req_bits_vaddr : io_enq_0_req_bits_vaddr)
          : _reqSel_oldest_T_8 ? io_enq_0_req_bits_vaddr : io_enq_1_req_bits_vaddr;
    end
    if (_GEN) begin
      req_vaNeedExt <= ~_GEN_1 & req_vaNeedExt;
      req_isForVSnonLeafPTE <= ~_GEN_1 & req_isForVSnonLeafPTE;
    end
    else begin
      req_vaNeedExt <= ~canEnq & req_vaNeedExt;
      req_isForVSnonLeafPTE <= ~canEnq & req_isForVSnonLeafPTE;
    end
    if (_GEN_50) begin
      req_gpaddr <= 64'h0;
      req_mask <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5 ? io_enq_1_req_bits_mask : io_enq_0_req_bits_mask)
          : _reqSel_oldest_T_8 ? io_enq_0_req_bits_mask : io_enq_1_req_bits_mask;
      req_isvec <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5 ? io_enq_1_req_bits_isvec : io_enq_0_req_bits_isvec)
          : _reqSel_oldest_T_8 ? io_enq_0_req_bits_isvec : io_enq_1_req_bits_isvec;
      req_elemIdx <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5 ? io_enq_1_req_bits_elemIdx : io_enq_0_req_bits_elemIdx)
          : _reqSel_oldest_T_8 ? io_enq_0_req_bits_elemIdx : io_enq_1_req_bits_elemIdx;
      req_alignedType <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5
               ? io_enq_1_req_bits_alignedType
               : io_enq_0_req_bits_alignedType)
          : _reqSel_oldest_T_8
              ? io_enq_0_req_bits_alignedType
              : io_enq_1_req_bits_alignedType;
      req_mbIndex <=
        _reqSel_oldestIndex_T
          ? (_reqSel_oldest_T_5 ? io_enq_1_req_bits_mbIndex : io_enq_0_req_bits_mbIndex)
          : _reqSel_oldest_T_8 ? io_enq_0_req_bits_mbIndex : io_enq_1_req_bits_mbIndex;
      req_portIndex <= reqSel_3_0;
    end
    REG <= io_splitStoreResp_valid & ~_GEN_4 & ~_GEN_5;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:313];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [8:0] i = 9'h0; i < 9'h13A; i += 9'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        req_valid = _RANDOM[9'h0][0];
        req_uop_exceptionVec_0 = _RANDOM[9'h2][29];
        req_uop_exceptionVec_1 = _RANDOM[9'h2][30];
        req_uop_exceptionVec_2 = _RANDOM[9'h2][31];
        req_uop_exceptionVec_4 = _RANDOM[9'h3][1];
        req_uop_exceptionVec_5 = _RANDOM[9'h3][2];
        req_uop_exceptionVec_8 = _RANDOM[9'h3][5];
        req_uop_exceptionVec_9 = _RANDOM[9'h3][6];
        req_uop_exceptionVec_10 = _RANDOM[9'h3][7];
        req_uop_exceptionVec_11 = _RANDOM[9'h3][8];
        req_uop_exceptionVec_12 = _RANDOM[9'h3][9];
        req_uop_exceptionVec_13 = _RANDOM[9'h3][10];
        req_uop_exceptionVec_14 = _RANDOM[9'h3][11];
        req_uop_exceptionVec_16 = _RANDOM[9'h3][13];
        req_uop_exceptionVec_17 = _RANDOM[9'h3][14];
        req_uop_exceptionVec_18 = _RANDOM[9'h3][15];
        req_uop_exceptionVec_19 = _RANDOM[9'h3][16];
        req_uop_exceptionVec_20 = _RANDOM[9'h3][17];
        req_uop_exceptionVec_21 = _RANDOM[9'h3][18];
        req_uop_exceptionVec_22 = _RANDOM[9'h3][19];
        req_uop_trigger = _RANDOM[9'h3][26:23];
        req_uop_fuOpType = _RANDOM[9'h6][16:8];
        req_uop_vpu_vstart = {_RANDOM[9'h8][31:26], _RANDOM[9'h9][1:0]};
        req_uop_vpu_veew = _RANDOM[9'hE][2:1];
        req_uop_uopIdx = _RANDOM[9'hE][22:16];
        req_uop_robIdx_flag = _RANDOM[9'h12][10];
        req_uop_robIdx_value = _RANDOM[9'h12][16:11];
        req_uop_sqIdx_flag = _RANDOM[9'h27][23];
        req_uop_sqIdx_value = _RANDOM[9'h27][28:24];
        req_vaddr = {_RANDOM[9'h28][31:4], _RANDOM[9'h29][21:0]};
        req_vaNeedExt = _RANDOM[9'h2B][22];
        req_gpaddr = {_RANDOM[9'h2D][31:7], _RANDOM[9'h2E], _RANDOM[9'h2F][6:0]};
        req_mask = _RANDOM[9'h2F][22:7];
        req_isForVSnonLeafPTE = _RANDOM[9'h34][2];
        req_isvec = _RANDOM[9'h38][24];
        req_elemIdx = {_RANDOM[9'h38][31:29], _RANDOM[9'h39][4:0]};
        req_alignedType = _RANDOM[9'h39][7:5];
        req_mbIndex = _RANDOM[9'h39][11:8];
        req_portIndex = _RANDOM[9'h3E][14];
        needFlushPipe = _RANDOM[9'h3E][15];
        bufferState = _RANDOM[9'h3E][18:16];
        s2_canEnq_next_r = _RANDOM[9'h3E][19];
        s2_reqSelPort_next_r = _RANDOM[9'h3E][20];
        splitStoreReqs_0_uop_exceptionVec_0 = _RANDOM[9'h41][17];
        splitStoreReqs_0_uop_exceptionVec_1 = _RANDOM[9'h41][18];
        splitStoreReqs_0_uop_exceptionVec_2 = _RANDOM[9'h41][19];
        splitStoreReqs_0_uop_exceptionVec_4 = _RANDOM[9'h41][21];
        splitStoreReqs_0_uop_exceptionVec_5 = _RANDOM[9'h41][22];
        splitStoreReqs_0_uop_exceptionVec_8 = _RANDOM[9'h41][25];
        splitStoreReqs_0_uop_exceptionVec_9 = _RANDOM[9'h41][26];
        splitStoreReqs_0_uop_exceptionVec_10 = _RANDOM[9'h41][27];
        splitStoreReqs_0_uop_exceptionVec_11 = _RANDOM[9'h41][28];
        splitStoreReqs_0_uop_exceptionVec_12 = _RANDOM[9'h41][29];
        splitStoreReqs_0_uop_exceptionVec_13 = _RANDOM[9'h41][30];
        splitStoreReqs_0_uop_exceptionVec_14 = _RANDOM[9'h41][31];
        splitStoreReqs_0_uop_exceptionVec_16 = _RANDOM[9'h42][1];
        splitStoreReqs_0_uop_exceptionVec_17 = _RANDOM[9'h42][2];
        splitStoreReqs_0_uop_exceptionVec_18 = _RANDOM[9'h42][3];
        splitStoreReqs_0_uop_exceptionVec_19 = _RANDOM[9'h42][4];
        splitStoreReqs_0_uop_exceptionVec_20 = _RANDOM[9'h42][5];
        splitStoreReqs_0_uop_exceptionVec_21 = _RANDOM[9'h42][6];
        splitStoreReqs_0_uop_exceptionVec_22 = _RANDOM[9'h42][7];
        splitStoreReqs_0_uop_trigger = _RANDOM[9'h42][14:11];
        splitStoreReqs_0_uop_fuOpType = {_RANDOM[9'h44][31:28], _RANDOM[9'h45][4:0]};
        splitStoreReqs_0_uop_vpu_vstart = _RANDOM[9'h47][21:14];
        splitStoreReqs_0_uop_vpu_veew = _RANDOM[9'h4C][22:21];
        splitStoreReqs_0_uop_uopIdx = _RANDOM[9'h4D][10:4];
        splitStoreReqs_0_uop_robIdx_flag = _RANDOM[9'h50][30];
        splitStoreReqs_0_uop_robIdx_value = {_RANDOM[9'h50][31], _RANDOM[9'h51][4:0]};
        splitStoreReqs_0_uop_sqIdx_flag = _RANDOM[9'h66][11];
        splitStoreReqs_0_uop_sqIdx_value = _RANDOM[9'h66][16:12];
        splitStoreReqs_0_vaddr =
          {_RANDOM[9'h66][31:24], _RANDOM[9'h67], _RANDOM[9'h68][9:0]};
        splitStoreReqs_0_mask = {_RANDOM[9'h6D][31:27], _RANDOM[9'h6E][10:0]};
        splitStoreReqs_0_is128bit = _RANDOM[9'h77][14];
        splitStoreReqs_1_uop_exceptionVec_0 = _RANDOM[9'h7F][30];
        splitStoreReqs_1_uop_exceptionVec_1 = _RANDOM[9'h7F][31];
        splitStoreReqs_1_uop_exceptionVec_2 = _RANDOM[9'h80][0];
        splitStoreReqs_1_uop_exceptionVec_4 = _RANDOM[9'h80][2];
        splitStoreReqs_1_uop_exceptionVec_5 = _RANDOM[9'h80][3];
        splitStoreReqs_1_uop_exceptionVec_8 = _RANDOM[9'h80][6];
        splitStoreReqs_1_uop_exceptionVec_9 = _RANDOM[9'h80][7];
        splitStoreReqs_1_uop_exceptionVec_10 = _RANDOM[9'h80][8];
        splitStoreReqs_1_uop_exceptionVec_11 = _RANDOM[9'h80][9];
        splitStoreReqs_1_uop_exceptionVec_12 = _RANDOM[9'h80][10];
        splitStoreReqs_1_uop_exceptionVec_13 = _RANDOM[9'h80][11];
        splitStoreReqs_1_uop_exceptionVec_14 = _RANDOM[9'h80][12];
        splitStoreReqs_1_uop_exceptionVec_16 = _RANDOM[9'h80][14];
        splitStoreReqs_1_uop_exceptionVec_17 = _RANDOM[9'h80][15];
        splitStoreReqs_1_uop_exceptionVec_18 = _RANDOM[9'h80][16];
        splitStoreReqs_1_uop_exceptionVec_19 = _RANDOM[9'h80][17];
        splitStoreReqs_1_uop_exceptionVec_20 = _RANDOM[9'h80][18];
        splitStoreReqs_1_uop_exceptionVec_21 = _RANDOM[9'h80][19];
        splitStoreReqs_1_uop_exceptionVec_22 = _RANDOM[9'h80][20];
        splitStoreReqs_1_uop_trigger = _RANDOM[9'h80][27:24];
        splitStoreReqs_1_uop_fuOpType = _RANDOM[9'h83][17:9];
        splitStoreReqs_1_uop_vpu_vstart = {_RANDOM[9'h85][31:27], _RANDOM[9'h86][2:0]};
        splitStoreReqs_1_uop_vpu_veew = _RANDOM[9'h8B][3:2];
        splitStoreReqs_1_uop_uopIdx = _RANDOM[9'h8B][23:17];
        splitStoreReqs_1_uop_robIdx_flag = _RANDOM[9'h8F][11];
        splitStoreReqs_1_uop_robIdx_value = _RANDOM[9'h8F][17:12];
        splitStoreReqs_1_uop_sqIdx_flag = _RANDOM[9'hA4][24];
        splitStoreReqs_1_uop_sqIdx_value = _RANDOM[9'hA4][29:25];
        splitStoreReqs_1_vaddr = {_RANDOM[9'hA5][31:5], _RANDOM[9'hA6][22:0]};
        splitStoreReqs_1_mask = _RANDOM[9'hAC][23:8];
        splitStoreReqs_1_is128bit = _RANDOM[9'hB5][27];
        splitStoreResp_1_paddr =
          {_RANDOM[9'h125][31:19], _RANDOM[9'h126], _RANDOM[9'h127][2:0]};
        isCrossPage = _RANDOM[9'h138][11];
        exceptionVec_3 = _RANDOM[9'h138][15];
        exceptionVec_6 = _RANDOM[9'h138][18];
        exceptionVec_7 = _RANDOM[9'h138][19];
        exceptionVec_15 = _RANDOM[9'h138][27];
        exceptionVec_23 = _RANDOM[9'h139][3];
        unSentStores = _RANDOM[9'h139][5:4];
        curPtr = _RANDOM[9'h139][8];
        globalException = _RANDOM[9'h139][9];
        globalUncache = _RANDOM[9'h139][10];
        globalMMIO = _RANDOM[9'h139][11];
        globalNC = _RANDOM[9'h139][12];
        globalMemBackTypeMM = _RANDOM[9'h139][13];
        REG = _RANDOM[9'h139][14];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        req_valid = 1'h0;
        needFlushPipe = 1'h0;
        bufferState = 3'h0;
        s2_canEnq_next_r = 1'h0;
        s2_reqSelPort_next_r = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_0 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_1 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_2 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_4 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_5 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_8 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_9 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_10 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_11 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_12 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_13 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_14 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_16 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_17 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_18 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_19 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_20 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_21 = 1'h0;
        splitStoreReqs_0_uop_exceptionVec_22 = 1'h0;
        splitStoreReqs_0_uop_trigger = 4'h0;
        splitStoreReqs_0_uop_fuOpType = 9'h0;
        splitStoreReqs_0_uop_vpu_vstart = 8'h0;
        splitStoreReqs_0_uop_vpu_veew = 2'h0;
        splitStoreReqs_0_uop_uopIdx = 7'h0;
        splitStoreReqs_0_uop_robIdx_flag = 1'h0;
        splitStoreReqs_0_uop_robIdx_value = 6'h0;
        splitStoreReqs_0_uop_sqIdx_flag = 1'h0;
        splitStoreReqs_0_uop_sqIdx_value = 5'h0;
        splitStoreReqs_0_vaddr = 50'h0;
        splitStoreReqs_0_mask = 16'h0;
        splitStoreReqs_0_is128bit = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_0 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_1 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_2 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_4 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_5 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_8 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_9 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_10 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_11 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_12 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_13 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_14 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_16 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_17 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_18 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_19 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_20 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_21 = 1'h0;
        splitStoreReqs_1_uop_exceptionVec_22 = 1'h0;
        splitStoreReqs_1_uop_trigger = 4'h0;
        splitStoreReqs_1_uop_fuOpType = 9'h0;
        splitStoreReqs_1_uop_vpu_vstart = 8'h0;
        splitStoreReqs_1_uop_vpu_veew = 2'h0;
        splitStoreReqs_1_uop_uopIdx = 7'h0;
        splitStoreReqs_1_uop_robIdx_flag = 1'h0;
        splitStoreReqs_1_uop_robIdx_value = 6'h0;
        splitStoreReqs_1_uop_sqIdx_flag = 1'h0;
        splitStoreReqs_1_uop_sqIdx_value = 5'h0;
        splitStoreReqs_1_vaddr = 50'h0;
        splitStoreReqs_1_mask = 16'h0;
        splitStoreReqs_1_is128bit = 1'h0;
        splitStoreResp_1_paddr = 48'h0;
        isCrossPage = 1'h0;
        exceptionVec_3 = 1'h0;
        exceptionVec_6 = 1'h0;
        exceptionVec_7 = 1'h0;
        exceptionVec_15 = 1'h0;
        exceptionVec_23 = 1'h0;
        unSentStores = 2'h0;
        curPtr = 1'h0;
        globalException = 1'h0;
        globalUncache = 1'h0;
        globalMMIO = 1'h0;
        globalNC = 1'h0;
        globalMemBackTypeMM = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_enq_0_req_ready = ~reqSel_3_0 & (~req_valid | _io_enq_1_req_ready_T_2);
  assign io_enq_1_req_ready = reqSel_3_0 & (~req_valid | _io_enq_1_req_ready_T_2);
  assign io_splitStoreReq_valid = io_splitStoreReq_valid_0;
  assign io_splitStoreReq_bits_uop_exceptionVec_0 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_0 : splitStoreReqs_0_uop_exceptionVec_0;
  assign io_splitStoreReq_bits_uop_exceptionVec_1 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_1 : splitStoreReqs_0_uop_exceptionVec_1;
  assign io_splitStoreReq_bits_uop_exceptionVec_2 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_2 : splitStoreReqs_0_uop_exceptionVec_2;
  assign io_splitStoreReq_bits_uop_exceptionVec_4 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_4 : splitStoreReqs_0_uop_exceptionVec_4;
  assign io_splitStoreReq_bits_uop_exceptionVec_5 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_5 : splitStoreReqs_0_uop_exceptionVec_5;
  assign io_splitStoreReq_bits_uop_exceptionVec_8 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_8 : splitStoreReqs_0_uop_exceptionVec_8;
  assign io_splitStoreReq_bits_uop_exceptionVec_9 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_9 : splitStoreReqs_0_uop_exceptionVec_9;
  assign io_splitStoreReq_bits_uop_exceptionVec_10 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_10 : splitStoreReqs_0_uop_exceptionVec_10;
  assign io_splitStoreReq_bits_uop_exceptionVec_11 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_11 : splitStoreReqs_0_uop_exceptionVec_11;
  assign io_splitStoreReq_bits_uop_exceptionVec_12 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_12 : splitStoreReqs_0_uop_exceptionVec_12;
  assign io_splitStoreReq_bits_uop_exceptionVec_13 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_13 : splitStoreReqs_0_uop_exceptionVec_13;
  assign io_splitStoreReq_bits_uop_exceptionVec_14 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_14 : splitStoreReqs_0_uop_exceptionVec_14;
  assign io_splitStoreReq_bits_uop_exceptionVec_16 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_16 : splitStoreReqs_0_uop_exceptionVec_16;
  assign io_splitStoreReq_bits_uop_exceptionVec_17 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_17 : splitStoreReqs_0_uop_exceptionVec_17;
  assign io_splitStoreReq_bits_uop_exceptionVec_18 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_18 : splitStoreReqs_0_uop_exceptionVec_18;
  assign io_splitStoreReq_bits_uop_exceptionVec_19 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_19 : splitStoreReqs_0_uop_exceptionVec_19;
  assign io_splitStoreReq_bits_uop_exceptionVec_20 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_20 : splitStoreReqs_0_uop_exceptionVec_20;
  assign io_splitStoreReq_bits_uop_exceptionVec_21 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_21 : splitStoreReqs_0_uop_exceptionVec_21;
  assign io_splitStoreReq_bits_uop_exceptionVec_22 =
    curPtr ? splitStoreReqs_1_uop_exceptionVec_22 : splitStoreReqs_0_uop_exceptionVec_22;
  assign io_splitStoreReq_bits_uop_trigger =
    curPtr ? splitStoreReqs_1_uop_trigger : splitStoreReqs_0_uop_trigger;
  assign io_splitStoreReq_bits_uop_fuOpType =
    req_isvec
      ? req_uop_fuOpType
      : {4'h0,
         req_uop_fuOpType[4] & ~(req_uop_fuOpType[5]) & req_uop_fuOpType[8:7] == 2'h0,
         2'h0,
         curPtr
           ? splitStoreReqs_1_uop_fuOpType[1:0]
           : splitStoreReqs_0_uop_fuOpType[1:0]};
  assign io_splitStoreReq_bits_uop_vpu_vstart =
    curPtr ? splitStoreReqs_1_uop_vpu_vstart : splitStoreReqs_0_uop_vpu_vstart;
  assign io_splitStoreReq_bits_uop_vpu_veew =
    curPtr ? splitStoreReqs_1_uop_vpu_veew : splitStoreReqs_0_uop_vpu_veew;
  assign io_splitStoreReq_bits_uop_uopIdx =
    curPtr ? splitStoreReqs_1_uop_uopIdx : splitStoreReqs_0_uop_uopIdx;
  assign io_splitStoreReq_bits_uop_robIdx_flag =
    curPtr ? splitStoreReqs_1_uop_robIdx_flag : splitStoreReqs_0_uop_robIdx_flag;
  assign io_splitStoreReq_bits_uop_robIdx_value =
    curPtr ? splitStoreReqs_1_uop_robIdx_value : splitStoreReqs_0_uop_robIdx_value;
  assign io_splitStoreReq_bits_uop_sqIdx_flag =
    curPtr ? splitStoreReqs_1_uop_sqIdx_flag : splitStoreReqs_0_uop_sqIdx_flag;
  assign io_splitStoreReq_bits_uop_sqIdx_value =
    curPtr ? splitStoreReqs_1_uop_sqIdx_value : splitStoreReqs_0_uop_sqIdx_value;
  assign io_splitStoreReq_bits_vaddr =
    curPtr ? splitStoreReqs_1_vaddr : splitStoreReqs_0_vaddr;
  assign io_splitStoreReq_bits_mask =
    curPtr ? splitStoreReqs_1_mask : splitStoreReqs_0_mask;
  assign io_splitStoreReq_bits_isvec = req_isvec;
  assign io_splitStoreReq_bits_is128bit =
    curPtr ? splitStoreReqs_1_is128bit : splitStoreReqs_0_is128bit;
  assign io_splitStoreReq_bits_isFinalSplit = curPtr;
  assign io_writeBack_valid = io_writeBack_valid_0;
  assign io_writeBack_bits_uop_exceptionVec_3 =
    _io_writeBack_bits_uop_exceptionVec_3_T & exceptionVec_3;
  assign io_writeBack_bits_uop_exceptionVec_6 =
    _io_writeBack_bits_uop_exceptionVec_3_T & exceptionVec_6;
  assign io_writeBack_bits_uop_exceptionVec_7 =
    _io_writeBack_bits_uop_exceptionVec_3_T & exceptionVec_7;
  assign io_writeBack_bits_uop_exceptionVec_15 =
    _io_writeBack_bits_uop_exceptionVec_3_T & exceptionVec_15;
  assign io_writeBack_bits_uop_exceptionVec_23 =
    _io_writeBack_bits_uop_exceptionVec_3_T & exceptionVec_23;
  assign io_writeBack_bits_uop_trigger = req_uop_trigger;
  assign io_writeBack_bits_uop_flushPipe = needFlushPipe;
  assign io_writeBack_bits_uop_robIdx_flag = req_uop_robIdx_flag;
  assign io_writeBack_bits_uop_robIdx_value = req_uop_robIdx_value;
  assign io_writeBack_bits_debug_isMMIO = globalMMIO;
  assign io_writeBack_bits_debug_isNCIO = globalNC & ~globalMemBackTypeMM;
  assign io_vecWriteBack_0_valid = io_vecWriteBack_0_valid_0;
  assign io_vecWriteBack_0_bits_mBIndex = req_mbIndex[2:0];
  assign io_vecWriteBack_0_bits_exceptionVec_3 = exceptionVec_3;
  assign io_vecWriteBack_0_bits_exceptionVec_6 = exceptionVec_6;
  assign io_vecWriteBack_0_bits_exceptionVec_7 = exceptionVec_7;
  assign io_vecWriteBack_0_bits_exceptionVec_15 = exceptionVec_15;
  assign io_vecWriteBack_0_bits_exceptionVec_23 = exceptionVec_23;
  assign io_vecWriteBack_0_bits_hasException = globalException;
  assign io_vecWriteBack_0_bits_vaddr = io_vecWriteBack_1_bits_vaddr_0;
  assign io_vecWriteBack_0_bits_vaNeedExt = req_vaNeedExt;
  assign io_vecWriteBack_0_bits_gpaddr = req_gpaddr;
  assign io_vecWriteBack_0_bits_isForVSnonLeafPTE = req_isForVSnonLeafPTE;
  assign io_vecWriteBack_0_bits_vstart = req_uop_vpu_vstart;
  assign io_vecWriteBack_0_bits_elemIdx = req_elemIdx;
  assign io_vecWriteBack_0_bits_mask = req_mask;
  assign io_vecWriteBack_1_valid = io_vecWriteBack_1_valid_0;
  assign io_vecWriteBack_1_bits_mBIndex = req_mbIndex[2:0];
  assign io_vecWriteBack_1_bits_exceptionVec_3 = exceptionVec_3;
  assign io_vecWriteBack_1_bits_exceptionVec_6 = exceptionVec_6;
  assign io_vecWriteBack_1_bits_exceptionVec_7 = exceptionVec_7;
  assign io_vecWriteBack_1_bits_exceptionVec_15 = exceptionVec_15;
  assign io_vecWriteBack_1_bits_exceptionVec_23 = exceptionVec_23;
  assign io_vecWriteBack_1_bits_hasException = globalException;
  assign io_vecWriteBack_1_bits_vaddr = io_vecWriteBack_1_bits_vaddr_0;
  assign io_vecWriteBack_1_bits_vaNeedExt = req_vaNeedExt;
  assign io_vecWriteBack_1_bits_gpaddr = req_gpaddr;
  assign io_vecWriteBack_1_bits_isForVSnonLeafPTE = req_isForVSnonLeafPTE;
  assign io_vecWriteBack_1_bits_vstart = req_uop_vpu_vstart;
  assign io_vecWriteBack_1_bits_elemIdx = req_elemIdx;
  assign io_vecWriteBack_1_bits_mask = req_mask;
  assign io_sqControl_toStoreQueue_crossPageWithHit =
    {io_sqControl_toStoreMisalignBuffer_sqPtr_flag,
     io_sqControl_toStoreMisalignBuffer_sqPtr_value} == {req_uop_sqIdx_flag,
                                                         req_uop_sqIdx_value}
    & isCrossPage;
  assign io_sqControl_toStoreQueue_crossPageCanDeq = ~isCrossPage | bufferState == 3'h5;
  assign io_sqControl_toStoreQueue_paddr = {splitStoreResp_1_paddr[47:3], 3'h0};
  assign io_sqControl_toStoreQueue_withSameUop =
    {io_sqControl_toStoreMisalignBuffer_uop_robIdx_flag,
     io_sqControl_toStoreMisalignBuffer_uop_robIdx_value} == _flush_flushItself_T_1
    & io_sqControl_toStoreMisalignBuffer_uop_uopIdx == req_uop_uopIdx & req_isvec
    & robMatch & isCrossPage;
  assign io_toVecStoreMergeBuffer_0_mbIndex = req_mbIndex[2:0];
  assign io_toVecStoreMergeBuffer_0_flush =
    _io_toVecStoreMergeBuffer_1_flush_T & cross4KBPageEnq & ~req_portIndex;
  assign io_toVecStoreMergeBuffer_1_mbIndex = req_mbIndex[2:0];
  assign io_toVecStoreMergeBuffer_1_flush =
    _io_toVecStoreMergeBuffer_1_flush_T & cross4KBPageEnq & req_portIndex;
  assign io_full = req_valid;
endmodule

