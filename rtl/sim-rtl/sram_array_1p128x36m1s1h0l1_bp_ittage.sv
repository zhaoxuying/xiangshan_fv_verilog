// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module sram_array_1p128x36m1s1h0l1_bp_ittage(
  input         RW0_clk,
  input  [6:0]  RW0_addr,
  input         RW0_en,
  input         RW0_wmode,
  input  [35:0] RW0_wmask,
  input  [35:0] RW0_wdata,
  output [35:0] RW0_rdata
);

  wire array_RW0_rdata_MPORT_wmask_35;
  wire array_RW0_rdata_MPORT_wmask_34;
  wire array_RW0_rdata_MPORT_wmask_33;
  wire array_RW0_rdata_MPORT_wmask_32;
  wire array_RW0_rdata_MPORT_wmask_31;
  wire array_RW0_rdata_MPORT_wmask_30;
  wire array_RW0_rdata_MPORT_wmask_29;
  wire array_RW0_rdata_MPORT_wmask_28;
  wire array_RW0_rdata_MPORT_wmask_27;
  wire array_RW0_rdata_MPORT_wmask_26;
  wire array_RW0_rdata_MPORT_wmask_25;
  wire array_RW0_rdata_MPORT_wmask_24;
  wire array_RW0_rdata_MPORT_wmask_23;
  wire array_RW0_rdata_MPORT_wmask_22;
  wire array_RW0_rdata_MPORT_wmask_21;
  wire array_RW0_rdata_MPORT_wmask_20;
  wire array_RW0_rdata_MPORT_wmask_19;
  wire array_RW0_rdata_MPORT_wmask_18;
  wire array_RW0_rdata_MPORT_wmask_17;
  wire array_RW0_rdata_MPORT_wmask_16;
  wire array_RW0_rdata_MPORT_wmask_15;
  wire array_RW0_rdata_MPORT_wmask_14;
  wire array_RW0_rdata_MPORT_wmask_13;
  wire array_RW0_rdata_MPORT_wmask_12;
  wire array_RW0_rdata_MPORT_wmask_11;
  wire array_RW0_rdata_MPORT_wmask_10;
  wire array_RW0_rdata_MPORT_wmask_9;
  wire array_RW0_rdata_MPORT_wmask_8;
  wire array_RW0_rdata_MPORT_wmask_7;
  wire array_RW0_rdata_MPORT_wmask_6;
  wire array_RW0_rdata_MPORT_wmask_5;
  wire array_RW0_rdata_MPORT_wmask_4;
  wire array_RW0_rdata_MPORT_wmask_3;
  wire array_RW0_rdata_MPORT_wmask_2;
  wire array_RW0_rdata_MPORT_wmask_1;
  wire array_RW0_rdata_MPORT_wmask_0;
  assign array_RW0_rdata_MPORT_wmask_0 = RW0_wmode & RW0_wmask[0];
  assign array_RW0_rdata_MPORT_wmask_1 = RW0_wmode & RW0_wmask[1];
  assign array_RW0_rdata_MPORT_wmask_2 = RW0_wmode & RW0_wmask[2];
  assign array_RW0_rdata_MPORT_wmask_3 = RW0_wmode & RW0_wmask[3];
  assign array_RW0_rdata_MPORT_wmask_4 = RW0_wmode & RW0_wmask[4];
  assign array_RW0_rdata_MPORT_wmask_5 = RW0_wmode & RW0_wmask[5];
  assign array_RW0_rdata_MPORT_wmask_6 = RW0_wmode & RW0_wmask[6];
  assign array_RW0_rdata_MPORT_wmask_7 = RW0_wmode & RW0_wmask[7];
  assign array_RW0_rdata_MPORT_wmask_8 = RW0_wmode & RW0_wmask[8];
  assign array_RW0_rdata_MPORT_wmask_9 = RW0_wmode & RW0_wmask[9];
  assign array_RW0_rdata_MPORT_wmask_10 = RW0_wmode & RW0_wmask[10];
  assign array_RW0_rdata_MPORT_wmask_11 = RW0_wmode & RW0_wmask[11];
  assign array_RW0_rdata_MPORT_wmask_12 = RW0_wmode & RW0_wmask[12];
  assign array_RW0_rdata_MPORT_wmask_13 = RW0_wmode & RW0_wmask[13];
  assign array_RW0_rdata_MPORT_wmask_14 = RW0_wmode & RW0_wmask[14];
  assign array_RW0_rdata_MPORT_wmask_15 = RW0_wmode & RW0_wmask[15];
  assign array_RW0_rdata_MPORT_wmask_16 = RW0_wmode & RW0_wmask[16];
  assign array_RW0_rdata_MPORT_wmask_17 = RW0_wmode & RW0_wmask[17];
  assign array_RW0_rdata_MPORT_wmask_18 = RW0_wmode & RW0_wmask[18];
  assign array_RW0_rdata_MPORT_wmask_19 = RW0_wmode & RW0_wmask[19];
  assign array_RW0_rdata_MPORT_wmask_20 = RW0_wmode & RW0_wmask[20];
  assign array_RW0_rdata_MPORT_wmask_21 = RW0_wmode & RW0_wmask[21];
  assign array_RW0_rdata_MPORT_wmask_22 = RW0_wmode & RW0_wmask[22];
  assign array_RW0_rdata_MPORT_wmask_23 = RW0_wmode & RW0_wmask[23];
  assign array_RW0_rdata_MPORT_wmask_24 = RW0_wmode & RW0_wmask[24];
  assign array_RW0_rdata_MPORT_wmask_25 = RW0_wmode & RW0_wmask[25];
  assign array_RW0_rdata_MPORT_wmask_26 = RW0_wmode & RW0_wmask[26];
  assign array_RW0_rdata_MPORT_wmask_27 = RW0_wmode & RW0_wmask[27];
  assign array_RW0_rdata_MPORT_wmask_28 = RW0_wmode & RW0_wmask[28];
  assign array_RW0_rdata_MPORT_wmask_29 = RW0_wmode & RW0_wmask[29];
  assign array_RW0_rdata_MPORT_wmask_30 = RW0_wmode & RW0_wmask[30];
  assign array_RW0_rdata_MPORT_wmask_31 = RW0_wmode & RW0_wmask[31];
  assign array_RW0_rdata_MPORT_wmask_32 = RW0_wmode & RW0_wmask[32];
  assign array_RW0_rdata_MPORT_wmask_33 = RW0_wmode & RW0_wmask[33];
  assign array_RW0_rdata_MPORT_wmask_34 = RW0_wmode & RW0_wmask[34];
  assign array_RW0_rdata_MPORT_wmask_35 = RW0_wmode & RW0_wmask[35];
  array_6 array (
    .RW0_addr  (RW0_addr),
    .RW0_en    (RW0_en),
    .RW0_clk   (RW0_clk),
    .RW0_wmode (RW0_en & RW0_wmode & (|RW0_wmask)),
    .RW0_wdata (RW0_wdata),
    .RW0_rdata (RW0_rdata),
    .RW0_wmask
      ({array_RW0_rdata_MPORT_wmask_35,
        array_RW0_rdata_MPORT_wmask_34,
        array_RW0_rdata_MPORT_wmask_33,
        array_RW0_rdata_MPORT_wmask_32,
        array_RW0_rdata_MPORT_wmask_31,
        array_RW0_rdata_MPORT_wmask_30,
        array_RW0_rdata_MPORT_wmask_29,
        array_RW0_rdata_MPORT_wmask_28,
        array_RW0_rdata_MPORT_wmask_27,
        array_RW0_rdata_MPORT_wmask_26,
        array_RW0_rdata_MPORT_wmask_25,
        array_RW0_rdata_MPORT_wmask_24,
        array_RW0_rdata_MPORT_wmask_23,
        array_RW0_rdata_MPORT_wmask_22,
        array_RW0_rdata_MPORT_wmask_21,
        array_RW0_rdata_MPORT_wmask_20,
        array_RW0_rdata_MPORT_wmask_19,
        array_RW0_rdata_MPORT_wmask_18,
        array_RW0_rdata_MPORT_wmask_17,
        array_RW0_rdata_MPORT_wmask_16,
        array_RW0_rdata_MPORT_wmask_15,
        array_RW0_rdata_MPORT_wmask_14,
        array_RW0_rdata_MPORT_wmask_13,
        array_RW0_rdata_MPORT_wmask_12,
        array_RW0_rdata_MPORT_wmask_11,
        array_RW0_rdata_MPORT_wmask_10,
        array_RW0_rdata_MPORT_wmask_9,
        array_RW0_rdata_MPORT_wmask_8,
        array_RW0_rdata_MPORT_wmask_7,
        array_RW0_rdata_MPORT_wmask_6,
        array_RW0_rdata_MPORT_wmask_5,
        array_RW0_rdata_MPORT_wmask_4,
        array_RW0_rdata_MPORT_wmask_3,
        array_RW0_rdata_MPORT_wmask_2,
        array_RW0_rdata_MPORT_wmask_1,
        array_RW0_rdata_MPORT_wmask_0})
  );
endmodule

