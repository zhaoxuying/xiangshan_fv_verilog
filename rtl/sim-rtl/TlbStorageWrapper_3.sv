// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TlbStorageWrapper_3(
  input  clock,
  input  reset,
  output io_r_resp_0_bits_hit,
  output io_r_resp_0_bits_perm_0_pf,
  output io_r_resp_0_bits_perm_0_af,
  output io_r_resp_0_bits_perm_0_v,
  output io_r_resp_0_bits_perm_0_a,
  output io_r_resp_0_bits_perm_0_u,
  output io_r_resp_0_bits_perm_0_x,
  output io_r_resp_0_bits_perm_0_w,
  output io_r_resp_0_bits_perm_0_r,
  output io_r_resp_0_bits_g_perm_0_pf,
  output io_r_resp_0_bits_g_perm_0_af,
  output io_r_resp_0_bits_g_perm_0_a,
  output io_r_resp_0_bits_g_perm_0_x,
  output io_r_resp_0_bits_g_perm_0_r,
  output io_r_resp_1_bits_hit,
  output io_r_resp_1_bits_perm_0_pf,
  output io_r_resp_1_bits_perm_0_af,
  output io_r_resp_1_bits_perm_0_v,
  output io_r_resp_1_bits_perm_0_a,
  output io_r_resp_1_bits_perm_0_u,
  output io_r_resp_1_bits_perm_0_x,
  output io_r_resp_1_bits_perm_0_w,
  output io_r_resp_1_bits_perm_0_r,
  output io_r_resp_1_bits_g_perm_0_pf,
  output io_r_resp_1_bits_g_perm_0_af,
  output io_r_resp_1_bits_g_perm_0_a,
  output io_r_resp_1_bits_g_perm_0_x,
  output io_r_resp_1_bits_g_perm_0_r,
  input  io_w_valid,
  input  io_w_bits_data_s1_entry_perm_d,
  input  io_w_bits_data_s1_entry_perm_a,
  input  io_w_bits_data_s1_entry_perm_g,
  input  io_w_bits_data_s1_entry_perm_u,
  input  io_w_bits_data_s1_entry_perm_x,
  input  io_w_bits_data_s1_entry_perm_w,
  input  io_w_bits_data_s1_entry_perm_r,
  input  io_w_bits_data_s1_entry_v,
  input  io_w_bits_data_s1_pf,
  input  io_w_bits_data_s1_af,
  input  io_w_bits_data_s2_entry_perm_d,
  input  io_w_bits_data_s2_entry_perm_a,
  input  io_w_bits_data_s2_entry_perm_g,
  input  io_w_bits_data_s2_entry_perm_u,
  input  io_w_bits_data_s2_entry_perm_x,
  input  io_w_bits_data_s2_entry_perm_w,
  input  io_w_bits_data_s2_entry_perm_r,
  input  io_w_bits_data_s2_gpf,
  input  io_w_bits_data_s2_gaf
);

  wire       _page_pftlb_storage_fa_io_access_0_touch_ways_valid;
  wire [1:0] _page_pftlb_storage_fa_io_access_0_touch_ways_bits;
  wire       _page_pftlb_storage_fa_io_access_1_touch_ways_valid;
  wire [1:0] _page_pftlb_storage_fa_io_access_1_touch_ways_bits;
  reg  [2:0] refill_idx_state_reg;
  wire       _refill_idx_state_reg_T_3 =
    _page_pftlb_storage_fa_io_access_0_touch_ways_bits[1]
      ? ~(_page_pftlb_storage_fa_io_access_0_touch_ways_bits[0])
      : refill_idx_state_reg[1];
  wire       _refill_idx_state_reg_T_7 =
    _page_pftlb_storage_fa_io_access_0_touch_ways_bits[1]
      ? refill_idx_state_reg[0]
      : ~(_page_pftlb_storage_fa_io_access_0_touch_ways_bits[0]);
  wire [1:0] _refill_idx_state_reg_T_9 =
    _page_pftlb_storage_fa_io_access_0_touch_ways_valid
      ? {_refill_idx_state_reg_T_3, _refill_idx_state_reg_T_7}
      : refill_idx_state_reg[1:0];
  always @(posedge clock or posedge reset) begin
    if (reset)
      refill_idx_state_reg <= 3'h0;
    else if (_page_pftlb_storage_fa_io_access_0_touch_ways_valid
             | _page_pftlb_storage_fa_io_access_1_touch_ways_valid) begin
      if (_page_pftlb_storage_fa_io_access_1_touch_ways_valid)
        refill_idx_state_reg <=
          {~(_page_pftlb_storage_fa_io_access_1_touch_ways_bits[1]),
           _page_pftlb_storage_fa_io_access_1_touch_ways_bits[1]
             ? ~(_page_pftlb_storage_fa_io_access_1_touch_ways_bits[0])
             : _refill_idx_state_reg_T_9[1],
           _page_pftlb_storage_fa_io_access_1_touch_ways_bits[1]
             ? _refill_idx_state_reg_T_9[0]
             : ~(_page_pftlb_storage_fa_io_access_1_touch_ways_bits[0])};
      else if (_page_pftlb_storage_fa_io_access_0_touch_ways_valid)
        refill_idx_state_reg <=
          {~(_page_pftlb_storage_fa_io_access_0_touch_ways_bits[1]),
           _refill_idx_state_reg_T_3,
           _refill_idx_state_reg_T_7};
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        refill_idx_state_reg = _RANDOM[/*Zero width*/ 1'b0][2:0];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        refill_idx_state_reg = 3'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  TLBFA_3 page_pftlb_storage_fa (
    .clock                          (clock),
    .reset                          (reset),
    .io_r_resp_0_bits_hit           (io_r_resp_0_bits_hit),
    .io_r_resp_0_bits_perm_0_pf     (io_r_resp_0_bits_perm_0_pf),
    .io_r_resp_0_bits_perm_0_af     (io_r_resp_0_bits_perm_0_af),
    .io_r_resp_0_bits_perm_0_v      (io_r_resp_0_bits_perm_0_v),
    .io_r_resp_0_bits_perm_0_a      (io_r_resp_0_bits_perm_0_a),
    .io_r_resp_0_bits_perm_0_u      (io_r_resp_0_bits_perm_0_u),
    .io_r_resp_0_bits_perm_0_x      (io_r_resp_0_bits_perm_0_x),
    .io_r_resp_0_bits_perm_0_w      (io_r_resp_0_bits_perm_0_w),
    .io_r_resp_0_bits_perm_0_r      (io_r_resp_0_bits_perm_0_r),
    .io_r_resp_0_bits_g_perm_0_pf   (io_r_resp_0_bits_g_perm_0_pf),
    .io_r_resp_0_bits_g_perm_0_af   (io_r_resp_0_bits_g_perm_0_af),
    .io_r_resp_0_bits_g_perm_0_a    (io_r_resp_0_bits_g_perm_0_a),
    .io_r_resp_0_bits_g_perm_0_x    (io_r_resp_0_bits_g_perm_0_x),
    .io_r_resp_0_bits_g_perm_0_r    (io_r_resp_0_bits_g_perm_0_r),
    .io_r_resp_1_bits_hit           (io_r_resp_1_bits_hit),
    .io_r_resp_1_bits_perm_0_pf     (io_r_resp_1_bits_perm_0_pf),
    .io_r_resp_1_bits_perm_0_af     (io_r_resp_1_bits_perm_0_af),
    .io_r_resp_1_bits_perm_0_v      (io_r_resp_1_bits_perm_0_v),
    .io_r_resp_1_bits_perm_0_a      (io_r_resp_1_bits_perm_0_a),
    .io_r_resp_1_bits_perm_0_u      (io_r_resp_1_bits_perm_0_u),
    .io_r_resp_1_bits_perm_0_x      (io_r_resp_1_bits_perm_0_x),
    .io_r_resp_1_bits_perm_0_w      (io_r_resp_1_bits_perm_0_w),
    .io_r_resp_1_bits_perm_0_r      (io_r_resp_1_bits_perm_0_r),
    .io_r_resp_1_bits_g_perm_0_pf   (io_r_resp_1_bits_g_perm_0_pf),
    .io_r_resp_1_bits_g_perm_0_af   (io_r_resp_1_bits_g_perm_0_af),
    .io_r_resp_1_bits_g_perm_0_a    (io_r_resp_1_bits_g_perm_0_a),
    .io_r_resp_1_bits_g_perm_0_x    (io_r_resp_1_bits_g_perm_0_x),
    .io_r_resp_1_bits_g_perm_0_r    (io_r_resp_1_bits_g_perm_0_r),
    .io_w_valid                     (io_w_valid),
    .io_w_bits_wayIdx
      ({refill_idx_state_reg[2],
        refill_idx_state_reg[2] ? refill_idx_state_reg[1] : refill_idx_state_reg[0]}),
    .io_w_bits_data_s1_entry_perm_d (io_w_bits_data_s1_entry_perm_d),
    .io_w_bits_data_s1_entry_perm_a (io_w_bits_data_s1_entry_perm_a),
    .io_w_bits_data_s1_entry_perm_g (io_w_bits_data_s1_entry_perm_g),
    .io_w_bits_data_s1_entry_perm_u (io_w_bits_data_s1_entry_perm_u),
    .io_w_bits_data_s1_entry_perm_x (io_w_bits_data_s1_entry_perm_x),
    .io_w_bits_data_s1_entry_perm_w (io_w_bits_data_s1_entry_perm_w),
    .io_w_bits_data_s1_entry_perm_r (io_w_bits_data_s1_entry_perm_r),
    .io_w_bits_data_s1_entry_v      (io_w_bits_data_s1_entry_v),
    .io_w_bits_data_s1_pf           (io_w_bits_data_s1_pf),
    .io_w_bits_data_s1_af           (io_w_bits_data_s1_af),
    .io_w_bits_data_s2_entry_perm_d (io_w_bits_data_s2_entry_perm_d),
    .io_w_bits_data_s2_entry_perm_a (io_w_bits_data_s2_entry_perm_a),
    .io_w_bits_data_s2_entry_perm_g (io_w_bits_data_s2_entry_perm_g),
    .io_w_bits_data_s2_entry_perm_u (io_w_bits_data_s2_entry_perm_u),
    .io_w_bits_data_s2_entry_perm_x (io_w_bits_data_s2_entry_perm_x),
    .io_w_bits_data_s2_entry_perm_w (io_w_bits_data_s2_entry_perm_w),
    .io_w_bits_data_s2_entry_perm_r (io_w_bits_data_s2_entry_perm_r),
    .io_w_bits_data_s2_gpf          (io_w_bits_data_s2_gpf),
    .io_w_bits_data_s2_gaf          (io_w_bits_data_s2_gaf),
    .io_access_0_touch_ways_valid   (_page_pftlb_storage_fa_io_access_0_touch_ways_valid),
    .io_access_0_touch_ways_bits    (_page_pftlb_storage_fa_io_access_0_touch_ways_bits),
    .io_access_1_touch_ways_valid   (_page_pftlb_storage_fa_io_access_1_touch_ways_valid),
    .io_access_1_touch_ways_bits    (_page_pftlb_storage_fa_io_access_1_touch_ways_bits)
  );
endmodule

