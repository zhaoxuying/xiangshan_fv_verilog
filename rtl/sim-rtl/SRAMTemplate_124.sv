// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SRAMTemplate_124(
  input        clock,
  output       io_r_req_ready,
  input        io_r_req_valid,
  input        io_r_req_bits_setIdx,
  output       io_r_resp_data_0_dirty,
  output [1:0] io_r_resp_data_0_state,
  output       io_r_resp_data_0_clients,
  output       io_r_resp_data_0_accessed,
  output       io_r_resp_data_0_tagErr,
  output       io_r_resp_data_0_dataErr,
  output       io_r_resp_data_1_dirty,
  output [1:0] io_r_resp_data_1_state,
  output       io_r_resp_data_1_clients,
  output       io_r_resp_data_1_accessed,
  output       io_r_resp_data_1_tagErr,
  output       io_r_resp_data_1_dataErr,
  output       io_r_resp_data_2_dirty,
  output [1:0] io_r_resp_data_2_state,
  output       io_r_resp_data_2_clients,
  output       io_r_resp_data_2_accessed,
  output       io_r_resp_data_2_tagErr,
  output       io_r_resp_data_2_dataErr,
  output       io_r_resp_data_3_dirty,
  output [1:0] io_r_resp_data_3_state,
  output       io_r_resp_data_3_clients,
  output       io_r_resp_data_3_accessed,
  output       io_r_resp_data_3_tagErr,
  output       io_r_resp_data_3_dataErr,
  output       io_w_req_ready,
  input        io_w_req_valid,
  input        io_w_req_bits_setIdx,
  input        io_w_req_bits_data_0_dirty,
  input  [1:0] io_w_req_bits_data_0_state,
  input        io_w_req_bits_data_0_clients,
  input        io_w_req_bits_data_0_accessed,
  input        io_w_req_bits_data_0_tagErr,
  input        io_w_req_bits_data_0_dataErr,
  input        io_w_req_bits_data_1_dirty,
  input  [1:0] io_w_req_bits_data_1_state,
  input        io_w_req_bits_data_1_clients,
  input        io_w_req_bits_data_1_accessed,
  input        io_w_req_bits_data_1_tagErr,
  input        io_w_req_bits_data_1_dataErr,
  input        io_w_req_bits_data_2_dirty,
  input  [1:0] io_w_req_bits_data_2_state,
  input        io_w_req_bits_data_2_clients,
  input        io_w_req_bits_data_2_accessed,
  input        io_w_req_bits_data_2_tagErr,
  input        io_w_req_bits_data_2_dataErr,
  input        io_w_req_bits_data_3_dirty,
  input  [1:0] io_w_req_bits_data_3_state,
  input        io_w_req_bits_data_3_clients,
  input        io_w_req_bits_data_3_accessed,
  input        io_w_req_bits_data_3_tagErr,
  input        io_w_req_bits_data_3_dataErr,
  input  [3:0] io_w_req_bits_waymask
);

  wire [27:0] _array_RW0_rdata;
  sram_array_1p2x28m7s1h0l1_l2_meta array (
    .RW0_clk   (clock),
    .RW0_addr  (io_w_req_valid ? io_w_req_bits_setIdx : io_r_req_bits_setIdx),
    .RW0_en    (io_w_req_valid | ~io_w_req_valid & io_r_req_valid),
    .RW0_wmode (io_w_req_valid),
    .RW0_wmask (io_w_req_bits_waymask),
    .RW0_wdata
      ({io_w_req_bits_data_3_dirty,
        io_w_req_bits_data_3_state,
        io_w_req_bits_data_3_clients,
        io_w_req_bits_data_3_accessed,
        io_w_req_bits_data_3_tagErr,
        io_w_req_bits_data_3_dataErr,
        io_w_req_bits_data_2_dirty,
        io_w_req_bits_data_2_state,
        io_w_req_bits_data_2_clients,
        io_w_req_bits_data_2_accessed,
        io_w_req_bits_data_2_tagErr,
        io_w_req_bits_data_2_dataErr,
        io_w_req_bits_data_1_dirty,
        io_w_req_bits_data_1_state,
        io_w_req_bits_data_1_clients,
        io_w_req_bits_data_1_accessed,
        io_w_req_bits_data_1_tagErr,
        io_w_req_bits_data_1_dataErr,
        io_w_req_bits_data_0_dirty,
        io_w_req_bits_data_0_state,
        io_w_req_bits_data_0_clients,
        io_w_req_bits_data_0_accessed,
        io_w_req_bits_data_0_tagErr,
        io_w_req_bits_data_0_dataErr}),
    .RW0_rdata (_array_RW0_rdata)
  );
  assign io_r_req_ready = ~io_w_req_valid;
  assign io_r_resp_data_0_dirty = _array_RW0_rdata[6];
  assign io_r_resp_data_0_state = _array_RW0_rdata[5:4];
  assign io_r_resp_data_0_clients = _array_RW0_rdata[3];
  assign io_r_resp_data_0_accessed = _array_RW0_rdata[2];
  assign io_r_resp_data_0_tagErr = _array_RW0_rdata[1];
  assign io_r_resp_data_0_dataErr = _array_RW0_rdata[0];
  assign io_r_resp_data_1_dirty = _array_RW0_rdata[13];
  assign io_r_resp_data_1_state = _array_RW0_rdata[12:11];
  assign io_r_resp_data_1_clients = _array_RW0_rdata[10];
  assign io_r_resp_data_1_accessed = _array_RW0_rdata[9];
  assign io_r_resp_data_1_tagErr = _array_RW0_rdata[8];
  assign io_r_resp_data_1_dataErr = _array_RW0_rdata[7];
  assign io_r_resp_data_2_dirty = _array_RW0_rdata[20];
  assign io_r_resp_data_2_state = _array_RW0_rdata[19:18];
  assign io_r_resp_data_2_clients = _array_RW0_rdata[17];
  assign io_r_resp_data_2_accessed = _array_RW0_rdata[16];
  assign io_r_resp_data_2_tagErr = _array_RW0_rdata[15];
  assign io_r_resp_data_2_dataErr = _array_RW0_rdata[14];
  assign io_r_resp_data_3_dirty = _array_RW0_rdata[27];
  assign io_r_resp_data_3_state = _array_RW0_rdata[26:25];
  assign io_r_resp_data_3_clients = _array_RW0_rdata[24];
  assign io_r_resp_data_3_accessed = _array_RW0_rdata[23];
  assign io_r_resp_data_3_tagErr = _array_RW0_rdata[22];
  assign io_r_resp_data_3_dataErr = _array_RW0_rdata[21];
  assign io_w_req_ready = 1'h1;
endmodule

