// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module AXI4Flash(
  input         clock,
  input         reset,
  output        auto_in_aw_ready,
  input         auto_in_aw_valid,
  input  [1:0]  auto_in_aw_bits_id,
  input  [28:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  output        auto_in_w_ready,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
  input         auto_in_b_ready,
  output        auto_in_b_valid,
  output [1:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
  input         auto_in_ar_valid,
  input  [1:0]  auto_in_ar_bits_id,
  input  [28:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input         auto_in_r_ready,
  output        auto_in_r_valid,
  output [1:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last
);

  wire [63:0] nodeIn_r_bits_data;
  reg  [1:0]  state;
  wire        nodeIn_aw_valid = auto_in_aw_valid;
  wire [1:0]  nodeIn_aw_bits_id = auto_in_aw_bits_id;
  wire [28:0] nodeIn_aw_bits_addr = auto_in_aw_bits_addr;
  wire [7:0]  nodeIn_aw_bits_len = auto_in_aw_bits_len;
  wire [2:0]  nodeIn_aw_bits_size = auto_in_aw_bits_size;
  wire [1:0]  nodeIn_aw_bits_burst = auto_in_aw_bits_burst;
  wire        nodeIn_aw_bits_lock = auto_in_aw_bits_lock;
  wire [3:0]  nodeIn_aw_bits_cache = auto_in_aw_bits_cache;
  wire [2:0]  nodeIn_aw_bits_prot = auto_in_aw_bits_prot;
  wire [3:0]  nodeIn_aw_bits_qos = auto_in_aw_bits_qos;
  wire        nodeIn_w_valid = auto_in_w_valid;
  wire [63:0] nodeIn_w_bits_data = auto_in_w_bits_data;
  wire [7:0]  nodeIn_w_bits_strb = auto_in_w_bits_strb;
  wire        nodeIn_w_bits_last = auto_in_w_bits_last;
  wire        nodeIn_b_ready = auto_in_b_ready;
  wire        nodeIn_ar_valid = auto_in_ar_valid;
  wire [1:0]  nodeIn_ar_bits_id = auto_in_ar_bits_id;
  wire [28:0] nodeIn_ar_bits_addr = auto_in_ar_bits_addr;
  wire [7:0]  nodeIn_ar_bits_len = auto_in_ar_bits_len;
  wire [2:0]  nodeIn_ar_bits_size = auto_in_ar_bits_size;
  wire [1:0]  nodeIn_ar_bits_burst = auto_in_ar_bits_burst;
  wire        nodeIn_ar_bits_lock = auto_in_ar_bits_lock;
  wire [3:0]  nodeIn_ar_bits_cache = auto_in_ar_bits_cache;
  wire [2:0]  nodeIn_ar_bits_prot = auto_in_ar_bits_prot;
  wire [3:0]  nodeIn_ar_bits_qos = auto_in_ar_bits_qos;
  wire        nodeIn_r_ready = auto_in_r_ready;
  wire [1:0]  nodeIn_b_bits_resp = 2'h0;
  wire [1:0]  nodeIn_r_bits_resp = 2'h0;
  wire        nodeIn_ar_ready = ~(|state);
  wire        _nodeIn_r_bits_user_T = nodeIn_ar_ready & nodeIn_ar_valid;
  reg  [7:0]  readBeatCnt;
  reg  [7:0]  len_hold_data;
  reg  [28:0] raddr_hold_data;
  wire        nodeIn_r_bits_last =
    readBeatCnt == (_nodeIn_r_bits_user_T ? nodeIn_ar_bits_len : len_hold_data);
  wire        nodeIn_r_valid = state == 2'h1;
  wire        nodeIn_aw_ready = ~(|state) & ~nodeIn_ar_valid;
  wire        nodeIn_w_ready = state == 2'h2;
  wire        nodeIn_b_valid = &state;
  reg  [1:0]  nodeIn_b_bits_id_r;
  wire [1:0]  nodeIn_b_bits_id = nodeIn_b_bits_id_r;
  reg  [1:0]  nodeIn_r_bits_id_r;
  wire [1:0]  nodeIn_r_bits_id = nodeIn_r_bits_id_r;
  wire        _GEN = nodeIn_r_ready & nodeIn_r_valid;
  wire        _nodeIn_b_bits_user_T = nodeIn_aw_ready & nodeIn_aw_valid;
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
      readBeatCnt <= 8'h0;
    end
    else begin
      if (|state) begin
        if (state == 2'h1) begin
          if (_GEN & nodeIn_r_bits_last)
            state <= 2'h0;
        end
        else if (state == 2'h2) begin
          if (nodeIn_w_ready & nodeIn_w_valid & nodeIn_w_bits_last)
            state <= 2'h3;
        end
        else if ((&state) & nodeIn_b_ready & nodeIn_b_valid)
          state <= 2'h0;
      end
      else if (_nodeIn_b_bits_user_T)
        state <= 2'h2;
      else if (_nodeIn_r_bits_user_T)
        state <= 2'h1;
      if (_GEN) begin
        if (nodeIn_r_bits_last)
          readBeatCnt <= 8'h0;
        else
          readBeatCnt <= 8'(readBeatCnt + 8'h1);
      end
    end
    if (_nodeIn_r_bits_user_T) begin
      len_hold_data <= nodeIn_ar_bits_len;
      raddr_hold_data <= nodeIn_ar_bits_addr;
      nodeIn_r_bits_id_r <= nodeIn_ar_bits_id;
    end
    if (_nodeIn_b_bits_user_T)
      nodeIn_b_bits_id_r <= nodeIn_aw_bits_id;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        state = _RANDOM[2'h0][1:0];
        readBeatCnt = _RANDOM[2'h0][9:2];
        len_hold_data = _RANDOM[2'h0][17:10];
        raddr_hold_data = {_RANDOM[2'h0][31:18], _RANDOM[2'h1][14:0]};
        nodeIn_b_bits_id_r = _RANDOM[2'h2][21:20];
        nodeIn_r_bits_id_r = _RANDOM[2'h2][23:22];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DifftestFlash DifftestFlash (
    .clock   (clock),
    .io_en   (_nodeIn_r_bits_user_T),
    .io_addr
      ({16'h0,
        _nodeIn_r_bits_user_T ? nodeIn_ar_bits_addr[15:3] : raddr_hold_data[15:3],
        3'h0}),
    .io_data (nodeIn_r_bits_data)
  );
  assign auto_in_aw_ready = nodeIn_aw_ready;
  assign auto_in_w_ready = nodeIn_w_ready;
  assign auto_in_b_valid = nodeIn_b_valid;
  assign auto_in_b_bits_id = nodeIn_b_bits_id;
  assign auto_in_b_bits_resp = nodeIn_b_bits_resp;
  assign auto_in_ar_ready = nodeIn_ar_ready;
  assign auto_in_r_valid = nodeIn_r_valid;
  assign auto_in_r_bits_id = nodeIn_r_bits_id;
  assign auto_in_r_bits_data = nodeIn_r_bits_data;
  assign auto_in_r_bits_resp = nodeIn_r_bits_resp;
  assign auto_in_r_bits_last = nodeIn_r_bits_last;
endmodule

