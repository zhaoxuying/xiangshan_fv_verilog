// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module dt_48x1(
  input  [5:0] R0_addr,
  input        R0_en,
  input        R0_clk,
  output       R0_data,
  input  [5:0] R1_addr,
  input        R1_en,
  input        R1_clk,
  output       R1_data,
  input  [5:0] R2_addr,
  input        R2_en,
  input        R2_clk,
  output       R2_data,
  input  [5:0] R3_addr,
  input        R3_en,
  input        R3_clk,
  output       R3_data,
  input  [5:0] R4_addr,
  input        R4_en,
  input        R4_clk,
  output       R4_data,
  input  [5:0] R5_addr,
  input        R5_en,
  input        R5_clk,
  output       R5_data,
  input  [5:0] R6_addr,
  input        R6_en,
  input        R6_clk,
  output       R6_data,
  input  [5:0] R7_addr,
  input        R7_en,
  input        R7_clk,
  output       R7_data,
  input  [5:0] W0_addr,
  input        W0_en,
  input        W0_clk,
  input        W0_data,
  input  [5:0] W1_addr,
  input        W1_en,
  input        W1_clk,
  input        W1_data,
  input  [5:0] W2_addr,
  input        W2_en,
  input        W2_clk,
  input        W2_data,
  input  [5:0] W3_addr,
  input        W3_en,
  input        W3_clk,
  input        W3_data,
  input  [5:0] W4_addr,
  input        W4_en,
  input        W4_clk,
  input        W4_data,
  input  [5:0] W5_addr,
  input        W5_en,
  input        W5_clk,
  input        W5_data
);

  reg Memory[0:47];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
    if (W1_en & 1'h1)
      Memory[W1_addr] <= W1_data;
    if (W2_en & 1'h1)
      Memory[W2_addr] <= W2_data;
    if (W3_en & 1'h1)
      Memory[W3_addr] <= W3_data;
    if (W4_en & 1'h1)
      Memory[W4_addr] <= W4_data;
    if (W5_en & 1'h1)
      Memory[W5_addr] <= W5_data;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_
    reg [31:0] _RANDOM_MEM;
    initial begin
      `INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_MEM_INIT
        for (logic [5:0] i = 6'h0; i < 6'h30; i += 6'h1) begin
          _RANDOM_MEM = `RANDOM;
          Memory[i] = _RANDOM_MEM[0];
        end
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = Memory[R0_addr];
  assign R1_data = Memory[R1_addr];
  assign R2_data = Memory[R2_addr];
  assign R3_data = Memory[R3_addr];
  assign R4_data = Memory[R4_addr];
  assign R5_data = Memory[R5_addr];
  assign R6_data = Memory[R6_addr];
  assign R7_data = Memory[R7_addr];
endmodule

