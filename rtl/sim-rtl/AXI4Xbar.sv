// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module AXI4Xbar(
  input         clock,
  input         reset,
  output        auto_in_aw_ready,
  input         auto_in_aw_valid,
  input  [1:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  output        auto_in_w_ready,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
  input         auto_in_b_ready,
  output        auto_in_b_valid,
  output [1:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
  input         auto_in_ar_valid,
  input  [1:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input         auto_in_r_ready,
  output        auto_in_r_valid,
  output [1:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last,
  input         auto_out_4_aw_ready,
  output        auto_out_4_aw_valid,
  output [1:0]  auto_out_4_aw_bits_id,
  output [30:0] auto_out_4_aw_bits_addr,
  output [7:0]  auto_out_4_aw_bits_len,
  output [2:0]  auto_out_4_aw_bits_size,
  output [1:0]  auto_out_4_aw_bits_burst,
  output        auto_out_4_aw_bits_lock,
  output [3:0]  auto_out_4_aw_bits_cache,
  output [2:0]  auto_out_4_aw_bits_prot,
  output [3:0]  auto_out_4_aw_bits_qos,
  input         auto_out_4_w_ready,
  output        auto_out_4_w_valid,
  output [63:0] auto_out_4_w_bits_data,
  output [7:0]  auto_out_4_w_bits_strb,
  output        auto_out_4_w_bits_last,
  output        auto_out_4_b_ready,
  input         auto_out_4_b_valid,
  input  [1:0]  auto_out_4_b_bits_id,
  input         auto_out_4_ar_ready,
  output        auto_out_4_ar_valid,
  output [1:0]  auto_out_4_ar_bits_id,
  output [30:0] auto_out_4_ar_bits_addr,
  output [7:0]  auto_out_4_ar_bits_len,
  output [2:0]  auto_out_4_ar_bits_size,
  output [1:0]  auto_out_4_ar_bits_burst,
  output        auto_out_4_ar_bits_lock,
  output [3:0]  auto_out_4_ar_bits_cache,
  output [2:0]  auto_out_4_ar_bits_prot,
  output [3:0]  auto_out_4_ar_bits_qos,
  output        auto_out_4_r_ready,
  input         auto_out_4_r_valid,
  input  [1:0]  auto_out_4_r_bits_id,
  input         auto_out_3_aw_ready,
  output        auto_out_3_aw_valid,
  output [1:0]  auto_out_3_aw_bits_id,
  output [30:0] auto_out_3_aw_bits_addr,
  output [7:0]  auto_out_3_aw_bits_len,
  output [2:0]  auto_out_3_aw_bits_size,
  output [1:0]  auto_out_3_aw_bits_burst,
  output        auto_out_3_aw_bits_lock,
  output [3:0]  auto_out_3_aw_bits_cache,
  output [2:0]  auto_out_3_aw_bits_prot,
  output [3:0]  auto_out_3_aw_bits_qos,
  input         auto_out_3_w_ready,
  output        auto_out_3_w_valid,
  output [63:0] auto_out_3_w_bits_data,
  output [7:0]  auto_out_3_w_bits_strb,
  output        auto_out_3_w_bits_last,
  output        auto_out_3_b_ready,
  input         auto_out_3_b_valid,
  input  [1:0]  auto_out_3_b_bits_id,
  input  [1:0]  auto_out_3_b_bits_resp,
  input         auto_out_3_ar_ready,
  output        auto_out_3_ar_valid,
  output [1:0]  auto_out_3_ar_bits_id,
  output [30:0] auto_out_3_ar_bits_addr,
  output [7:0]  auto_out_3_ar_bits_len,
  output [2:0]  auto_out_3_ar_bits_size,
  output [1:0]  auto_out_3_ar_bits_burst,
  output        auto_out_3_ar_bits_lock,
  output [3:0]  auto_out_3_ar_bits_cache,
  output [2:0]  auto_out_3_ar_bits_prot,
  output [3:0]  auto_out_3_ar_bits_qos,
  output        auto_out_3_r_ready,
  input         auto_out_3_r_valid,
  input  [1:0]  auto_out_3_r_bits_id,
  input  [63:0] auto_out_3_r_bits_data,
  input  [1:0]  auto_out_3_r_bits_resp,
  input         auto_out_3_r_bits_last,
  input         auto_out_2_aw_ready,
  output        auto_out_2_aw_valid,
  output [1:0]  auto_out_2_aw_bits_id,
  output [30:0] auto_out_2_aw_bits_addr,
  output [7:0]  auto_out_2_aw_bits_len,
  output [2:0]  auto_out_2_aw_bits_size,
  output [1:0]  auto_out_2_aw_bits_burst,
  output        auto_out_2_aw_bits_lock,
  output [3:0]  auto_out_2_aw_bits_cache,
  output [2:0]  auto_out_2_aw_bits_prot,
  output [3:0]  auto_out_2_aw_bits_qos,
  input         auto_out_2_w_ready,
  output        auto_out_2_w_valid,
  output [63:0] auto_out_2_w_bits_data,
  output [7:0]  auto_out_2_w_bits_strb,
  output        auto_out_2_w_bits_last,
  output        auto_out_2_b_ready,
  input         auto_out_2_b_valid,
  input  [1:0]  auto_out_2_b_bits_id,
  input  [1:0]  auto_out_2_b_bits_resp,
  input         auto_out_2_ar_ready,
  output        auto_out_2_ar_valid,
  output [1:0]  auto_out_2_ar_bits_id,
  output [30:0] auto_out_2_ar_bits_addr,
  output [7:0]  auto_out_2_ar_bits_len,
  output [2:0]  auto_out_2_ar_bits_size,
  output [1:0]  auto_out_2_ar_bits_burst,
  output        auto_out_2_ar_bits_lock,
  output [3:0]  auto_out_2_ar_bits_cache,
  output [2:0]  auto_out_2_ar_bits_prot,
  output [3:0]  auto_out_2_ar_bits_qos,
  output        auto_out_2_r_ready,
  input         auto_out_2_r_valid,
  input  [1:0]  auto_out_2_r_bits_id,
  input  [63:0] auto_out_2_r_bits_data,
  input  [1:0]  auto_out_2_r_bits_resp,
  input         auto_out_2_r_bits_last,
  input         auto_out_1_aw_ready,
  output        auto_out_1_aw_valid,
  output [1:0]  auto_out_1_aw_bits_id,
  output [28:0] auto_out_1_aw_bits_addr,
  output [7:0]  auto_out_1_aw_bits_len,
  output [2:0]  auto_out_1_aw_bits_size,
  output [1:0]  auto_out_1_aw_bits_burst,
  output        auto_out_1_aw_bits_lock,
  output [3:0]  auto_out_1_aw_bits_cache,
  output [2:0]  auto_out_1_aw_bits_prot,
  output [3:0]  auto_out_1_aw_bits_qos,
  input         auto_out_1_w_ready,
  output        auto_out_1_w_valid,
  output [63:0] auto_out_1_w_bits_data,
  output [7:0]  auto_out_1_w_bits_strb,
  output        auto_out_1_w_bits_last,
  output        auto_out_1_b_ready,
  input         auto_out_1_b_valid,
  input  [1:0]  auto_out_1_b_bits_id,
  input  [1:0]  auto_out_1_b_bits_resp,
  input         auto_out_1_ar_ready,
  output        auto_out_1_ar_valid,
  output [1:0]  auto_out_1_ar_bits_id,
  output [28:0] auto_out_1_ar_bits_addr,
  output [7:0]  auto_out_1_ar_bits_len,
  output [2:0]  auto_out_1_ar_bits_size,
  output [1:0]  auto_out_1_ar_bits_burst,
  output        auto_out_1_ar_bits_lock,
  output [3:0]  auto_out_1_ar_bits_cache,
  output [2:0]  auto_out_1_ar_bits_prot,
  output [3:0]  auto_out_1_ar_bits_qos,
  output        auto_out_1_r_ready,
  input         auto_out_1_r_valid,
  input  [1:0]  auto_out_1_r_bits_id,
  input  [63:0] auto_out_1_r_bits_data,
  input  [1:0]  auto_out_1_r_bits_resp,
  input         auto_out_1_r_bits_last,
  input         auto_out_0_aw_ready,
  output        auto_out_0_aw_valid,
  output [1:0]  auto_out_0_aw_bits_id,
  output [30:0] auto_out_0_aw_bits_addr,
  output [7:0]  auto_out_0_aw_bits_len,
  output [2:0]  auto_out_0_aw_bits_size,
  output [1:0]  auto_out_0_aw_bits_burst,
  output        auto_out_0_aw_bits_lock,
  output [3:0]  auto_out_0_aw_bits_cache,
  output [2:0]  auto_out_0_aw_bits_prot,
  output [3:0]  auto_out_0_aw_bits_qos,
  input         auto_out_0_w_ready,
  output        auto_out_0_w_valid,
  output [63:0] auto_out_0_w_bits_data,
  output [7:0]  auto_out_0_w_bits_strb,
  output        auto_out_0_w_bits_last,
  output        auto_out_0_b_ready,
  input         auto_out_0_b_valid,
  input  [1:0]  auto_out_0_b_bits_id,
  input  [1:0]  auto_out_0_b_bits_resp,
  input         auto_out_0_ar_ready,
  output        auto_out_0_ar_valid,
  output [1:0]  auto_out_0_ar_bits_id,
  output [30:0] auto_out_0_ar_bits_addr,
  output [7:0]  auto_out_0_ar_bits_len,
  output [2:0]  auto_out_0_ar_bits_size,
  output [1:0]  auto_out_0_ar_bits_burst,
  output        auto_out_0_ar_bits_lock,
  output [3:0]  auto_out_0_ar_bits_cache,
  output [2:0]  auto_out_0_ar_bits_prot,
  output [3:0]  auto_out_0_ar_bits_qos,
  output        auto_out_0_r_ready,
  input         auto_out_0_r_valid,
  input  [1:0]  auto_out_0_r_bits_id,
  input  [63:0] auto_out_0_r_bits_data,
  input  [1:0]  auto_out_0_r_bits_resp,
  input         auto_out_0_r_bits_last
);

  wire        _portsWOI_in_0_w_ready_T_8;
  wire        _portsAWOI_in_0_aw_ready_T_8;
  wire        _portsAROI_in_0_ar_ready_T_8;
  wire        _awIn_0_io_enq_ready;
  wire        _awIn_0_io_deq_valid;
  wire [4:0]  _awIn_0_io_deq_bits;
  wire        requestARIO_0_0 = auto_in_ar_bits_addr[30:4] == 27'h4060000;
  wire        requestARIO_0_1 =
    {auto_in_ar_bits_addr[30:29], ~(auto_in_ar_bits_addr[28])} == 3'h0;
  wire        requestARIO_0_2 = auto_in_ar_bits_addr[30:12] == 19'h40002;
  wire        requestARIO_0_3 = auto_in_ar_bits_addr[30:16] == 15'h4007;
  wire [11:0] _GEN = auto_in_ar_bits_addr[29:18] ^ 12'hE01;
  wire [10:0] _GEN_0 = auto_in_ar_bits_addr[29:19] ^ 11'h701;
  wire [9:0]  _GEN_1 = auto_in_ar_bits_addr[29:20] ^ 10'h381;
  wire [8:0]  _GEN_2 = auto_in_ar_bits_addr[29:21] ^ 9'h1C1;
  wire [7:0]  _GEN_3 = auto_in_ar_bits_addr[29:22] ^ 8'hE1;
  wire [6:0]  _GEN_4 = auto_in_ar_bits_addr[29:23] ^ 7'h71;
  wire [5:0]  _GEN_5 = auto_in_ar_bits_addr[29:24] ^ 6'h39;
  wire        requestARIO_0_4 =
    {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[28]} == 2'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:27] ^ 3'h6} == 4'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:12] ^ 18'h38011} == 19'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:13] ^ 17'h1C009} == 18'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:14] ^ 16'hE005} == 17'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:15] ^ 15'h7003} == 16'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:13] ^ 17'h1C011} == 18'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:14] ^ 16'hE009} == 17'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:15] ^ 15'h7005} == 16'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:16] ^ 14'h3803} == 15'h0
    | {auto_in_ar_bits_addr[30], _GEN[11:8], _GEN[6:0]} == 12'h0
    | {auto_in_ar_bits_addr[30], _GEN_0[10:7], _GEN_0[5:0]} == 11'h0
    | {auto_in_ar_bits_addr[30], _GEN_1[9:6], _GEN_1[4:0]} == 10'h0
    | {auto_in_ar_bits_addr[30], _GEN_2[8:5], _GEN_2[3:0]} == 9'h0
    | {auto_in_ar_bits_addr[30], _GEN_3[7:4], _GEN_3[2:0]} == 8'h0
    | {auto_in_ar_bits_addr[30], _GEN_4[6:3], _GEN_4[1:0]} == 7'h0
    | {auto_in_ar_bits_addr[30], _GEN_5[5:2], _GEN_5[0]} == 6'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:12] ^ 18'h3A001} == 19'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:13] ^ 17'h1D001} == 18'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:14] ^ 16'hE801} == 17'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:15] ^ 15'h7401} == 16'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:16] ^ 14'h3A01} == 15'h0
    | {auto_in_ar_bits_addr[30], auto_in_ar_bits_addr[29:17] ^ 13'h1D01} == 14'h0
    | auto_in_ar_bits_addr[30:13] == 18'h20000 | auto_in_ar_bits_addr[30:12] == 19'h40003
    | auto_in_ar_bits_addr[30:14] == 17'h10001 | auto_in_ar_bits_addr[30:15] == 16'h8001
    | auto_in_ar_bits_addr[30:16] == 15'h4001 | auto_in_ar_bits_addr[30:17] == 14'h2001
    | auto_in_ar_bits_addr[30:17] == 14'h2002 | auto_in_ar_bits_addr[30:16] == 15'h4006
    | auto_in_ar_bits_addr[30:19] == 12'h801 | auto_in_ar_bits_addr[30:20] == 11'h401
    | auto_in_ar_bits_addr[30:21] == 10'h201 | auto_in_ar_bits_addr[30:21] == 10'h202
    | auto_in_ar_bits_addr[30:4] == 27'h4060001
    | auto_in_ar_bits_addr[30:5] == 26'h2030001
    | auto_in_ar_bits_addr[30:6] == 25'h1018001 | auto_in_ar_bits_addr[30:7] == 24'h80C001
    | auto_in_ar_bits_addr[30:8] == 23'h406001 | auto_in_ar_bits_addr[30:9] == 22'h203001
    | auto_in_ar_bits_addr[30:10] == 21'h101801 | auto_in_ar_bits_addr[30:11] == 20'h80C01
    | auto_in_ar_bits_addr[30:12] == 19'h40601 | auto_in_ar_bits_addr[30:13] == 18'h20301
    | auto_in_ar_bits_addr[30:14] == 17'h10181 | auto_in_ar_bits_addr[30:15] == 16'h80C1
    | auto_in_ar_bits_addr[30:16] == 15'h4061 | auto_in_ar_bits_addr[30:17] == 14'h2031
    | auto_in_ar_bits_addr[30:18] == 13'h1019 | auto_in_ar_bits_addr[30:19] == 12'h80D
    | auto_in_ar_bits_addr[30:20] == 11'h407 | auto_in_ar_bits_addr[30:23] == 8'h81
    | auto_in_ar_bits_addr[30:24] == 7'h41 | auto_in_ar_bits_addr[30:25] == 6'h21
    | auto_in_ar_bits_addr[30:26] == 5'h11 | auto_in_ar_bits_addr[30:27] == 4'h9
    | auto_in_ar_bits_addr[30:28] == 3'h5 | (&(auto_in_ar_bits_addr[30:29]));
  wire        requestAWIO_0_0 = auto_in_aw_bits_addr[30:4] == 27'h4060000;
  wire        requestAWIO_0_1 =
    {auto_in_aw_bits_addr[30:29], ~(auto_in_aw_bits_addr[28])} == 3'h0;
  wire        requestAWIO_0_2 = auto_in_aw_bits_addr[30:12] == 19'h40002;
  wire        requestAWIO_0_3 = auto_in_aw_bits_addr[30:16] == 15'h4007;
  wire [11:0] _GEN_6 = auto_in_aw_bits_addr[29:18] ^ 12'hE01;
  wire [10:0] _GEN_7 = auto_in_aw_bits_addr[29:19] ^ 11'h701;
  wire [9:0]  _GEN_8 = auto_in_aw_bits_addr[29:20] ^ 10'h381;
  wire [8:0]  _GEN_9 = auto_in_aw_bits_addr[29:21] ^ 9'h1C1;
  wire [7:0]  _GEN_10 = auto_in_aw_bits_addr[29:22] ^ 8'hE1;
  wire [6:0]  _GEN_11 = auto_in_aw_bits_addr[29:23] ^ 7'h71;
  wire [5:0]  _GEN_12 = auto_in_aw_bits_addr[29:24] ^ 6'h39;
  wire        requestAWIO_0_4 =
    {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[28]} == 2'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:27] ^ 3'h6} == 4'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:12] ^ 18'h38011} == 19'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:13] ^ 17'h1C009} == 18'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:14] ^ 16'hE005} == 17'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:15] ^ 15'h7003} == 16'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:13] ^ 17'h1C011} == 18'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:14] ^ 16'hE009} == 17'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:15] ^ 15'h7005} == 16'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:16] ^ 14'h3803} == 15'h0
    | {auto_in_aw_bits_addr[30], _GEN_6[11:8], _GEN_6[6:0]} == 12'h0
    | {auto_in_aw_bits_addr[30], _GEN_7[10:7], _GEN_7[5:0]} == 11'h0
    | {auto_in_aw_bits_addr[30], _GEN_8[9:6], _GEN_8[4:0]} == 10'h0
    | {auto_in_aw_bits_addr[30], _GEN_9[8:5], _GEN_9[3:0]} == 9'h0
    | {auto_in_aw_bits_addr[30], _GEN_10[7:4], _GEN_10[2:0]} == 8'h0
    | {auto_in_aw_bits_addr[30], _GEN_11[6:3], _GEN_11[1:0]} == 7'h0
    | {auto_in_aw_bits_addr[30], _GEN_12[5:2], _GEN_12[0]} == 6'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:12] ^ 18'h3A001} == 19'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:13] ^ 17'h1D001} == 18'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:14] ^ 16'hE801} == 17'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:15] ^ 15'h7401} == 16'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:16] ^ 14'h3A01} == 15'h0
    | {auto_in_aw_bits_addr[30], auto_in_aw_bits_addr[29:17] ^ 13'h1D01} == 14'h0
    | auto_in_aw_bits_addr[30:13] == 18'h20000 | auto_in_aw_bits_addr[30:12] == 19'h40003
    | auto_in_aw_bits_addr[30:14] == 17'h10001 | auto_in_aw_bits_addr[30:15] == 16'h8001
    | auto_in_aw_bits_addr[30:16] == 15'h4001 | auto_in_aw_bits_addr[30:17] == 14'h2001
    | auto_in_aw_bits_addr[30:17] == 14'h2002 | auto_in_aw_bits_addr[30:16] == 15'h4006
    | auto_in_aw_bits_addr[30:19] == 12'h801 | auto_in_aw_bits_addr[30:20] == 11'h401
    | auto_in_aw_bits_addr[30:21] == 10'h201 | auto_in_aw_bits_addr[30:21] == 10'h202
    | auto_in_aw_bits_addr[30:4] == 27'h4060001
    | auto_in_aw_bits_addr[30:5] == 26'h2030001
    | auto_in_aw_bits_addr[30:6] == 25'h1018001 | auto_in_aw_bits_addr[30:7] == 24'h80C001
    | auto_in_aw_bits_addr[30:8] == 23'h406001 | auto_in_aw_bits_addr[30:9] == 22'h203001
    | auto_in_aw_bits_addr[30:10] == 21'h101801 | auto_in_aw_bits_addr[30:11] == 20'h80C01
    | auto_in_aw_bits_addr[30:12] == 19'h40601 | auto_in_aw_bits_addr[30:13] == 18'h20301
    | auto_in_aw_bits_addr[30:14] == 17'h10181 | auto_in_aw_bits_addr[30:15] == 16'h80C1
    | auto_in_aw_bits_addr[30:16] == 15'h4061 | auto_in_aw_bits_addr[30:17] == 14'h2031
    | auto_in_aw_bits_addr[30:18] == 13'h1019 | auto_in_aw_bits_addr[30:19] == 12'h80D
    | auto_in_aw_bits_addr[30:20] == 11'h407 | auto_in_aw_bits_addr[30:23] == 8'h81
    | auto_in_aw_bits_addr[30:24] == 7'h41 | auto_in_aw_bits_addr[30:25] == 6'h21
    | auto_in_aw_bits_addr[30:26] == 5'h11 | auto_in_aw_bits_addr[30:27] == 4'h9
    | auto_in_aw_bits_addr[30:28] == 3'h5 | (&(auto_in_aw_bits_addr[30:29]));
  wire [2:0]  arTag =
    {requestARIO_0_4,
     |{requestARIO_0_3, requestARIO_0_2},
     requestARIO_0_3 | requestARIO_0_1};
  wire [2:0]  awTag =
    {requestAWIO_0_4,
     |{requestAWIO_0_3, requestAWIO_0_2},
     requestAWIO_0_3 | requestAWIO_0_1};
  reg  [1:0]  arFIFOMap_0_count;
  reg  [2:0]  arFIFOMap_0_last;
  reg  [1:0]  awFIFOMap_0_count;
  reg  [2:0]  awFIFOMap_0_last;
  wire [3:0]  _GEN_13 =
    {{1'h1}, {1'h1}, {1'h1}, {arFIFOMap_0_count == 2'h0 | arFIFOMap_0_last == arTag}};
  wire        in_0_ar_valid = auto_in_ar_valid & _GEN_13[auto_in_ar_bits_id];
  wire        nodeIn_ar_ready =
    _portsAROI_in_0_ar_ready_T_8 & _GEN_13[auto_in_ar_bits_id];
  reg         latched;
  wire        _nodeIn_aw_ready_T = latched | _awIn_0_io_enq_ready;
  wire [3:0]  _GEN_14 =
    {{1'h1}, {1'h1}, {1'h1}, {awFIFOMap_0_count == 2'h0 | awFIFOMap_0_last == awTag}};
  wire        in_0_aw_valid =
    auto_in_aw_valid & _nodeIn_aw_ready_T & _GEN_14[auto_in_aw_bits_id];
  wire        nodeIn_aw_ready =
    _portsAWOI_in_0_aw_ready_T_8 & _nodeIn_aw_ready_T & _GEN_14[auto_in_aw_bits_id];
  wire        _awIn_0_io_enq_valid_T_1 = auto_in_aw_valid & ~latched;
  wire        in_0_w_valid = auto_in_w_valid & _awIn_0_io_deq_valid;
  assign _portsAROI_in_0_ar_ready_T_8 =
    requestARIO_0_0 & auto_out_0_ar_ready | requestARIO_0_1 & auto_out_1_ar_ready
    | requestARIO_0_2 & auto_out_2_ar_ready | requestARIO_0_3 & auto_out_3_ar_ready
    | requestARIO_0_4 & auto_out_4_ar_ready;
  assign _portsAWOI_in_0_aw_ready_T_8 =
    requestAWIO_0_0 & auto_out_0_aw_ready | requestAWIO_0_1 & auto_out_1_aw_ready
    | requestAWIO_0_2 & auto_out_2_aw_ready | requestAWIO_0_3 & auto_out_3_aw_ready
    | requestAWIO_0_4 & auto_out_4_aw_ready;
  assign _portsWOI_in_0_w_ready_T_8 =
    _awIn_0_io_deq_bits[0] & auto_out_0_w_ready | _awIn_0_io_deq_bits[1]
    & auto_out_1_w_ready | _awIn_0_io_deq_bits[2] & auto_out_2_w_ready
    | _awIn_0_io_deq_bits[3] & auto_out_3_w_ready | _awIn_0_io_deq_bits[4]
    & auto_out_4_w_ready;
  reg         idle_5;
  wire        anyValid =
    auto_out_0_r_valid | auto_out_1_r_valid | auto_out_2_r_valid | auto_out_3_r_valid
    | auto_out_4_r_valid;
  wire [4:0]  readys_valid =
    {auto_out_4_r_valid,
     auto_out_3_r_valid,
     auto_out_2_r_valid,
     auto_out_1_r_valid,
     auto_out_0_r_valid};
  reg  [4:0]  readys_mask;
  wire [4:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [7:0]  _GEN_15 =
    {_readys_filter_T_1[3:0],
     auto_out_4_r_valid,
     auto_out_3_r_valid,
     auto_out_2_r_valid,
     auto_out_1_r_valid}
    | {_readys_filter_T_1, auto_out_4_r_valid, auto_out_3_r_valid, auto_out_2_r_valid};
  wire [6:0]  _GEN_16 = _GEN_15[6:0] | {_readys_filter_T_1[4], _GEN_15[7:2]};
  wire [4:0]  readys_readys =
    ~({readys_mask[4],
       _readys_filter_T_1[4] | readys_mask[3],
       _GEN_15[7] | readys_mask[2],
       _GEN_16[6:5] | readys_mask[1:0]}
      & (_GEN_16[4:0] | {_readys_filter_T_1[4], _GEN_15[7], _GEN_16[6:4]}));
  wire        prefixOR_1 = readys_readys[0] & auto_out_0_r_valid;
  wire        winner_5_1 = readys_readys[1] & auto_out_1_r_valid;
  wire        winner_5_2 = readys_readys[2] & auto_out_2_r_valid;
  wire        winner_5_3 = readys_readys[3] & auto_out_3_r_valid;
  wire        winner_5_4 = readys_readys[4] & auto_out_4_r_valid;
  reg         state_5_0;
  reg         state_5_1;
  reg         state_5_2;
  reg         state_5_3;
  reg         state_5_4;
  wire        muxState_5_0 = idle_5 ? prefixOR_1 : state_5_0;
  wire        muxState_5_1 = idle_5 ? winner_5_1 : state_5_1;
  wire        muxState_5_2 = idle_5 ? winner_5_2 : state_5_2;
  wire        muxState_5_3 = idle_5 ? winner_5_3 : state_5_3;
  wire        muxState_5_4 = idle_5 ? winner_5_4 : state_5_4;
  wire        in_0_r_valid =
    idle_5
      ? anyValid
      : state_5_0 & auto_out_0_r_valid | state_5_1 & auto_out_1_r_valid | state_5_2
        & auto_out_2_r_valid | state_5_3 & auto_out_3_r_valid | state_5_4
        & auto_out_4_r_valid;
  wire        _in_0_r_bits_T_8 =
    muxState_5_0 & auto_out_0_r_bits_last | muxState_5_1 & auto_out_1_r_bits_last
    | muxState_5_2 & auto_out_2_r_bits_last | muxState_5_3 & auto_out_3_r_bits_last
    | muxState_5_4;
  wire [1:0]  _in_0_r_bits_T_35 =
    (muxState_5_0 ? auto_out_0_r_bits_id : 2'h0)
    | (muxState_5_1 ? auto_out_1_r_bits_id : 2'h0)
    | (muxState_5_2 ? auto_out_2_r_bits_id : 2'h0)
    | (muxState_5_3 ? auto_out_3_r_bits_id : 2'h0)
    | (muxState_5_4 ? auto_out_4_r_bits_id : 2'h0);
  reg         idle_6;
  wire        anyValid_1 =
    auto_out_0_b_valid | auto_out_1_b_valid | auto_out_2_b_valid | auto_out_3_b_valid
    | auto_out_4_b_valid;
  wire [4:0]  readys_valid_1 =
    {auto_out_4_b_valid,
     auto_out_3_b_valid,
     auto_out_2_b_valid,
     auto_out_1_b_valid,
     auto_out_0_b_valid};
  reg  [4:0]  readys_mask_1;
  wire [4:0]  _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;
  wire [7:0]  _GEN_17 =
    {_readys_filter_T_3[3:0],
     auto_out_4_b_valid,
     auto_out_3_b_valid,
     auto_out_2_b_valid,
     auto_out_1_b_valid}
    | {_readys_filter_T_3, auto_out_4_b_valid, auto_out_3_b_valid, auto_out_2_b_valid};
  wire [6:0]  _GEN_18 = _GEN_17[6:0] | {_readys_filter_T_3[4], _GEN_17[7:2]};
  wire [4:0]  readys_readys_1 =
    ~({readys_mask_1[4],
       _readys_filter_T_3[4] | readys_mask_1[3],
       _GEN_17[7] | readys_mask_1[2],
       _GEN_18[6:5] | readys_mask_1[1:0]}
      & (_GEN_18[4:0] | {_readys_filter_T_3[4], _GEN_17[7], _GEN_18[6:4]}));
  wire        winner_6_0 = readys_readys_1[0] & auto_out_0_b_valid;
  wire        winner_6_1 = readys_readys_1[1] & auto_out_1_b_valid;
  wire        winner_6_2 = readys_readys_1[2] & auto_out_2_b_valid;
  wire        winner_6_3 = readys_readys_1[3] & auto_out_3_b_valid;
  wire        winner_6_4 = readys_readys_1[4] & auto_out_4_b_valid;
  reg         state_6_0;
  reg         state_6_1;
  reg         state_6_2;
  reg         state_6_3;
  reg         state_6_4;
  wire        muxState_6_0 = idle_6 ? winner_6_0 : state_6_0;
  wire        muxState_6_1 = idle_6 ? winner_6_1 : state_6_1;
  wire        muxState_6_2 = idle_6 ? winner_6_2 : state_6_2;
  wire        muxState_6_3 = idle_6 ? winner_6_3 : state_6_3;
  wire        muxState_6_4 = idle_6 ? winner_6_4 : state_6_4;
  wire        in_0_b_valid =
    idle_6
      ? anyValid_1
      : state_6_0 & auto_out_0_b_valid | state_6_1 & auto_out_1_b_valid | state_6_2
        & auto_out_2_b_valid | state_6_3 & auto_out_3_b_valid | state_6_4
        & auto_out_4_b_valid;
  wire [1:0]  _in_0_b_bits_T_17 =
    (muxState_6_0 ? auto_out_0_b_bits_id : 2'h0)
    | (muxState_6_1 ? auto_out_1_b_bits_id : 2'h0)
    | (muxState_6_2 ? auto_out_2_b_bits_id : 2'h0)
    | (muxState_6_3 ? auto_out_3_b_bits_id : 2'h0)
    | (muxState_6_4 ? auto_out_4_b_bits_id : 2'h0);
  wire [4:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [4:0]  _readys_mask_T_3 = _readys_mask_T | {_readys_mask_T[3:0], 1'h0};
  wire [4:0]  _readys_mask_T_6 = _readys_mask_T_3 | {_readys_mask_T_3[2:0], 2'h0};
  wire [4:0]  _readys_mask_T_11 = readys_readys_1 & readys_valid_1;
  wire [4:0]  _readys_mask_T_14 = _readys_mask_T_11 | {_readys_mask_T_11[3:0], 1'h0};
  wire [4:0]  _readys_mask_T_17 = _readys_mask_T_14 | {_readys_mask_T_14[2:0], 2'h0};
  wire        _arFIFOMap_0_T_2 =
    auto_in_ar_bits_id == 2'h0 & nodeIn_ar_ready & auto_in_ar_valid;
  wire        _awFIFOMap_0_T_2 =
    auto_in_aw_bits_id == 2'h0 & nodeIn_aw_ready & auto_in_aw_valid;
  always @(posedge clock) begin
    if (reset) begin
      arFIFOMap_0_count <= 2'h0;
      awFIFOMap_0_count <= 2'h0;
      latched <= 1'h0;
      idle_5 <= 1'h1;
      readys_mask <= 5'h1F;
      state_5_0 <= 1'h0;
      state_5_1 <= 1'h0;
      state_5_2 <= 1'h0;
      state_5_3 <= 1'h0;
      state_5_4 <= 1'h0;
      idle_6 <= 1'h1;
      readys_mask_1 <= 5'h1F;
      state_6_0 <= 1'h0;
      state_6_1 <= 1'h0;
      state_6_2 <= 1'h0;
      state_6_3 <= 1'h0;
      state_6_4 <= 1'h0;
    end
    else begin
      arFIFOMap_0_count <=
        2'(2'(arFIFOMap_0_count + {1'h0, _arFIFOMap_0_T_2})
           - {1'h0,
              _in_0_r_bits_T_35 == 2'h0 & auto_in_r_ready & in_0_r_valid
                & _in_0_r_bits_T_8});
      awFIFOMap_0_count <=
        2'(2'(awFIFOMap_0_count + {1'h0, _awFIFOMap_0_T_2})
           - {1'h0, _in_0_b_bits_T_17 == 2'h0 & auto_in_b_ready & in_0_b_valid});
      latched <=
        ~(_portsAWOI_in_0_aw_ready_T_8 & in_0_aw_valid)
        & (_awIn_0_io_enq_ready & _awIn_0_io_enq_valid_T_1 | latched);
      idle_5 <= auto_in_r_ready & in_0_r_valid | ~anyValid & idle_5;
      if (idle_5 & (|readys_valid))
        readys_mask <= _readys_mask_T_6 | {_readys_mask_T_6[0], 4'h0};
      if (idle_5) begin
        state_5_0 <= prefixOR_1;
        state_5_1 <= winner_5_1;
        state_5_2 <= winner_5_2;
        state_5_3 <= winner_5_3;
        state_5_4 <= winner_5_4;
      end
      idle_6 <= auto_in_b_ready & in_0_b_valid | ~anyValid_1 & idle_6;
      if (idle_6 & (|readys_valid_1))
        readys_mask_1 <= _readys_mask_T_17 | {_readys_mask_T_17[0], 4'h0};
      if (idle_6) begin
        state_6_0 <= winner_6_0;
        state_6_1 <= winner_6_1;
        state_6_2 <= winner_6_2;
        state_6_3 <= winner_6_3;
        state_6_4 <= winner_6_4;
      end
    end
    if (_arFIFOMap_0_T_2)
      arFIFOMap_0_last <= arTag;
    if (_awFIFOMap_0_T_2)
      awFIFOMap_0_last <= awTag;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        arFIFOMap_0_count = _RANDOM[2'h0][1:0];
        arFIFOMap_0_last = _RANDOM[2'h0][4:2];
        awFIFOMap_0_count = _RANDOM[2'h0][6:5];
        awFIFOMap_0_last = _RANDOM[2'h0][9:7];
        latched = _RANDOM[2'h1][2];
        idle_5 = _RANDOM[2'h1][23];
        readys_mask = _RANDOM[2'h1][28:24];
        state_5_0 = _RANDOM[2'h1][29];
        state_5_1 = _RANDOM[2'h1][30];
        state_5_2 = _RANDOM[2'h1][31];
        state_5_3 = _RANDOM[2'h2][0];
        state_5_4 = _RANDOM[2'h2][1];
        idle_6 = _RANDOM[2'h2][2];
        readys_mask_1 = _RANDOM[2'h2][7:3];
        state_6_0 = _RANDOM[2'h2][8];
        state_6_1 = _RANDOM[2'h2][9];
        state_6_2 = _RANDOM[2'h2][10];
        state_6_3 = _RANDOM[2'h2][11];
        state_6_4 = _RANDOM[2'h2][12];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue2_UInt5 awIn_0 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awIn_0_io_enq_ready),
    .io_enq_valid (_awIn_0_io_enq_valid_T_1),
    .io_enq_bits
      ({requestAWIO_0_4,
        requestAWIO_0_3,
        requestAWIO_0_2,
        requestAWIO_0_1,
        requestAWIO_0_0}),
    .io_deq_ready (auto_in_w_valid & auto_in_w_bits_last & _portsWOI_in_0_w_ready_T_8),
    .io_deq_valid (_awIn_0_io_deq_valid),
    .io_deq_bits  (_awIn_0_io_deq_bits)
  );
  assign auto_in_aw_ready = nodeIn_aw_ready;
  assign auto_in_w_ready = _portsWOI_in_0_w_ready_T_8 & _awIn_0_io_deq_valid;
  assign auto_in_b_valid = in_0_b_valid;
  assign auto_in_b_bits_id = _in_0_b_bits_T_17;
  assign auto_in_b_bits_resp =
    (muxState_6_0 ? auto_out_0_b_bits_resp : 2'h0)
    | (muxState_6_1 ? auto_out_1_b_bits_resp : 2'h0)
    | (muxState_6_2 ? auto_out_2_b_bits_resp : 2'h0)
    | (muxState_6_3 ? auto_out_3_b_bits_resp : 2'h0) | {2{muxState_6_4}};
  assign auto_in_ar_ready = nodeIn_ar_ready;
  assign auto_in_r_valid = in_0_r_valid;
  assign auto_in_r_bits_id = _in_0_r_bits_T_35;
  assign auto_in_r_bits_data =
    (muxState_5_0 ? auto_out_0_r_bits_data : 64'h0)
    | (muxState_5_1 ? auto_out_1_r_bits_data : 64'h0)
    | (muxState_5_2 ? auto_out_2_r_bits_data : 64'h0)
    | (muxState_5_3 ? auto_out_3_r_bits_data : 64'h0);
  assign auto_in_r_bits_resp =
    (muxState_5_0 ? auto_out_0_r_bits_resp : 2'h0)
    | (muxState_5_1 ? auto_out_1_r_bits_resp : 2'h0)
    | (muxState_5_2 ? auto_out_2_r_bits_resp : 2'h0)
    | (muxState_5_3 ? auto_out_3_r_bits_resp : 2'h0) | {2{muxState_5_4}};
  assign auto_in_r_bits_last = _in_0_r_bits_T_8;
  assign auto_out_4_aw_valid = in_0_aw_valid & requestAWIO_0_4;
  assign auto_out_4_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_4_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_4_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_4_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_4_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_4_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_4_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_4_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_4_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_4_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[4];
  assign auto_out_4_w_bits_data = auto_in_w_bits_data;
  assign auto_out_4_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_4_w_bits_last = auto_in_w_bits_last;
  assign auto_out_4_b_ready = auto_in_b_ready & (idle_6 ? readys_readys_1[4] : state_6_4);
  assign auto_out_4_ar_valid = in_0_ar_valid & requestARIO_0_4;
  assign auto_out_4_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_4_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_4_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_4_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_4_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_4_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_4_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_4_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_4_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_4_r_ready = auto_in_r_ready & (idle_5 ? readys_readys[4] : state_5_4);
  assign auto_out_3_aw_valid = in_0_aw_valid & requestAWIO_0_3;
  assign auto_out_3_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_3_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_3_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_3_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_3_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_3_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_3_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_3_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_3_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_3_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[3];
  assign auto_out_3_w_bits_data = auto_in_w_bits_data;
  assign auto_out_3_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_3_w_bits_last = auto_in_w_bits_last;
  assign auto_out_3_b_ready = auto_in_b_ready & (idle_6 ? readys_readys_1[3] : state_6_3);
  assign auto_out_3_ar_valid = in_0_ar_valid & requestARIO_0_3;
  assign auto_out_3_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_3_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_3_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_3_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_3_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_3_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_3_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_3_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_3_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_3_r_ready = auto_in_r_ready & (idle_5 ? readys_readys[3] : state_5_3);
  assign auto_out_2_aw_valid = in_0_aw_valid & requestAWIO_0_2;
  assign auto_out_2_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_2_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_2_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_2_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_2_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_2_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_2_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_2_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_2_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_2_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[2];
  assign auto_out_2_w_bits_data = auto_in_w_bits_data;
  assign auto_out_2_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_2_w_bits_last = auto_in_w_bits_last;
  assign auto_out_2_b_ready = auto_in_b_ready & (idle_6 ? readys_readys_1[2] : state_6_2);
  assign auto_out_2_ar_valid = in_0_ar_valid & requestARIO_0_2;
  assign auto_out_2_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_2_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_2_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_2_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_2_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_2_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_2_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_2_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_2_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_2_r_ready = auto_in_r_ready & (idle_5 ? readys_readys[2] : state_5_2);
  assign auto_out_1_aw_valid = in_0_aw_valid & requestAWIO_0_1;
  assign auto_out_1_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_1_aw_bits_addr = auto_in_aw_bits_addr[28:0];
  assign auto_out_1_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_1_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_1_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_1_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_1_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_1_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_1_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_1_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[1];
  assign auto_out_1_w_bits_data = auto_in_w_bits_data;
  assign auto_out_1_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_1_w_bits_last = auto_in_w_bits_last;
  assign auto_out_1_b_ready = auto_in_b_ready & (idle_6 ? readys_readys_1[1] : state_6_1);
  assign auto_out_1_ar_valid = in_0_ar_valid & requestARIO_0_1;
  assign auto_out_1_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_1_ar_bits_addr = auto_in_ar_bits_addr[28:0];
  assign auto_out_1_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_1_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_1_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_1_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_1_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_1_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_1_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_1_r_ready = auto_in_r_ready & (idle_5 ? readys_readys[1] : state_5_1);
  assign auto_out_0_aw_valid = in_0_aw_valid & requestAWIO_0_0;
  assign auto_out_0_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_0_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_0_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_0_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_0_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_0_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_0_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_0_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_0_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_0_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[0];
  assign auto_out_0_w_bits_data = auto_in_w_bits_data;
  assign auto_out_0_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_0_w_bits_last = auto_in_w_bits_last;
  assign auto_out_0_b_ready = auto_in_b_ready & (idle_6 ? readys_readys_1[0] : state_6_0);
  assign auto_out_0_ar_valid = in_0_ar_valid & requestARIO_0_0;
  assign auto_out_0_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_0_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_0_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_0_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_0_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_0_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_0_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_0_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_0_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_0_r_ready = auto_in_r_ready & (idle_5 ? readys_readys[0] : state_5_0);
endmodule

