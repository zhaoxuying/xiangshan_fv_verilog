// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLBFA_3(
  input        clock,
  input        reset,
  output       io_r_resp_0_bits_hit,
  output       io_r_resp_0_bits_perm_0_pf,
  output       io_r_resp_0_bits_perm_0_af,
  output       io_r_resp_0_bits_perm_0_v,
  output       io_r_resp_0_bits_perm_0_a,
  output       io_r_resp_0_bits_perm_0_u,
  output       io_r_resp_0_bits_perm_0_x,
  output       io_r_resp_0_bits_perm_0_w,
  output       io_r_resp_0_bits_perm_0_r,
  output       io_r_resp_0_bits_g_perm_0_pf,
  output       io_r_resp_0_bits_g_perm_0_af,
  output       io_r_resp_0_bits_g_perm_0_a,
  output       io_r_resp_0_bits_g_perm_0_x,
  output       io_r_resp_0_bits_g_perm_0_r,
  output       io_r_resp_1_bits_hit,
  output       io_r_resp_1_bits_perm_0_pf,
  output       io_r_resp_1_bits_perm_0_af,
  output       io_r_resp_1_bits_perm_0_v,
  output       io_r_resp_1_bits_perm_0_a,
  output       io_r_resp_1_bits_perm_0_u,
  output       io_r_resp_1_bits_perm_0_x,
  output       io_r_resp_1_bits_perm_0_w,
  output       io_r_resp_1_bits_perm_0_r,
  output       io_r_resp_1_bits_g_perm_0_pf,
  output       io_r_resp_1_bits_g_perm_0_af,
  output       io_r_resp_1_bits_g_perm_0_a,
  output       io_r_resp_1_bits_g_perm_0_x,
  output       io_r_resp_1_bits_g_perm_0_r,
  input        io_w_valid,
  input  [1:0] io_w_bits_wayIdx,
  input        io_w_bits_data_s1_entry_perm_d,
  input        io_w_bits_data_s1_entry_perm_a,
  input        io_w_bits_data_s1_entry_perm_g,
  input        io_w_bits_data_s1_entry_perm_u,
  input        io_w_bits_data_s1_entry_perm_x,
  input        io_w_bits_data_s1_entry_perm_w,
  input        io_w_bits_data_s1_entry_perm_r,
  input        io_w_bits_data_s1_entry_v,
  input        io_w_bits_data_s1_pf,
  input        io_w_bits_data_s1_af,
  input        io_w_bits_data_s2_entry_perm_d,
  input        io_w_bits_data_s2_entry_perm_a,
  input        io_w_bits_data_s2_entry_perm_g,
  input        io_w_bits_data_s2_entry_perm_u,
  input        io_w_bits_data_s2_entry_perm_x,
  input        io_w_bits_data_s2_entry_perm_w,
  input        io_w_bits_data_s2_entry_perm_r,
  input        io_w_bits_data_s2_gpf,
  input        io_w_bits_data_s2_gaf,
  output       io_access_0_touch_ways_valid,
  output [1:0] io_access_0_touch_ways_bits,
  output       io_access_1_touch_ways_valid,
  output [1:0] io_access_1_touch_ways_bits
);

  reg        entries_0_perm_pf;
  reg        entries_0_perm_af;
  reg        entries_0_perm_v;
  reg        entries_0_perm_a;
  reg        entries_0_perm_u;
  reg        entries_0_perm_x;
  reg        entries_0_perm_w;
  reg        entries_0_perm_r;
  reg        entries_0_g_perm_pf;
  reg        entries_0_g_perm_af;
  reg        entries_0_g_perm_a;
  reg        entries_0_g_perm_x;
  reg        entries_0_g_perm_r;
  reg        entries_1_perm_pf;
  reg        entries_1_perm_af;
  reg        entries_1_perm_v;
  reg        entries_1_perm_a;
  reg        entries_1_perm_u;
  reg        entries_1_perm_x;
  reg        entries_1_perm_w;
  reg        entries_1_perm_r;
  reg        entries_1_g_perm_pf;
  reg        entries_1_g_perm_af;
  reg        entries_1_g_perm_a;
  reg        entries_1_g_perm_x;
  reg        entries_1_g_perm_r;
  reg        entries_2_perm_pf;
  reg        entries_2_perm_af;
  reg        entries_2_perm_v;
  reg        entries_2_perm_a;
  reg        entries_2_perm_u;
  reg        entries_2_perm_x;
  reg        entries_2_perm_w;
  reg        entries_2_perm_r;
  reg        entries_2_g_perm_pf;
  reg        entries_2_g_perm_af;
  reg        entries_2_g_perm_a;
  reg        entries_2_g_perm_x;
  reg        entries_2_g_perm_r;
  reg        entries_3_perm_pf;
  reg        entries_3_perm_af;
  reg        entries_3_perm_v;
  reg        entries_3_perm_a;
  reg        entries_3_perm_u;
  reg        entries_3_perm_x;
  reg        entries_3_perm_w;
  reg        entries_3_perm_r;
  reg        entries_3_g_perm_pf;
  reg        entries_3_g_perm_af;
  reg        entries_3_g_perm_a;
  reg        entries_3_g_perm_x;
  reg        entries_3_g_perm_r;
  reg  [1:0] refill_wayIdx_reg;
  reg        last_REG;
  wire [1:0] io_access_1_touch_ways_bits_0 = last_REG ? refill_wayIdx_reg : 2'h0;
  always @(posedge clock) begin
    if (io_w_valid & io_w_bits_wayIdx == 2'h0) begin
      entries_0_perm_pf <= io_w_bits_data_s1_pf;
      entries_0_perm_af <= io_w_bits_data_s1_af;
      entries_0_perm_v <= io_w_bits_data_s1_entry_v;
      entries_0_perm_a <= io_w_bits_data_s1_entry_perm_a;
      entries_0_perm_u <= io_w_bits_data_s1_entry_perm_u;
      entries_0_perm_x <= io_w_bits_data_s1_entry_perm_x;
      entries_0_perm_w <= io_w_bits_data_s1_entry_perm_w;
      entries_0_perm_r <= io_w_bits_data_s1_entry_perm_r;
      entries_0_g_perm_pf <= io_w_bits_data_s2_gpf;
      entries_0_g_perm_af <= io_w_bits_data_s2_gaf;
      entries_0_g_perm_a <= io_w_bits_data_s2_entry_perm_a;
      entries_0_g_perm_x <= io_w_bits_data_s2_entry_perm_x;
      entries_0_g_perm_r <= io_w_bits_data_s2_entry_perm_r;
    end
    if (io_w_valid & io_w_bits_wayIdx == 2'h1) begin
      entries_1_perm_pf <= io_w_bits_data_s1_pf;
      entries_1_perm_af <= io_w_bits_data_s1_af;
      entries_1_perm_v <= io_w_bits_data_s1_entry_v;
      entries_1_perm_a <= io_w_bits_data_s1_entry_perm_a;
      entries_1_perm_u <= io_w_bits_data_s1_entry_perm_u;
      entries_1_perm_x <= io_w_bits_data_s1_entry_perm_x;
      entries_1_perm_w <= io_w_bits_data_s1_entry_perm_w;
      entries_1_perm_r <= io_w_bits_data_s1_entry_perm_r;
      entries_1_g_perm_pf <= io_w_bits_data_s2_gpf;
      entries_1_g_perm_af <= io_w_bits_data_s2_gaf;
      entries_1_g_perm_a <= io_w_bits_data_s2_entry_perm_a;
      entries_1_g_perm_x <= io_w_bits_data_s2_entry_perm_x;
      entries_1_g_perm_r <= io_w_bits_data_s2_entry_perm_r;
    end
    if (io_w_valid & io_w_bits_wayIdx == 2'h2) begin
      entries_2_perm_pf <= io_w_bits_data_s1_pf;
      entries_2_perm_af <= io_w_bits_data_s1_af;
      entries_2_perm_v <= io_w_bits_data_s1_entry_v;
      entries_2_perm_a <= io_w_bits_data_s1_entry_perm_a;
      entries_2_perm_u <= io_w_bits_data_s1_entry_perm_u;
      entries_2_perm_x <= io_w_bits_data_s1_entry_perm_x;
      entries_2_perm_w <= io_w_bits_data_s1_entry_perm_w;
      entries_2_perm_r <= io_w_bits_data_s1_entry_perm_r;
      entries_2_g_perm_pf <= io_w_bits_data_s2_gpf;
      entries_2_g_perm_af <= io_w_bits_data_s2_gaf;
      entries_2_g_perm_a <= io_w_bits_data_s2_entry_perm_a;
      entries_2_g_perm_x <= io_w_bits_data_s2_entry_perm_x;
      entries_2_g_perm_r <= io_w_bits_data_s2_entry_perm_r;
    end
    if (io_w_valid & (&io_w_bits_wayIdx)) begin
      entries_3_perm_pf <= io_w_bits_data_s1_pf;
      entries_3_perm_af <= io_w_bits_data_s1_af;
      entries_3_perm_v <= io_w_bits_data_s1_entry_v;
      entries_3_perm_a <= io_w_bits_data_s1_entry_perm_a;
      entries_3_perm_u <= io_w_bits_data_s1_entry_perm_u;
      entries_3_perm_x <= io_w_bits_data_s1_entry_perm_x;
      entries_3_perm_w <= io_w_bits_data_s1_entry_perm_w;
      entries_3_perm_r <= io_w_bits_data_s1_entry_perm_r;
      entries_3_g_perm_pf <= io_w_bits_data_s2_gpf;
      entries_3_g_perm_af <= io_w_bits_data_s2_gaf;
      entries_3_g_perm_a <= io_w_bits_data_s2_entry_perm_a;
      entries_3_g_perm_x <= io_w_bits_data_s2_entry_perm_x;
      entries_3_g_perm_r <= io_w_bits_data_s2_entry_perm_r;
    end
    if (io_w_valid)
      refill_wayIdx_reg <= io_w_bits_wayIdx;
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      last_REG <= 1'h0;
    else
      last_REG <= io_w_valid;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:27];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h1C; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        entries_0_perm_pf = _RANDOM[5'h2][31];
        entries_0_perm_af = _RANDOM[5'h3][0];
        entries_0_perm_v = _RANDOM[5'h3][1];
        entries_0_perm_a = _RANDOM[5'h3][3];
        entries_0_perm_u = _RANDOM[5'h3][5];
        entries_0_perm_x = _RANDOM[5'h3][6];
        entries_0_perm_w = _RANDOM[5'h3][7];
        entries_0_perm_r = _RANDOM[5'h3][8];
        entries_0_g_perm_pf = _RANDOM[5'h4][17];
        entries_0_g_perm_af = _RANDOM[5'h4][18];
        entries_0_g_perm_a = _RANDOM[5'h4][21];
        entries_0_g_perm_x = _RANDOM[5'h4][24];
        entries_0_g_perm_r = _RANDOM[5'h4][26];
        entries_1_perm_pf = _RANDOM[5'h8][6];
        entries_1_perm_af = _RANDOM[5'h8][7];
        entries_1_perm_v = _RANDOM[5'h8][8];
        entries_1_perm_a = _RANDOM[5'h8][10];
        entries_1_perm_u = _RANDOM[5'h8][12];
        entries_1_perm_x = _RANDOM[5'h8][13];
        entries_1_perm_w = _RANDOM[5'h8][14];
        entries_1_perm_r = _RANDOM[5'h8][15];
        entries_1_g_perm_pf = _RANDOM[5'h9][24];
        entries_1_g_perm_af = _RANDOM[5'h9][25];
        entries_1_g_perm_a = _RANDOM[5'h9][28];
        entries_1_g_perm_x = _RANDOM[5'h9][31];
        entries_1_g_perm_r = _RANDOM[5'hA][1];
        entries_2_perm_pf = _RANDOM[5'hD][13];
        entries_2_perm_af = _RANDOM[5'hD][14];
        entries_2_perm_v = _RANDOM[5'hD][15];
        entries_2_perm_a = _RANDOM[5'hD][17];
        entries_2_perm_u = _RANDOM[5'hD][19];
        entries_2_perm_x = _RANDOM[5'hD][20];
        entries_2_perm_w = _RANDOM[5'hD][21];
        entries_2_perm_r = _RANDOM[5'hD][22];
        entries_2_g_perm_pf = _RANDOM[5'hE][31];
        entries_2_g_perm_af = _RANDOM[5'hF][0];
        entries_2_g_perm_a = _RANDOM[5'hF][3];
        entries_2_g_perm_x = _RANDOM[5'hF][6];
        entries_2_g_perm_r = _RANDOM[5'hF][8];
        entries_3_perm_pf = _RANDOM[5'h12][20];
        entries_3_perm_af = _RANDOM[5'h12][21];
        entries_3_perm_v = _RANDOM[5'h12][22];
        entries_3_perm_a = _RANDOM[5'h12][24];
        entries_3_perm_u = _RANDOM[5'h12][26];
        entries_3_perm_x = _RANDOM[5'h12][27];
        entries_3_perm_w = _RANDOM[5'h12][28];
        entries_3_perm_r = _RANDOM[5'h12][29];
        entries_3_g_perm_pf = _RANDOM[5'h14][6];
        entries_3_g_perm_af = _RANDOM[5'h14][7];
        entries_3_g_perm_a = _RANDOM[5'h14][10];
        entries_3_g_perm_x = _RANDOM[5'h14][13];
        entries_3_g_perm_r = _RANDOM[5'h14][15];
        refill_wayIdx_reg = _RANDOM[5'h1B][6:5];
        last_REG = _RANDOM[5'h1B][7];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        last_REG = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_r_resp_0_bits_hit = 1'h0;
  assign io_r_resp_0_bits_perm_0_pf = 1'h0;
  assign io_r_resp_0_bits_perm_0_af = 1'h0;
  assign io_r_resp_0_bits_perm_0_v = 1'h0;
  assign io_r_resp_0_bits_perm_0_a = 1'h0;
  assign io_r_resp_0_bits_perm_0_u = 1'h0;
  assign io_r_resp_0_bits_perm_0_x = 1'h0;
  assign io_r_resp_0_bits_perm_0_w = 1'h0;
  assign io_r_resp_0_bits_perm_0_r = 1'h0;
  assign io_r_resp_0_bits_g_perm_0_pf = 1'h0;
  assign io_r_resp_0_bits_g_perm_0_af = 1'h0;
  assign io_r_resp_0_bits_g_perm_0_a = 1'h0;
  assign io_r_resp_0_bits_g_perm_0_x = 1'h0;
  assign io_r_resp_0_bits_g_perm_0_r = 1'h0;
  assign io_r_resp_1_bits_hit = 1'h0;
  assign io_r_resp_1_bits_perm_0_pf = 1'h0;
  assign io_r_resp_1_bits_perm_0_af = 1'h0;
  assign io_r_resp_1_bits_perm_0_v = 1'h0;
  assign io_r_resp_1_bits_perm_0_a = 1'h0;
  assign io_r_resp_1_bits_perm_0_u = 1'h0;
  assign io_r_resp_1_bits_perm_0_x = 1'h0;
  assign io_r_resp_1_bits_perm_0_w = 1'h0;
  assign io_r_resp_1_bits_perm_0_r = 1'h0;
  assign io_r_resp_1_bits_g_perm_0_pf = 1'h0;
  assign io_r_resp_1_bits_g_perm_0_af = 1'h0;
  assign io_r_resp_1_bits_g_perm_0_a = 1'h0;
  assign io_r_resp_1_bits_g_perm_0_x = 1'h0;
  assign io_r_resp_1_bits_g_perm_0_r = 1'h0;
  assign io_access_0_touch_ways_valid = last_REG;
  assign io_access_0_touch_ways_bits = io_access_1_touch_ways_bits_0;
  assign io_access_1_touch_ways_valid = last_REG;
  assign io_access_1_touch_ways_bits = io_access_1_touch_ways_bits_0;
endmodule

