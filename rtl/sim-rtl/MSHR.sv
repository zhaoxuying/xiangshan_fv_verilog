// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MSHR(
  input         clock,
  input         reset,
  input  [7:0]  io_id,
  output        io_status_valid,
  output [2:0]  io_status_bits_channel,
  output        io_status_bits_set,
  output [40:0] io_status_bits_reqTag,
  output [40:0] io_status_bits_metaTag,
  output        io_status_bits_needsRepl,
  output        io_status_bits_w_c_resp,
  output        io_status_bits_will_free,
  output [4:0]  io_status_bits_reqSource,
  output        io_msInfo_valid,
  output [2:0]  io_msInfo_bits_channel,
  output        io_msInfo_bits_set,
  output [1:0]  io_msInfo_bits_way,
  output [40:0] io_msInfo_bits_reqTag,
  output        io_msInfo_bits_willFree,
  output        io_msInfo_bits_needRelease,
  output        io_msInfo_bits_blockRefill,
  output        io_msInfo_bits_meta_dirty,
  output [1:0]  io_msInfo_bits_meta_state,
  output        io_msInfo_bits_meta_clients,
  output        io_msInfo_bits_meta_accessed,
  output        io_msInfo_bits_meta_tagErr,
  output        io_msInfo_bits_meta_dataErr,
  output [40:0] io_msInfo_bits_metaTag,
  output        io_msInfo_bits_dirHit,
  output        io_msInfo_bits_isAcqOrPrefetch,
  output        io_msInfo_bits_isPrefetch,
  output [2:0]  io_msInfo_bits_param,
  output        io_msInfo_bits_mergeA,
  output        io_msInfo_bits_w_grantfirst,
  output        io_msInfo_bits_s_release,
  output        io_msInfo_bits_s_refill,
  output        io_msInfo_bits_w_releaseack,
  output        io_msInfo_bits_w_replResp,
  output        io_msInfo_bits_w_rprobeacklast,
  input         io_alloc_valid,
  input         io_alloc_bits_dirResult_hit,
  input  [40:0] io_alloc_bits_dirResult_tag,
  input         io_alloc_bits_dirResult_set,
  input  [1:0]  io_alloc_bits_dirResult_way,
  input         io_alloc_bits_dirResult_meta_dirty,
  input  [1:0]  io_alloc_bits_dirResult_meta_state,
  input         io_alloc_bits_dirResult_meta_clients,
  input         io_alloc_bits_dirResult_meta_accessed,
  input         io_alloc_bits_dirResult_meta_tagErr,
  input         io_alloc_bits_dirResult_meta_dataErr,
  input         io_alloc_bits_state_s_acquire,
  input         io_alloc_bits_state_s_rprobe,
  input         io_alloc_bits_state_s_pprobe,
  input         io_alloc_bits_state_s_probeack,
  input         io_alloc_bits_state_s_refill,
  input         io_alloc_bits_state_w_rprobeackfirst,
  input         io_alloc_bits_state_w_rprobeacklast,
  input         io_alloc_bits_state_w_pprobeackfirst,
  input         io_alloc_bits_state_w_pprobeacklast,
  input         io_alloc_bits_state_w_grantfirst,
  input         io_alloc_bits_state_w_grantlast,
  input         io_alloc_bits_state_w_grant,
  input         io_alloc_bits_state_w_replResp,
  input  [2:0]  io_alloc_bits_task_channel,
  input         io_alloc_bits_task_set,
  input  [40:0] io_alloc_bits_task_tag,
  input  [5:0]  io_alloc_bits_task_off,
  input         io_alloc_bits_task_isKeyword,
  input  [3:0]  io_alloc_bits_task_opcode,
  input  [2:0]  io_alloc_bits_task_param,
  input  [2:0]  io_alloc_bits_task_size,
  input  [5:0]  io_alloc_bits_task_sourceId,
  input         io_alloc_bits_task_needProbeAckData,
  input  [4:0]  io_alloc_bits_task_reqSource,
  input         io_tasks_source_a_ready,
  output        io_tasks_source_a_valid,
  output [40:0] io_tasks_source_a_bits_tag,
  output        io_tasks_source_a_bits_set,
  output [5:0]  io_tasks_source_a_bits_off,
  output [2:0]  io_tasks_source_a_bits_opcode,
  output [1:0]  io_tasks_source_a_bits_param,
  output [2:0]  io_tasks_source_a_bits_size,
  output [7:0]  io_tasks_source_a_bits_source,
  output [4:0]  io_tasks_source_a_bits_reqSource,
  input         io_tasks_source_b_ready,
  output        io_tasks_source_b_valid,
  output [40:0] io_tasks_source_b_bits_tag,
  output        io_tasks_source_b_bits_set,
  output [1:0]  io_tasks_source_b_bits_param,
  input         io_tasks_mainpipe_ready,
  output        io_tasks_mainpipe_valid,
  output [2:0]  io_tasks_mainpipe_bits_channel,
  output        io_tasks_mainpipe_bits_set,
  output [40:0] io_tasks_mainpipe_bits_tag,
  output [5:0]  io_tasks_mainpipe_bits_off,
  output        io_tasks_mainpipe_bits_isKeyword,
  output [3:0]  io_tasks_mainpipe_bits_opcode,
  output [2:0]  io_tasks_mainpipe_bits_param,
  output [5:0]  io_tasks_mainpipe_bits_sourceId,
  output        io_tasks_mainpipe_bits_corrupt,
  output [7:0]  io_tasks_mainpipe_bits_mshrId,
  output        io_tasks_mainpipe_bits_useProbeData,
  output        io_tasks_mainpipe_bits_mshrRetry,
  output        io_tasks_mainpipe_bits_readProbeDataDown,
  output        io_tasks_mainpipe_bits_dirty,
  output [1:0]  io_tasks_mainpipe_bits_way,
  output        io_tasks_mainpipe_bits_meta_dirty,
  output [1:0]  io_tasks_mainpipe_bits_meta_state,
  output        io_tasks_mainpipe_bits_meta_clients,
  output        io_tasks_mainpipe_bits_meta_accessed,
  output        io_tasks_mainpipe_bits_metaWen,
  output        io_tasks_mainpipe_bits_tagWen,
  output        io_tasks_mainpipe_bits_dsWen,
  output        io_tasks_mainpipe_bits_replTask,
  output [4:0]  io_tasks_mainpipe_bits_reqSource,
  output        io_tasks_mainpipe_bits_mergeA,
  output [5:0]  io_tasks_mainpipe_bits_aMergeTask_off,
  output        io_tasks_mainpipe_bits_aMergeTask_isKeyword,
  output [2:0]  io_tasks_mainpipe_bits_aMergeTask_opcode,
  output [2:0]  io_tasks_mainpipe_bits_aMergeTask_param,
  output [5:0]  io_tasks_mainpipe_bits_aMergeTask_sourceId,
  output        io_tasks_mainpipe_bits_aMergeTask_meta_dirty,
  output [1:0]  io_tasks_mainpipe_bits_aMergeTask_meta_state,
  output        io_tasks_mainpipe_bits_aMergeTask_meta_clients,
  output        io_tasks_mainpipe_bits_aMergeTask_meta_accessed,
  input         io_resps_sink_c_valid,
  input  [2:0]  io_resps_sink_c_bits_opcode,
  input  [2:0]  io_resps_sink_c_bits_param,
  input         io_resps_sink_c_bits_last,
  input         io_resps_sink_d_valid,
  input  [2:0]  io_resps_sink_d_bits_opcode,
  input  [2:0]  io_resps_sink_d_bits_param,
  input         io_resps_sink_d_bits_last,
  input         io_resps_sink_d_bits_dirty,
  input         io_resps_sink_d_bits_corrupt,
  input         io_nestedwb_set,
  input  [40:0] io_nestedwb_tag,
  input         io_nestedwb_c_set_dirty,
  output        io_nestedwbData,
  input         io_aMergeTask_valid,
  input  [5:0]  io_aMergeTask_bits_off,
  input         io_aMergeTask_bits_isKeyword,
  input  [3:0]  io_aMergeTask_bits_opcode,
  input  [2:0]  io_aMergeTask_bits_param,
  input  [5:0]  io_aMergeTask_bits_sourceId,
  input         io_replResp_valid,
  input  [40:0] io_replResp_bits_tag,
  input  [1:0]  io_replResp_bits_way,
  input         io_replResp_bits_meta_dirty,
  input  [1:0]  io_replResp_bits_meta_state,
  input         io_replResp_bits_meta_clients,
  input         io_replResp_bits_meta_accessed,
  input         io_replResp_bits_meta_tagErr,
  input         io_replResp_bits_meta_dataErr,
  input         io_replResp_bits_retry
);

  wire [15:0][3:0] _GEN =
    '{4'h0,
      4'h8,
      4'h8,
      4'h8,
      4'h0,
      4'h0,
      4'h0,
      4'h0,
      4'h4,
      4'h5,
      4'h2,
      4'h1,
      4'h1,
      4'h1,
      4'h0,
      4'h0};
  reg              gotT;
  reg              gotDirty;
  reg              gotGrantData;
  reg              probeDirty;
  reg              probeGotN;
  reg              corrupt;
  reg              req_valid;
  reg  [2:0]       req_channel;
  reg              req_set;
  reg  [40:0]      req_tag;
  reg  [5:0]       req_off;
  reg              req_isKeyword;
  reg  [3:0]       req_opcode;
  reg  [2:0]       req_param;
  reg  [2:0]       req_size;
  reg  [5:0]       req_sourceId;
  reg              req_needProbeAckData;
  reg  [4:0]       req_reqSource;
  reg              dirResult_hit;
  reg  [40:0]      dirResult_tag;
  reg              dirResult_set;
  reg  [1:0]       dirResult_way;
  reg              dirResult_meta_dirty;
  reg  [1:0]       dirResult_meta_state;
  reg              dirResult_meta_clients;
  reg              dirResult_meta_accessed;
  reg              dirResult_meta_tagErr;
  reg              dirResult_meta_dataErr;
  reg              state_s_acquire;
  reg              state_s_rprobe;
  reg              state_s_pprobe;
  reg              state_s_release;
  reg              state_s_probeack;
  reg              state_s_refill;
  reg              state_s_retry;
  reg              state_s_cmoresp;
  reg              state_s_cmometaw;
  reg              state_w_rprobeackfirst;
  reg              state_w_rprobeacklast;
  reg              state_w_pprobeackfirst;
  reg              state_w_pprobeacklast;
  reg              state_w_grantfirst;
  reg              state_w_grantlast;
  reg              state_w_grant;
  reg              state_w_releaseack;
  reg              state_w_replResp;
  wire             req_prefetch = req_opcode == 4'h5;
  wire             _req_acquire_T = req_opcode == 4'h6;
  wire             req_acquirePerm = req_opcode == 4'h7;
  wire             req_needT =
    ~(req_opcode[2]) | req_prefetch & req_param == 3'h1
    | (_req_acquire_T | req_acquirePerm) & (|req_param);
  wire             req_acquire = _req_acquire_T & req_channel[0] | req_acquirePerm;
  wire             req_get = req_opcode == 4'h4;
  wire             mp_grant_task_mp_grant_meta_entry_accessed = req_acquire | req_get;
  wire             req_promoteT =
    (mp_grant_task_mp_grant_meta_entry_accessed | req_prefetch)
    & (dirResult_hit & ~dirResult_meta_clients & (&dirResult_meta_state) | ~dirResult_hit
       & gotT);
  wire             io_tasks_source_b_valid_0 = ~state_s_pprobe | ~state_s_rprobe;
  wire             mp_release_valid =
    ~state_s_release & state_w_rprobeacklast & state_w_grantlast & state_w_replResp;
  wire             mp_probeack_valid = ~state_s_probeack & state_w_pprobeacklast;
  wire             mp_grant_valid =
    ~state_s_refill & state_w_grantlast & state_w_rprobeacklast;
  wire             _mp_probeack_task_mp_probeack_opcode_T_3 =
    dirResult_meta_dirty & dirResult_meta_state[1] | probeDirty | req_needProbeAckData;
  wire [2:0]       _mp_probeack_task_mp_probeack_param_T_2 =
    {dirResult_meta_state[1], req_param[1:0]};
  wire             _mp_probeack_task_mp_probeack_dsWen_T = req_param != 3'h2;
  reg              mergeA;
  wire [2:0]       _GEN_0 = {2'h0, ~req_promoteT};
  wire             io_msInfo_bits_meta_dirty_0 = dirResult_meta_dirty | probeDirty;
  reg  [5:0]       mp_grant_task_merge_task_r_off;
  reg              mp_grant_task_merge_task_r_isKeyword;
  reg  [3:0]       mp_grant_task_merge_task_r_opcode;
  reg  [2:0]       mp_grant_task_merge_task_r_param;
  reg  [5:0]       mp_grant_task_merge_task_r_sourceId;
  wire [3:0]       mp_grant_task_merge_task_opcode =
    io_aMergeTask_valid ? io_aMergeTask_bits_opcode : mp_grant_task_merge_task_r_opcode;
  wire [2:0]       mp_grant_task_merge_task_param =
    io_aMergeTask_valid ? io_aMergeTask_bits_param : mp_grant_task_merge_task_r_param;
  wire             _GEN_1 = mp_grant_valid | ~mp_release_valid;
  wire             will_free =
    state_s_refill & state_s_probeack & state_s_release & state_w_rprobeacklast
    & state_w_pprobeacklast & state_w_grantlast & state_w_releaseack & state_w_replResp;
  reg              io_msInfo_bits_blockRefill_REG;
  reg              io_msInfo_bits_blockRefill_REG_1;
  reg              io_msInfo_bits_blockRefill_REG_2;
  wire             nestedwb_match =
    req_valid & (|dirResult_meta_state) & dirResult_set == io_nestedwb_set
    & dirResult_tag == io_nestedwb_tag & state_w_replResp;
  wire             _probe_ts_T = io_tasks_source_b_ready & io_tasks_source_b_valid_0;
  wire             _GEN_2 = io_tasks_mainpipe_ready & mp_grant_valid;
  wire             _GEN_3 = io_resps_sink_c_bits_opcode == 3'h5;
  wire             _GEN_4 =
    io_resps_sink_c_valid & (io_resps_sink_c_bits_opcode == 3'h4 | _GEN_3);
  wire             _GEN_5 = io_resps_sink_d_bits_opcode == 3'h5;
  wire             _GEN_6 = io_resps_sink_d_bits_opcode == 3'h4 | _GEN_5;
  wire             _GEN_7 =
    io_resps_sink_d_valid & (_GEN_6 | io_resps_sink_d_bits_opcode == 3'h0);
  wire             _GEN_8 = io_resps_sink_d_valid & _GEN_5;
  wire             _GEN_9 = io_replResp_valid & io_replResp_bits_retry;
  wire             _GEN_10 = io_replResp_valid & ~io_replResp_bits_retry;
  wire             _GEN_11 = _GEN_10 & (|io_replResp_bits_meta_state);
  wire             _GEN_12 =
    _GEN_10 & (|io_replResp_bits_meta_state) & io_replResp_bits_meta_clients;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      gotT <= 1'h0;
      gotDirty <= 1'h0;
      gotGrantData <= 1'h0;
      probeDirty <= 1'h0;
      probeGotN <= 1'h0;
      corrupt <= 1'h0;
      req_valid <= 1'h0;
      req_channel <= 3'h0;
      req_set <= 1'h0;
      req_tag <= 41'h0;
      req_off <= 6'h0;
      req_isKeyword <= 1'h0;
      req_opcode <= 4'h0;
      req_param <= 3'h0;
      req_size <= 3'h0;
      req_sourceId <= 6'h0;
      req_needProbeAckData <= 1'h0;
      req_reqSource <= 5'h0;
      dirResult_hit <= 1'h0;
      dirResult_tag <= 41'h0;
      dirResult_set <= 1'h0;
      dirResult_way <= 2'h0;
      dirResult_meta_dirty <= 1'h0;
      dirResult_meta_state <= 2'h0;
      dirResult_meta_clients <= 1'h0;
      dirResult_meta_accessed <= 1'h0;
      dirResult_meta_tagErr <= 1'h0;
      dirResult_meta_dataErr <= 1'h0;
      state_s_acquire <= 1'h1;
      state_s_rprobe <= 1'h1;
      state_s_pprobe <= 1'h1;
      state_s_release <= 1'h1;
      state_s_probeack <= 1'h1;
      state_s_refill <= 1'h1;
      state_s_retry <= 1'h1;
      state_s_cmoresp <= 1'h1;
      state_s_cmometaw <= 1'h1;
      state_w_rprobeackfirst <= 1'h1;
      state_w_rprobeacklast <= 1'h1;
      state_w_pprobeackfirst <= 1'h1;
      state_w_pprobeacklast <= 1'h1;
      state_w_grantfirst <= 1'h1;
      state_w_grantlast <= 1'h1;
      state_w_grant <= 1'h1;
      state_w_releaseack <= 1'h1;
      state_w_replResp <= 1'h1;
      mergeA <= 1'h0;
      mp_grant_task_merge_task_r_off <= 6'h0;
      mp_grant_task_merge_task_r_isKeyword <= 1'h0;
      mp_grant_task_merge_task_r_opcode <= 4'h0;
      mp_grant_task_merge_task_r_param <= 3'h0;
      mp_grant_task_merge_task_r_sourceId <= 6'h0;
      io_msInfo_bits_blockRefill_REG <= 1'h0;
      io_msInfo_bits_blockRefill_REG_1 <= 1'h0;
      io_msInfo_bits_blockRefill_REG_2 <= 1'h0;
    end
    else begin
      if (io_resps_sink_d_valid & _GEN_6) begin
        gotT <= io_resps_sink_d_bits_param == 3'h0;
        gotDirty <= gotDirty | io_resps_sink_d_bits_dirty;
      end
      else begin
        gotT <= ~io_alloc_valid & gotT;
        gotDirty <= ~io_alloc_valid & gotDirty;
      end
      gotGrantData <= _GEN_8 | ~io_alloc_valid & gotGrantData;
      probeDirty <= io_resps_sink_c_valid & _GEN_3 | ~io_alloc_valid & probeDirty;
      probeGotN <=
        io_resps_sink_c_valid
        & (io_resps_sink_c_bits_param == 3'h1 | io_resps_sink_c_bits_param == 3'h2
           | io_resps_sink_c_bits_param == 3'h5) | ~io_alloc_valid & probeGotN;
      if (_GEN_8)
        corrupt <= io_resps_sink_d_bits_corrupt;
      else
        corrupt <= ~io_alloc_valid & corrupt;
      req_valid <= ~(will_free & req_valid) & (io_alloc_valid | req_valid);
      if (io_alloc_valid) begin
        req_channel <= io_alloc_bits_task_channel;
        req_set <= io_alloc_bits_task_set;
        req_tag <= io_alloc_bits_task_tag;
        req_off <= io_alloc_bits_task_off;
        req_isKeyword <= io_alloc_bits_task_isKeyword;
        req_opcode <= io_alloc_bits_task_opcode;
        req_param <= io_alloc_bits_task_param;
        req_size <= io_alloc_bits_task_size;
        req_sourceId <= io_alloc_bits_task_sourceId;
        req_needProbeAckData <= io_alloc_bits_task_needProbeAckData;
        req_reqSource <= io_alloc_bits_task_reqSource;
        dirResult_hit <= io_alloc_bits_dirResult_hit;
        dirResult_set <= io_alloc_bits_dirResult_set;
      end
      if (_GEN_10) begin
        dirResult_tag <= io_replResp_bits_tag;
        dirResult_meta_state <= io_replResp_bits_meta_state;
        dirResult_meta_clients <= io_replResp_bits_meta_clients;
        dirResult_meta_accessed <= io_replResp_bits_meta_accessed;
        dirResult_meta_tagErr <= io_replResp_bits_meta_tagErr;
        dirResult_meta_dataErr <= io_replResp_bits_meta_dataErr;
      end
      else begin
        if (io_alloc_valid) begin
          dirResult_tag <= io_alloc_bits_dirResult_tag;
          dirResult_meta_clients <= io_alloc_bits_dirResult_meta_clients;
          dirResult_meta_accessed <= io_alloc_bits_dirResult_meta_accessed;
          dirResult_meta_tagErr <= io_alloc_bits_dirResult_meta_tagErr;
          dirResult_meta_dataErr <= io_alloc_bits_dirResult_meta_dataErr;
        end
        if (~io_tasks_mainpipe_ready | mp_grant_valid | ~mp_release_valid) begin
          if (io_alloc_valid)
            dirResult_meta_state <= io_alloc_bits_dirResult_meta_state;
        end
        else
          dirResult_meta_state <= 2'h0;
      end
      if (_GEN_10 | _GEN_9)
        dirResult_way <= io_replResp_bits_way;
      else if (io_alloc_valid)
        dirResult_way <= io_alloc_bits_dirResult_way;
      dirResult_meta_dirty <=
        nestedwb_match & io_nestedwb_c_set_dirty
        | (_GEN_10
             ? io_replResp_bits_meta_dirty
             : io_alloc_valid
                 ? io_alloc_bits_dirResult_meta_dirty
                 : dirResult_meta_dirty);
      state_s_acquire <=
        io_tasks_source_a_ready & ~state_s_acquire
        | (io_alloc_valid ? io_alloc_bits_state_s_acquire : state_s_acquire);
      state_s_rprobe <=
        ~_GEN_12
        & (_probe_ts_T
           | (io_alloc_valid ? io_alloc_bits_state_s_rprobe : state_s_rprobe));
      state_s_pprobe <=
        _probe_ts_T | (io_alloc_valid ? io_alloc_bits_state_s_pprobe : state_s_pprobe);
      state_s_release <=
        ~_GEN_11
        & (~io_tasks_mainpipe_ready | mp_grant_valid
             ? io_alloc_valid | state_s_release
             : mp_release_valid | io_alloc_valid | state_s_release);
      state_s_probeack <=
        io_tasks_mainpipe_ready & ~(mp_grant_valid | mp_release_valid) & mp_probeack_valid
        | (io_alloc_valid ? io_alloc_bits_state_s_probeack : state_s_probeack);
      state_s_refill <=
        ~_GEN_9
        & (_GEN_2 | (io_alloc_valid ? io_alloc_bits_state_s_refill : state_s_refill));
      state_s_retry <= ~_GEN_9 & (_GEN_2 | io_alloc_valid | state_s_retry);
      state_s_cmoresp <= io_alloc_valid | state_s_cmoresp;
      state_s_cmometaw <= io_alloc_valid | state_s_cmometaw;
      state_w_rprobeackfirst <=
        ~_GEN_12
        & (_GEN_4
           | (io_alloc_valid
                ? io_alloc_bits_state_w_rprobeackfirst
                : state_w_rprobeackfirst));
      state_w_rprobeacklast <=
        ~_GEN_12
        & (_GEN_4
             ? state_w_rprobeacklast | io_resps_sink_c_bits_last
             : io_alloc_valid
                 ? io_alloc_bits_state_w_rprobeacklast
                 : state_w_rprobeacklast);
      state_w_pprobeackfirst <=
        _GEN_4
        | (io_alloc_valid
             ? io_alloc_bits_state_w_pprobeackfirst
             : state_w_pprobeackfirst);
      if (_GEN_4)
        state_w_pprobeacklast <= state_w_pprobeacklast | io_resps_sink_c_bits_last;
      else if (io_alloc_valid)
        state_w_pprobeacklast <= io_alloc_bits_state_w_pprobeacklast;
      state_w_grantfirst <=
        _GEN_7 | (io_alloc_valid ? io_alloc_bits_state_w_grantfirst : state_w_grantfirst);
      if (_GEN_7) begin
        state_w_grantlast <= io_resps_sink_d_bits_last;
        state_w_grant <= req_off == 6'h0 | io_resps_sink_d_bits_last;
      end
      else if (io_alloc_valid) begin
        state_w_grantlast <= io_alloc_bits_state_w_grantlast;
        state_w_grant <= io_alloc_bits_state_w_grant;
      end
      state_w_releaseack <=
        ~_GEN_11
        & (io_resps_sink_d_valid & io_resps_sink_d_bits_opcode == 3'h6 | io_alloc_valid
           | state_w_releaseack);
      state_w_replResp <=
        _GEN_10 | (io_alloc_valid ? io_alloc_bits_state_w_replResp : state_w_replResp);
      mergeA <= io_aMergeTask_valid | ~io_alloc_valid & mergeA;
      if (io_aMergeTask_valid) begin
        mp_grant_task_merge_task_r_off <= io_aMergeTask_bits_off;
        mp_grant_task_merge_task_r_isKeyword <= io_aMergeTask_bits_isKeyword;
        mp_grant_task_merge_task_r_opcode <= io_aMergeTask_bits_opcode;
        mp_grant_task_merge_task_r_param <= io_aMergeTask_bits_param;
        mp_grant_task_merge_task_r_sourceId <= io_aMergeTask_bits_sourceId;
      end
      io_msInfo_bits_blockRefill_REG <= ~state_s_release;
      io_msInfo_bits_blockRefill_REG_1 <= ~state_s_release;
      io_msInfo_bits_blockRefill_REG_2 <= io_msInfo_bits_blockRefill_REG_1;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:14];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hF; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        gotT = _RANDOM[4'h0][0];
        gotDirty = _RANDOM[4'h0][1];
        gotGrantData = _RANDOM[4'h0][2];
        probeDirty = _RANDOM[4'h0][3];
        probeGotN = _RANDOM[4'h0][4];
        corrupt = _RANDOM[4'h0][6];
        req_valid = _RANDOM[4'h2][7];
        req_channel = _RANDOM[4'h2][10:8];
        req_set = _RANDOM[4'h2][14];
        req_tag = {_RANDOM[4'h2][31:15], _RANDOM[4'h3][23:0]};
        req_off = _RANDOM[4'h3][29:24];
        req_isKeyword = _RANDOM[4'h3][30];
        req_opcode = {_RANDOM[4'h3][31], _RANDOM[4'h4][2:0]};
        req_param = _RANDOM[4'h4][5:3];
        req_size = _RANDOM[4'h4][8:6];
        req_sourceId = _RANDOM[4'h4][14:9];
        req_needProbeAckData = _RANDOM[4'h4][17];
        req_reqSource = _RANDOM[4'h5][24:20];
        dirResult_hit = _RANDOM[4'h7][7];
        dirResult_tag = {_RANDOM[4'h7][31:8], _RANDOM[4'h8][16:0]};
        dirResult_set = _RANDOM[4'h8][17];
        dirResult_way = _RANDOM[4'h8][19:18];
        dirResult_meta_dirty = _RANDOM[4'h8][20];
        dirResult_meta_state = _RANDOM[4'h8][22:21];
        dirResult_meta_clients = _RANDOM[4'h8][23];
        dirResult_meta_accessed = _RANDOM[4'h8][24];
        dirResult_meta_tagErr = _RANDOM[4'h8][25];
        dirResult_meta_dataErr = _RANDOM[4'h8][26];
        state_s_acquire = _RANDOM[4'h9][8];
        state_s_rprobe = _RANDOM[4'h9][9];
        state_s_pprobe = _RANDOM[4'h9][10];
        state_s_release = _RANDOM[4'h9][11];
        state_s_probeack = _RANDOM[4'h9][12];
        state_s_refill = _RANDOM[4'h9][13];
        state_s_retry = _RANDOM[4'h9][14];
        state_s_cmoresp = _RANDOM[4'h9][15];
        state_s_cmometaw = _RANDOM[4'h9][16];
        state_w_rprobeackfirst = _RANDOM[4'h9][17];
        state_w_rprobeacklast = _RANDOM[4'h9][18];
        state_w_pprobeackfirst = _RANDOM[4'h9][19];
        state_w_pprobeacklast = _RANDOM[4'h9][20];
        state_w_grantfirst = _RANDOM[4'h9][21];
        state_w_grantlast = _RANDOM[4'h9][22];
        state_w_grant = _RANDOM[4'h9][23];
        state_w_releaseack = _RANDOM[4'h9][24];
        state_w_replResp = _RANDOM[4'h9][25];
        mergeA = _RANDOM[4'h9][26];
        mp_grant_task_merge_task_r_off = _RANDOM[4'hB][16:11];
        mp_grant_task_merge_task_r_isKeyword = _RANDOM[4'hB][17];
        mp_grant_task_merge_task_r_opcode = _RANDOM[4'hB][21:18];
        mp_grant_task_merge_task_r_param = _RANDOM[4'hB][24:22];
        mp_grant_task_merge_task_r_sourceId = {_RANDOM[4'hB][31:28], _RANDOM[4'hC][1:0]};
        io_msInfo_bits_blockRefill_REG = _RANDOM[4'hE][26];
        io_msInfo_bits_blockRefill_REG_1 = _RANDOM[4'hE][27];
        io_msInfo_bits_blockRefill_REG_2 = _RANDOM[4'hE][28];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        gotT = 1'h0;
        gotDirty = 1'h0;
        gotGrantData = 1'h0;
        probeDirty = 1'h0;
        probeGotN = 1'h0;
        corrupt = 1'h0;
        req_valid = 1'h0;
        req_channel = 3'h0;
        req_set = 1'h0;
        req_tag = 41'h0;
        req_off = 6'h0;
        req_isKeyword = 1'h0;
        req_opcode = 4'h0;
        req_param = 3'h0;
        req_size = 3'h0;
        req_sourceId = 6'h0;
        req_needProbeAckData = 1'h0;
        req_reqSource = 5'h0;
        dirResult_hit = 1'h0;
        dirResult_tag = 41'h0;
        dirResult_set = 1'h0;
        dirResult_way = 2'h0;
        dirResult_meta_dirty = 1'h0;
        dirResult_meta_state = 2'h0;
        dirResult_meta_clients = 1'h0;
        dirResult_meta_accessed = 1'h0;
        dirResult_meta_tagErr = 1'h0;
        dirResult_meta_dataErr = 1'h0;
        state_s_acquire = 1'h1;
        state_s_rprobe = 1'h1;
        state_s_pprobe = 1'h1;
        state_s_release = 1'h1;
        state_s_probeack = 1'h1;
        state_s_refill = 1'h1;
        state_s_retry = 1'h1;
        state_s_cmoresp = 1'h1;
        state_s_cmometaw = 1'h1;
        state_w_rprobeackfirst = 1'h1;
        state_w_rprobeacklast = 1'h1;
        state_w_pprobeackfirst = 1'h1;
        state_w_pprobeacklast = 1'h1;
        state_w_grantfirst = 1'h1;
        state_w_grantlast = 1'h1;
        state_w_grant = 1'h1;
        state_w_releaseack = 1'h1;
        state_w_replResp = 1'h1;
        mergeA = 1'h0;
        mp_grant_task_merge_task_r_off = 6'h0;
        mp_grant_task_merge_task_r_isKeyword = 1'h0;
        mp_grant_task_merge_task_r_opcode = 4'h0;
        mp_grant_task_merge_task_r_param = 3'h0;
        mp_grant_task_merge_task_r_sourceId = 6'h0;
        io_msInfo_bits_blockRefill_REG = 1'h0;
        io_msInfo_bits_blockRefill_REG_1 = 1'h0;
        io_msInfo_bits_blockRefill_REG_2 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_status_valid = req_valid;
  assign io_status_bits_channel = req_channel;
  assign io_status_bits_set = req_set;
  assign io_status_bits_reqTag = req_tag;
  assign io_status_bits_metaTag = dirResult_tag;
  assign io_status_bits_needsRepl = ~state_s_release;
  assign io_status_bits_w_c_resp = ~state_w_rprobeacklast | ~state_w_pprobeacklast;
  assign io_status_bits_will_free = will_free;
  assign io_status_bits_reqSource = req_reqSource;
  assign io_msInfo_valid = req_valid;
  assign io_msInfo_bits_channel = req_channel;
  assign io_msInfo_bits_set = req_set;
  assign io_msInfo_bits_way = dirResult_way;
  assign io_msInfo_bits_reqTag = req_tag;
  assign io_msInfo_bits_willFree = will_free;
  assign io_msInfo_bits_needRelease = ~state_w_releaseack;
  assign io_msInfo_bits_blockRefill =
    ~state_s_release | io_msInfo_bits_blockRefill_REG | io_msInfo_bits_blockRefill_REG_2;
  assign io_msInfo_bits_meta_dirty = io_msInfo_bits_meta_dirty_0;
  assign io_msInfo_bits_meta_state = dirResult_meta_state;
  assign io_msInfo_bits_meta_clients = dirResult_meta_clients;
  assign io_msInfo_bits_meta_accessed = dirResult_meta_accessed;
  assign io_msInfo_bits_meta_tagErr = dirResult_meta_tagErr;
  assign io_msInfo_bits_meta_dataErr = dirResult_meta_dataErr;
  assign io_msInfo_bits_metaTag = dirResult_tag;
  assign io_msInfo_bits_dirHit = dirResult_hit;
  assign io_msInfo_bits_isAcqOrPrefetch = req_acquire | req_prefetch;
  assign io_msInfo_bits_isPrefetch = req_prefetch;
  assign io_msInfo_bits_param = req_param;
  assign io_msInfo_bits_mergeA = mergeA;
  assign io_msInfo_bits_w_grantfirst = state_w_grantfirst;
  assign io_msInfo_bits_s_release = state_s_release;
  assign io_msInfo_bits_s_refill = state_s_refill;
  assign io_msInfo_bits_w_releaseack = state_w_releaseack;
  assign io_msInfo_bits_w_replResp = state_w_replResp;
  assign io_msInfo_bits_w_rprobeacklast = state_w_rprobeacklast;
  assign io_tasks_source_a_valid = ~state_s_acquire;
  assign io_tasks_source_a_bits_tag = req_tag;
  assign io_tasks_source_a_bits_set = req_set;
  assign io_tasks_source_a_bits_off = req_off;
  assign io_tasks_source_a_bits_opcode =
    req_acquirePerm & dirResult_hit ? req_opcode[2:0] : 3'h6;
  assign io_tasks_source_a_bits_param = req_needT ? (dirResult_hit ? 2'h2 : 2'h1) : 2'h0;
  assign io_tasks_source_a_bits_size = req_size;
  assign io_tasks_source_a_bits_source = io_id;
  assign io_tasks_source_a_bits_reqSource = req_reqSource;
  assign io_tasks_source_b_valid = io_tasks_source_b_valid_0;
  assign io_tasks_source_b_bits_tag = dirResult_tag;
  assign io_tasks_source_b_bits_set = dirResult_set;
  assign io_tasks_source_b_bits_param =
    state_s_pprobe
      ? (req_get & dirResult_hit & dirResult_meta_state == 2'h2 ? 2'h1 : 2'h2)
      : req_param[1:0];
  assign io_tasks_mainpipe_valid = mp_release_valid | mp_probeack_valid | mp_grant_valid;
  assign io_tasks_mainpipe_bits_channel = req_channel;
  assign io_tasks_mainpipe_bits_set = req_set;
  assign io_tasks_mainpipe_bits_tag = _GEN_1 ? req_tag : dirResult_tag;
  assign io_tasks_mainpipe_bits_off = _GEN_1 ? req_off : 6'h0;
  assign io_tasks_mainpipe_bits_isKeyword = req_isKeyword;
  assign io_tasks_mainpipe_bits_opcode =
    mp_grant_valid
      ? _GEN[req_opcode]
      : mp_release_valid ? 4'h7 : {3'h2, _mp_probeack_task_mp_probeack_opcode_T_3};
  assign io_tasks_mainpipe_bits_param =
    mp_grant_valid
      ? (req_get | req_prefetch | req_param == 3'h1 | req_param == 3'h2
           ? 3'h0
           : req_param == 3'h0 ? _GEN_0 : req_param)
      : mp_release_valid
          ? (dirResult_meta_state[1] ? 3'h1 : 3'h2)
          : {1'h0,
             _mp_probeack_task_mp_probeack_param_T_2 == 3'h2,
             _mp_probeack_task_mp_probeack_param_T_2 == 3'h6};
  assign io_tasks_mainpipe_bits_sourceId = mp_grant_valid ? req_sourceId : 6'h0;
  assign io_tasks_mainpipe_bits_corrupt = mp_grant_valid & corrupt;
  assign io_tasks_mainpipe_bits_mshrId = io_id;
  assign io_tasks_mainpipe_bits_useProbeData =
    mp_grant_valid ? dirResult_hit & req_get : ~mp_release_valid;
  assign io_tasks_mainpipe_bits_mshrRetry = mp_grant_valid & ~state_s_retry;
  assign io_tasks_mainpipe_bits_readProbeDataDown =
    ~mp_grant_valid & (mp_release_valid | _mp_probeack_task_mp_probeack_opcode_T_3);
  assign io_tasks_mainpipe_bits_dirty =
    ~mp_grant_valid
    & (mp_release_valid
         ? dirResult_meta_dirty & (|dirResult_meta_state) | probeDirty
         : dirResult_meta_dirty & (|dirResult_meta_state) | probeDirty);
  assign io_tasks_mainpipe_bits_way = dirResult_way;
  assign io_tasks_mainpipe_bits_meta_dirty =
    mp_grant_valid & (gotDirty | dirResult_hit & io_msInfo_bits_meta_dirty_0);
  assign io_tasks_mainpipe_bits_meta_state =
    mp_grant_valid
      ? (req_get
           ? {dirResult_hit ? dirResult_meta_state[1] : req_promoteT, 1'h1}
           : req_promoteT | req_needT ? {1'h1, req_prefetch} : 2'h1)
      : mp_release_valid | req_param == 3'h2
          ? 2'h0
          : req_param == 3'h1 ? 2'h1 : dirResult_meta_state;
  assign io_tasks_mainpipe_bits_meta_clients =
    mp_grant_valid
      ? (req_prefetch
           ? dirResult_hit & dirResult_meta_clients
           : ~(req_get & (~dirResult_hit | ~dirResult_meta_clients | probeGotN)))
      : ~mp_release_valid & ~probeGotN;
  assign io_tasks_mainpipe_bits_meta_accessed =
    mp_grant_valid
      ? mp_grant_task_mp_grant_meta_entry_accessed
      : ~mp_release_valid & _mp_probeack_task_mp_probeack_dsWen_T
        & dirResult_meta_accessed;
  assign io_tasks_mainpipe_bits_metaWen = mp_grant_valid | ~mp_release_valid;
  assign io_tasks_mainpipe_bits_tagWen = mp_grant_valid & ~dirResult_hit;
  assign io_tasks_mainpipe_bits_dsWen =
    mp_grant_valid
      ? gotGrantData | probeDirty & req_get
      : mp_release_valid | _mp_probeack_task_mp_probeack_dsWen_T & probeDirty;
  assign io_tasks_mainpipe_bits_replTask =
    mp_grant_valid ? ~dirResult_hit : mp_release_valid;
  assign io_tasks_mainpipe_bits_reqSource = req_reqSource;
  assign io_tasks_mainpipe_bits_mergeA = mp_grant_valid & (mergeA | io_aMergeTask_valid);
  assign io_tasks_mainpipe_bits_aMergeTask_off =
    mp_grant_valid
      ? (io_aMergeTask_valid ? io_aMergeTask_bits_off : mp_grant_task_merge_task_r_off)
      : 6'h0;
  assign io_tasks_mainpipe_bits_aMergeTask_isKeyword =
    mp_grant_valid
    & (io_aMergeTask_valid
         ? io_aMergeTask_bits_isKeyword
         : mp_grant_task_merge_task_r_isKeyword);
  assign io_tasks_mainpipe_bits_aMergeTask_opcode =
    mp_grant_valid ? _GEN[mp_grant_task_merge_task_opcode][2:0] : 3'h0;
  assign io_tasks_mainpipe_bits_aMergeTask_param =
    ~mp_grant_valid | mp_grant_task_merge_task_param == 3'h1
    | mp_grant_task_merge_task_param == 3'h2
      ? 3'h0
      : mp_grant_task_merge_task_param == 3'h0 ? _GEN_0 : mp_grant_task_merge_task_param;
  assign io_tasks_mainpipe_bits_aMergeTask_sourceId =
    mp_grant_valid
      ? (io_aMergeTask_valid
           ? io_aMergeTask_bits_sourceId
           : mp_grant_task_merge_task_r_sourceId)
      : 6'h0;
  assign io_tasks_mainpipe_bits_aMergeTask_meta_dirty =
    mp_grant_valid & (gotDirty | dirResult_hit & io_msInfo_bits_meta_dirty_0);
  assign io_tasks_mainpipe_bits_aMergeTask_meta_state =
    mp_grant_valid
      ? (req_promoteT | ~(mp_grant_task_merge_task_opcode[2])
         | mp_grant_task_merge_task_opcode == 4'h5
         & mp_grant_task_merge_task_param == 3'h1
         | (mp_grant_task_merge_task_opcode == 4'h6
            | mp_grant_task_merge_task_opcode == 4'h7) & (|mp_grant_task_merge_task_param)
           ? 2'h2
           : 2'h1)
      : 2'h0;
  assign io_tasks_mainpipe_bits_aMergeTask_meta_clients = mp_grant_valid;
  assign io_tasks_mainpipe_bits_aMergeTask_meta_accessed = mp_grant_valid;
  assign io_nestedwbData = nestedwb_match & io_nestedwb_c_set_dirty;
endmodule

