// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module UncacheEntry_5(
  input          clock,
  input          reset,
  input          io_redirect_valid,
  input          io_redirect_bits_robIdx_flag,
  input  [5:0]   io_redirect_bits_robIdx_value,
  input          io_redirect_bits_level,
  output         io_flush,
  input          io_rob_pendingMMIOld,
  input          io_rob_pendingPtr_flag,
  input  [5:0]   io_rob_pendingPtr_value,
  output         io_mmioSelect,
  output         io_slaveId_valid,
  output [1:0]   io_slaveId_bits,
  input          io_req_valid,
  input          io_req_bits_uop_exceptionVec_3,
  input          io_req_bits_uop_exceptionVec_4,
  input          io_req_bits_uop_exceptionVec_5,
  input          io_req_bits_uop_exceptionVec_13,
  input          io_req_bits_uop_exceptionVec_19,
  input          io_req_bits_uop_exceptionVec_21,
  input  [3:0]   io_req_bits_uop_trigger,
  input          io_req_bits_uop_preDecodeInfo_isRVC,
  input          io_req_bits_uop_ftqPtr_flag,
  input  [2:0]   io_req_bits_uop_ftqPtr_value,
  input  [3:0]   io_req_bits_uop_ftqOffset,
  input  [8:0]   io_req_bits_uop_fuOpType,
  input          io_req_bits_uop_rfWen,
  input          io_req_bits_uop_fpWen,
  input  [7:0]   io_req_bits_uop_vpu_vstart,
  input  [1:0]   io_req_bits_uop_vpu_veew,
  input  [6:0]   io_req_bits_uop_uopIdx,
  input  [7:0]   io_req_bits_uop_pdest,
  input          io_req_bits_uop_robIdx_flag,
  input  [5:0]   io_req_bits_uop_robIdx_value,
  input          io_req_bits_uop_storeSetHit,
  input          io_req_bits_uop_waitForRobIdx_flag,
  input  [5:0]   io_req_bits_uop_waitForRobIdx_value,
  input          io_req_bits_uop_loadWaitBit,
  input          io_req_bits_uop_loadWaitStrict,
  input          io_req_bits_uop_lqIdx_flag,
  input  [4:0]   io_req_bits_uop_lqIdx_value,
  input          io_req_bits_uop_sqIdx_flag,
  input  [4:0]   io_req_bits_uop_sqIdx_value,
  input  [49:0]  io_req_bits_vaddr,
  input  [63:0]  io_req_bits_fullva,
  input  [47:0]  io_req_bits_paddr,
  input  [63:0]  io_req_bits_gpaddr,
  input  [15:0]  io_req_bits_mask,
  input          io_req_bits_nc,
  input          io_req_bits_mmio,
  input          io_req_bits_memBackTypeMM,
  input          io_req_bits_isHyper,
  input          io_req_bits_isForVSnonLeafPTE,
  input          io_req_bits_isvec,
  input          io_req_bits_is128bit,
  input          io_req_bits_vecActive,
  input  [4:0]   io_req_bits_schedIndex,
  input          io_mmioOut_ready,
  output         io_mmioOut_valid,
  output         io_mmioOut_bits_uop_exceptionVec_3,
  output         io_mmioOut_bits_uop_exceptionVec_4,
  output         io_mmioOut_bits_uop_exceptionVec_5,
  output         io_mmioOut_bits_uop_exceptionVec_13,
  output         io_mmioOut_bits_uop_exceptionVec_19,
  output         io_mmioOut_bits_uop_exceptionVec_21,
  output [3:0]   io_mmioOut_bits_uop_trigger,
  output         io_mmioOut_bits_uop_preDecodeInfo_isRVC,
  output         io_mmioOut_bits_uop_ftqPtr_flag,
  output [2:0]   io_mmioOut_bits_uop_ftqPtr_value,
  output [3:0]   io_mmioOut_bits_uop_ftqOffset,
  output [8:0]   io_mmioOut_bits_uop_fuOpType,
  output         io_mmioOut_bits_uop_rfWen,
  output         io_mmioOut_bits_uop_fpWen,
  output         io_mmioOut_bits_uop_flushPipe,
  output [7:0]   io_mmioOut_bits_uop_vpu_vstart,
  output [1:0]   io_mmioOut_bits_uop_vpu_veew,
  output [6:0]   io_mmioOut_bits_uop_uopIdx,
  output [7:0]   io_mmioOut_bits_uop_pdest,
  output         io_mmioOut_bits_uop_robIdx_flag,
  output [5:0]   io_mmioOut_bits_uop_robIdx_value,
  output         io_mmioOut_bits_uop_storeSetHit,
  output         io_mmioOut_bits_uop_waitForRobIdx_flag,
  output [5:0]   io_mmioOut_bits_uop_waitForRobIdx_value,
  output         io_mmioOut_bits_uop_loadWaitBit,
  output         io_mmioOut_bits_uop_loadWaitStrict,
  output         io_mmioOut_bits_uop_lqIdx_flag,
  output [4:0]   io_mmioOut_bits_uop_lqIdx_value,
  output         io_mmioOut_bits_uop_sqIdx_flag,
  output [4:0]   io_mmioOut_bits_uop_sqIdx_value,
  output         io_mmioOut_bits_uop_replayInst,
  output [63:0]  io_mmioRawData_lqData,
  output [8:0]   io_mmioRawData_uop_fuOpType,
  output         io_mmioRawData_uop_fpWen,
  output [2:0]   io_mmioRawData_addrOffset,
  input          io_ncOut_ready,
  output         io_ncOut_valid,
  output         io_ncOut_bits_uop_exceptionVec_4,
  output         io_ncOut_bits_uop_exceptionVec_19,
  output         io_ncOut_bits_uop_preDecodeInfo_isRVC,
  output         io_ncOut_bits_uop_ftqPtr_flag,
  output [2:0]   io_ncOut_bits_uop_ftqPtr_value,
  output [3:0]   io_ncOut_bits_uop_ftqOffset,
  output [8:0]   io_ncOut_bits_uop_fuOpType,
  output         io_ncOut_bits_uop_rfWen,
  output         io_ncOut_bits_uop_fpWen,
  output [7:0]   io_ncOut_bits_uop_vpu_vstart,
  output [1:0]   io_ncOut_bits_uop_vpu_veew,
  output [6:0]   io_ncOut_bits_uop_uopIdx,
  output [7:0]   io_ncOut_bits_uop_pdest,
  output         io_ncOut_bits_uop_robIdx_flag,
  output [5:0]   io_ncOut_bits_uop_robIdx_value,
  output         io_ncOut_bits_uop_storeSetHit,
  output         io_ncOut_bits_uop_waitForRobIdx_flag,
  output [5:0]   io_ncOut_bits_uop_waitForRobIdx_value,
  output         io_ncOut_bits_uop_loadWaitBit,
  output         io_ncOut_bits_uop_loadWaitStrict,
  output         io_ncOut_bits_uop_lqIdx_flag,
  output [4:0]   io_ncOut_bits_uop_lqIdx_value,
  output         io_ncOut_bits_uop_sqIdx_flag,
  output [4:0]   io_ncOut_bits_uop_sqIdx_value,
  output [49:0]  io_ncOut_bits_vaddr,
  output [47:0]  io_ncOut_bits_paddr,
  output [128:0] io_ncOut_bits_data,
  output         io_ncOut_bits_isvec,
  output         io_ncOut_bits_is128bit,
  output         io_ncOut_bits_vecActive,
  output [4:0]   io_ncOut_bits_schedIndex,
  input          io_uncache_req_ready,
  output         io_uncache_req_valid,
  output         io_uncache_req_bits_robIdx_flag,
  output [5:0]   io_uncache_req_bits_robIdx_value,
  output [47:0]  io_uncache_req_bits_addr,
  output [49:0]  io_uncache_req_bits_vaddr,
  output [7:0]   io_uncache_req_bits_mask,
  output         io_uncache_req_bits_nc,
  output         io_uncache_req_bits_memBackTypeMM,
  input          io_uncache_idResp_valid,
  input  [4:0]   io_uncache_idResp_bits_mid,
  input  [1:0]   io_uncache_idResp_bits_sid,
  input          io_uncache_resp_valid,
  input  [63:0]  io_uncache_resp_bits_data,
  input          io_uncache_resp_bits_nderr,
  output         io_exception_valid,
  output         io_exception_bits_uop_exceptionVec_3,
  output         io_exception_bits_uop_exceptionVec_4,
  output         io_exception_bits_uop_exceptionVec_5,
  output         io_exception_bits_uop_exceptionVec_13,
  output         io_exception_bits_uop_exceptionVec_19,
  output         io_exception_bits_uop_exceptionVec_21,
  output [6:0]   io_exception_bits_uop_uopIdx,
  output         io_exception_bits_uop_robIdx_flag,
  output [5:0]   io_exception_bits_uop_robIdx_value,
  output [63:0]  io_exception_bits_fullva,
  output [63:0]  io_exception_bits_gpaddr,
  output         io_exception_bits_isHyper,
  output         io_exception_bits_isForVSnonLeafPTE
);

  wire            io_mmioOut_valid_0;
  wire            io_ncOut_valid_0;
  wire            flush;
  reg             req_valid;
  reg             req_uop_exceptionVec_3;
  reg             req_uop_exceptionVec_4;
  reg             req_uop_exceptionVec_5;
  reg             req_uop_exceptionVec_13;
  reg             req_uop_exceptionVec_19;
  reg             req_uop_exceptionVec_21;
  reg  [3:0]      req_uop_trigger;
  reg             req_uop_preDecodeInfo_isRVC;
  reg             req_uop_ftqPtr_flag;
  reg  [2:0]      req_uop_ftqPtr_value;
  reg  [3:0]      req_uop_ftqOffset;
  reg  [8:0]      req_uop_fuOpType;
  reg             req_uop_rfWen;
  reg             req_uop_fpWen;
  reg             req_uop_flushPipe;
  reg  [7:0]      req_uop_vpu_vstart;
  reg  [1:0]      req_uop_vpu_veew;
  reg  [6:0]      req_uop_uopIdx;
  reg  [7:0]      req_uop_pdest;
  reg             req_uop_robIdx_flag;
  reg  [5:0]      req_uop_robIdx_value;
  reg             req_uop_storeSetHit;
  reg             req_uop_waitForRobIdx_flag;
  reg  [5:0]      req_uop_waitForRobIdx_value;
  reg             req_uop_loadWaitBit;
  reg             req_uop_loadWaitStrict;
  reg             req_uop_lqIdx_flag;
  reg  [4:0]      req_uop_lqIdx_value;
  reg             req_uop_sqIdx_flag;
  reg  [4:0]      req_uop_sqIdx_value;
  reg             req_uop_replayInst;
  reg  [49:0]     req_vaddr;
  reg  [63:0]     req_fullva;
  reg  [47:0]     req_paddr;
  reg  [63:0]     req_gpaddr;
  reg  [15:0]     req_mask;
  reg             req_nc;
  reg             req_mmio;
  reg             req_memBackTypeMM;
  reg             req_isHyper;
  reg             req_isForVSnonLeafPTE;
  reg             req_isvec;
  reg             req_is128bit;
  reg             req_vecActive;
  reg  [4:0]      req_schedIndex;
  reg             slaveAccept;
  reg  [1:0]      slaveId;
  reg  [1:0]      uncacheState;
  reg  [63:0]     uncacheData;
  reg             nderr;
  wire            writeback =
    req_nc ? io_ncOut_ready & io_ncOut_valid_0 : io_mmioOut_ready & io_mmioOut_valid_0;
  wire            slaveAck =
    req_valid & io_uncache_idResp_valid & io_uncache_idResp_bits_mid == 5'h5;
  reg             needFlushReg;
  wire [6:0]      _canSendReq_T_2 = {req_uop_robIdx_flag, req_uop_robIdx_value};
  wire            needFlush =
    req_valid & io_redirect_valid
    & (io_redirect_bits_level
       & _canSendReq_T_2 == {io_redirect_bits_robIdx_flag, io_redirect_bits_robIdx_value}
       | req_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
       ^ req_uop_robIdx_value > io_redirect_bits_robIdx_value);
  wire            _GEN = flush | ~io_req_valid;
  wire            _GEN_0 = flush | io_req_valid;
  reg             pendingld_last_REG;
  reg             pendingPtr_next_r_flag;
  reg  [5:0]      pendingPtr_next_r_value;
  wire            _GEN_1 = needFlush | needFlushReg;
  wire            _GEN_2 = needFlush | writeback;
  assign flush =
    uncacheState == 2'h0 | uncacheState == 2'h1
      ? needFlush
      : uncacheState == 2'h2 ? io_uncache_resp_valid & _GEN_1 : (&uncacheState) & _GEN_2;
  wire            io_uncache_req_valid_0 = uncacheState == 2'h1 & ~needFlush;
  assign io_ncOut_valid_0 = req_nc & (&uncacheState) & ~needFlush;
  assign io_mmioOut_valid_0 = ~req_nc & (&uncacheState) & ~needFlush;
  wire [6:0]      _canSendReq_T_3 = {pendingPtr_next_r_flag, pendingPtr_next_r_value};
  wire [3:0][1:0] _GEN_3 =
    {{(&uncacheState) & _GEN_2 ? 2'h0 : uncacheState},
     {io_uncache_resp_valid ? (_GEN_1 ? 2'h0 : 2'h3) : uncacheState},
     {needFlush
        ? 2'h0
        : io_uncache_req_ready & io_uncache_req_valid_0 ? 2'h2 : uncacheState},
     {needFlush
        ? 2'h0
        : req_valid & ~needFlush
          & (req_nc | pendingld_last_REG & _canSendReq_T_2 == _canSendReq_T_3)
            ? 2'h1
            : uncacheState}};
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      req_valid <= 1'h0;
      slaveAccept <= 1'h0;
      uncacheState <= 2'h0;
      nderr <= 1'h0;
      needFlushReg <= 1'h0;
      pendingld_last_REG <= 1'h0;
      pendingPtr_next_r_flag <= 1'h0;
      pendingPtr_next_r_value <= 6'h0;
    end
    else begin
      req_valid <= ~flush & (io_req_valid | (slaveAck | ~writeback) & req_valid);
      slaveAccept <= ~_GEN_0 & (slaveAck | ~writeback & slaveAccept);
      uncacheState <= _GEN_3[uncacheState];
      if (io_uncache_resp_valid)
        nderr <= io_uncache_resp_bits_nderr;
      else
        nderr <= _GEN & nderr;
      needFlushReg <= ~flush & (needFlush | needFlushReg);
      pendingld_last_REG <= io_rob_pendingMMIOld;
      if (~({io_rob_pendingPtr_flag, io_rob_pendingPtr_value} == _canSendReq_T_3)) begin
        pendingPtr_next_r_flag <= io_rob_pendingPtr_flag;
        pendingPtr_next_r_value <= io_rob_pendingPtr_value;
      end
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_GEN) begin
    end
    else begin
      req_uop_exceptionVec_3 <= io_req_bits_uop_exceptionVec_3;
      req_uop_exceptionVec_4 <= io_req_bits_uop_exceptionVec_4;
      req_uop_exceptionVec_5 <= io_req_bits_uop_exceptionVec_5;
      req_uop_exceptionVec_13 <= io_req_bits_uop_exceptionVec_13;
      req_uop_exceptionVec_19 <= io_req_bits_uop_exceptionVec_19;
      req_uop_exceptionVec_21 <= io_req_bits_uop_exceptionVec_21;
      req_uop_trigger <= io_req_bits_uop_trigger;
      req_uop_preDecodeInfo_isRVC <= io_req_bits_uop_preDecodeInfo_isRVC;
      req_uop_ftqPtr_flag <= io_req_bits_uop_ftqPtr_flag;
      req_uop_ftqPtr_value <= io_req_bits_uop_ftqPtr_value;
      req_uop_ftqOffset <= io_req_bits_uop_ftqOffset;
      req_uop_fuOpType <= io_req_bits_uop_fuOpType;
      req_uop_rfWen <= io_req_bits_uop_rfWen;
      req_uop_fpWen <= io_req_bits_uop_fpWen;
    end
    req_uop_flushPipe <= _GEN & req_uop_flushPipe;
    if (_GEN) begin
    end
    else begin
      req_uop_vpu_vstart <= io_req_bits_uop_vpu_vstart;
      req_uop_vpu_veew <= io_req_bits_uop_vpu_veew;
      req_uop_uopIdx <= io_req_bits_uop_uopIdx;
      req_uop_pdest <= io_req_bits_uop_pdest;
      req_uop_robIdx_flag <= io_req_bits_uop_robIdx_flag;
      req_uop_robIdx_value <= io_req_bits_uop_robIdx_value;
      req_uop_storeSetHit <= io_req_bits_uop_storeSetHit;
      req_uop_waitForRobIdx_flag <= io_req_bits_uop_waitForRobIdx_flag;
      req_uop_waitForRobIdx_value <= io_req_bits_uop_waitForRobIdx_value;
      req_uop_loadWaitBit <= io_req_bits_uop_loadWaitBit;
      req_uop_loadWaitStrict <= io_req_bits_uop_loadWaitStrict;
      req_uop_lqIdx_flag <= io_req_bits_uop_lqIdx_flag;
      req_uop_lqIdx_value <= io_req_bits_uop_lqIdx_value;
      req_uop_sqIdx_flag <= io_req_bits_uop_sqIdx_flag;
      req_uop_sqIdx_value <= io_req_bits_uop_sqIdx_value;
    end
    req_uop_replayInst <= _GEN & req_uop_replayInst;
    if (_GEN) begin
    end
    else begin
      req_vaddr <= io_req_bits_vaddr;
      req_fullva <= io_req_bits_fullva;
      req_paddr <= io_req_bits_paddr;
      req_gpaddr <= io_req_bits_gpaddr;
      req_mask <= io_req_bits_mask;
      req_nc <= io_req_bits_nc;
      req_mmio <= io_req_bits_mmio;
      req_memBackTypeMM <= io_req_bits_memBackTypeMM;
      req_isHyper <= io_req_bits_isHyper;
      req_isForVSnonLeafPTE <= io_req_bits_isForVSnonLeafPTE;
      req_isvec <= io_req_bits_isvec;
      req_is128bit <= io_req_bits_is128bit;
      req_vecActive <= io_req_bits_vecActive;
      req_schedIndex <= io_req_bits_schedIndex;
    end
    if (_GEN_0 | ~slaveAck) begin
    end
    else
      slaveId <= io_uncache_idResp_bits_sid;
    if (io_uncache_resp_valid)
      uncacheData <= io_uncache_resp_bits_data;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:84];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [6:0] i = 7'h0; i < 7'h55; i += 7'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        req_valid = _RANDOM[7'h0][0];
        req_uop_exceptionVec_3 = _RANDOM[7'h3][0];
        req_uop_exceptionVec_4 = _RANDOM[7'h3][1];
        req_uop_exceptionVec_5 = _RANDOM[7'h3][2];
        req_uop_exceptionVec_13 = _RANDOM[7'h3][10];
        req_uop_exceptionVec_19 = _RANDOM[7'h3][16];
        req_uop_exceptionVec_21 = _RANDOM[7'h3][18];
        req_uop_trigger = _RANDOM[7'h3][26:23];
        req_uop_preDecodeInfo_isRVC = _RANDOM[7'h3][28];
        req_uop_ftqPtr_flag = _RANDOM[7'h4][3];
        req_uop_ftqPtr_value = _RANDOM[7'h4][6:4];
        req_uop_ftqOffset = _RANDOM[7'h4][10:7];
        req_uop_fuOpType = _RANDOM[7'h6][16:8];
        req_uop_rfWen = _RANDOM[7'h6][17];
        req_uop_fpWen = _RANDOM[7'h6][18];
        req_uop_flushPipe = _RANDOM[7'h6][25];
        req_uop_vpu_vstart = {_RANDOM[7'h8][31:26], _RANDOM[7'h9][1:0]};
        req_uop_vpu_veew = _RANDOM[7'hE][2:1];
        req_uop_uopIdx = _RANDOM[7'hE][22:16];
        req_uop_pdest = _RANDOM[7'h11][29:22];
        req_uop_robIdx_flag = _RANDOM[7'h12][10];
        req_uop_robIdx_value = _RANDOM[7'h12][16:11];
        req_uop_storeSetHit = _RANDOM[7'h27][2];
        req_uop_waitForRobIdx_flag = _RANDOM[7'h27][3];
        req_uop_waitForRobIdx_value = _RANDOM[7'h27][9:4];
        req_uop_loadWaitBit = _RANDOM[7'h27][10];
        req_uop_loadWaitStrict = _RANDOM[7'h27][11];
        req_uop_lqIdx_flag = _RANDOM[7'h27][17];
        req_uop_lqIdx_value = _RANDOM[7'h27][22:18];
        req_uop_sqIdx_flag = _RANDOM[7'h27][23];
        req_uop_sqIdx_value = _RANDOM[7'h27][28:24];
        req_uop_replayInst = _RANDOM[7'h27][30];
        req_vaddr = {_RANDOM[7'h28][31:4], _RANDOM[7'h29][21:0]};
        req_fullva = {_RANDOM[7'h29][31:22], _RANDOM[7'h2A], _RANDOM[7'h2B][21:0]};
        req_paddr = {_RANDOM[7'h2B][31:23], _RANDOM[7'h2C], _RANDOM[7'h2D][6:0]};
        req_gpaddr = {_RANDOM[7'h2D][31:7], _RANDOM[7'h2E], _RANDOM[7'h2F][6:0]};
        req_mask = _RANDOM[7'h2F][22:7];
        req_nc = _RANDOM[7'h33][29];
        req_mmio = _RANDOM[7'h33][30];
        req_memBackTypeMM = _RANDOM[7'h33][31];
        req_isHyper = _RANDOM[7'h34][1];
        req_isForVSnonLeafPTE = _RANDOM[7'h34][2];
        req_isvec = _RANDOM[7'h38][24];
        req_is128bit = _RANDOM[7'h38][26];
        req_vecActive = _RANDOM[7'h3D][13];
        req_schedIndex = _RANDOM[7'h3E][6:2];
        slaveAccept = _RANDOM[7'h51][27];
        slaveId = _RANDOM[7'h51][29:28];
        uncacheState = _RANDOM[7'h51][31:30];
        uncacheData = {_RANDOM[7'h52], _RANDOM[7'h53]};
        nderr = _RANDOM[7'h54][0];
        needFlushReg = _RANDOM[7'h54][1];
        pendingld_last_REG = _RANDOM[7'h54][2];
        pendingPtr_next_r_flag = _RANDOM[7'h54][3];
        pendingPtr_next_r_value = _RANDOM[7'h54][9:4];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        req_valid = 1'h0;
        slaveAccept = 1'h0;
        uncacheState = 2'h0;
        nderr = 1'h0;
        needFlushReg = 1'h0;
        pendingld_last_REG = 1'h0;
        pendingPtr_next_r_flag = 1'h0;
        pendingPtr_next_r_value = 6'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_flush = flush;
  assign io_mmioSelect = (|uncacheState) & req_mmio;
  assign io_slaveId_valid = slaveAccept;
  assign io_slaveId_bits = slaveId;
  assign io_mmioOut_valid = io_mmioOut_valid_0;
  assign io_mmioOut_bits_uop_exceptionVec_3 = req_uop_exceptionVec_3;
  assign io_mmioOut_bits_uop_exceptionVec_4 = req_uop_exceptionVec_4;
  assign io_mmioOut_bits_uop_exceptionVec_5 = req_uop_exceptionVec_5;
  assign io_mmioOut_bits_uop_exceptionVec_13 = req_uop_exceptionVec_13;
  assign io_mmioOut_bits_uop_exceptionVec_19 = nderr;
  assign io_mmioOut_bits_uop_exceptionVec_21 = req_uop_exceptionVec_21;
  assign io_mmioOut_bits_uop_trigger = req_uop_trigger;
  assign io_mmioOut_bits_uop_preDecodeInfo_isRVC = req_uop_preDecodeInfo_isRVC;
  assign io_mmioOut_bits_uop_ftqPtr_flag = req_uop_ftqPtr_flag;
  assign io_mmioOut_bits_uop_ftqPtr_value = req_uop_ftqPtr_value;
  assign io_mmioOut_bits_uop_ftqOffset = req_uop_ftqOffset;
  assign io_mmioOut_bits_uop_fuOpType = req_uop_fuOpType;
  assign io_mmioOut_bits_uop_rfWen = req_uop_rfWen;
  assign io_mmioOut_bits_uop_fpWen = req_uop_fpWen;
  assign io_mmioOut_bits_uop_flushPipe = req_uop_flushPipe;
  assign io_mmioOut_bits_uop_vpu_vstart = req_uop_vpu_vstart;
  assign io_mmioOut_bits_uop_vpu_veew = req_uop_vpu_veew;
  assign io_mmioOut_bits_uop_uopIdx = req_uop_uopIdx;
  assign io_mmioOut_bits_uop_pdest = req_uop_pdest;
  assign io_mmioOut_bits_uop_robIdx_flag = req_uop_robIdx_flag;
  assign io_mmioOut_bits_uop_robIdx_value = req_uop_robIdx_value;
  assign io_mmioOut_bits_uop_storeSetHit = req_uop_storeSetHit;
  assign io_mmioOut_bits_uop_waitForRobIdx_flag = req_uop_waitForRobIdx_flag;
  assign io_mmioOut_bits_uop_waitForRobIdx_value = req_uop_waitForRobIdx_value;
  assign io_mmioOut_bits_uop_loadWaitBit = req_uop_loadWaitBit;
  assign io_mmioOut_bits_uop_loadWaitStrict = req_uop_loadWaitStrict;
  assign io_mmioOut_bits_uop_lqIdx_flag = req_uop_lqIdx_flag;
  assign io_mmioOut_bits_uop_lqIdx_value = req_uop_lqIdx_value;
  assign io_mmioOut_bits_uop_sqIdx_flag = req_uop_sqIdx_flag;
  assign io_mmioOut_bits_uop_sqIdx_value = req_uop_sqIdx_value;
  assign io_mmioOut_bits_uop_replayInst = req_uop_replayInst;
  assign io_mmioRawData_lqData = uncacheData;
  assign io_mmioRawData_uop_fuOpType = req_uop_fuOpType;
  assign io_mmioRawData_uop_fpWen = req_uop_fpWen;
  assign io_mmioRawData_addrOffset = req_paddr[2:0];
  assign io_ncOut_valid = io_ncOut_valid_0;
  assign io_ncOut_bits_uop_exceptionVec_4 = req_uop_exceptionVec_4;
  assign io_ncOut_bits_uop_exceptionVec_19 = nderr;
  assign io_ncOut_bits_uop_preDecodeInfo_isRVC = req_uop_preDecodeInfo_isRVC;
  assign io_ncOut_bits_uop_ftqPtr_flag = req_uop_ftqPtr_flag;
  assign io_ncOut_bits_uop_ftqPtr_value = req_uop_ftqPtr_value;
  assign io_ncOut_bits_uop_ftqOffset = req_uop_ftqOffset;
  assign io_ncOut_bits_uop_fuOpType = req_uop_fuOpType;
  assign io_ncOut_bits_uop_rfWen = req_uop_rfWen;
  assign io_ncOut_bits_uop_fpWen = req_uop_fpWen;
  assign io_ncOut_bits_uop_vpu_vstart = req_uop_vpu_vstart;
  assign io_ncOut_bits_uop_vpu_veew = req_uop_vpu_veew;
  assign io_ncOut_bits_uop_uopIdx = req_uop_uopIdx;
  assign io_ncOut_bits_uop_pdest = req_uop_pdest;
  assign io_ncOut_bits_uop_robIdx_flag = req_uop_robIdx_flag;
  assign io_ncOut_bits_uop_robIdx_value = req_uop_robIdx_value;
  assign io_ncOut_bits_uop_storeSetHit = req_uop_storeSetHit;
  assign io_ncOut_bits_uop_waitForRobIdx_flag = req_uop_waitForRobIdx_flag;
  assign io_ncOut_bits_uop_waitForRobIdx_value = req_uop_waitForRobIdx_value;
  assign io_ncOut_bits_uop_loadWaitBit = req_uop_loadWaitBit;
  assign io_ncOut_bits_uop_loadWaitStrict = req_uop_loadWaitStrict;
  assign io_ncOut_bits_uop_lqIdx_flag = req_uop_lqIdx_flag;
  assign io_ncOut_bits_uop_lqIdx_value = req_uop_lqIdx_value;
  assign io_ncOut_bits_uop_sqIdx_flag = req_uop_sqIdx_flag;
  assign io_ncOut_bits_uop_sqIdx_value = req_uop_sqIdx_value;
  assign io_ncOut_bits_vaddr = req_vaddr;
  assign io_ncOut_bits_paddr = req_paddr;
  assign io_ncOut_bits_data = {65'h0, uncacheData};
  assign io_ncOut_bits_isvec = req_isvec;
  assign io_ncOut_bits_is128bit = req_is128bit;
  assign io_ncOut_bits_vecActive = req_vecActive;
  assign io_ncOut_bits_schedIndex = req_schedIndex;
  assign io_uncache_req_valid = io_uncache_req_valid_0;
  assign io_uncache_req_bits_robIdx_flag = req_uop_robIdx_flag;
  assign io_uncache_req_bits_robIdx_value = req_uop_robIdx_value;
  assign io_uncache_req_bits_addr = req_paddr;
  assign io_uncache_req_bits_vaddr = req_vaddr;
  assign io_uncache_req_bits_mask = req_paddr[3] ? req_mask[15:8] : req_mask[7:0];
  assign io_uncache_req_bits_nc = req_nc;
  assign io_uncache_req_bits_memBackTypeMM = req_memBackTypeMM;
  assign io_exception_valid = writeback;
  assign io_exception_bits_uop_exceptionVec_3 = req_uop_exceptionVec_3;
  assign io_exception_bits_uop_exceptionVec_4 = req_uop_exceptionVec_4;
  assign io_exception_bits_uop_exceptionVec_5 = nderr;
  assign io_exception_bits_uop_exceptionVec_13 = req_uop_exceptionVec_13;
  assign io_exception_bits_uop_exceptionVec_19 = req_uop_exceptionVec_19;
  assign io_exception_bits_uop_exceptionVec_21 = req_uop_exceptionVec_21;
  assign io_exception_bits_uop_uopIdx = req_uop_uopIdx;
  assign io_exception_bits_uop_robIdx_flag = req_uop_robIdx_flag;
  assign io_exception_bits_uop_robIdx_value = req_uop_robIdx_value;
  assign io_exception_bits_fullva = req_fullva;
  assign io_exception_bits_gpaddr = req_gpaddr;
  assign io_exception_bits_isHyper = req_isHyper;
  assign io_exception_bits_isForVSnonLeafPTE = req_isForVSnonLeafPTE;
endmodule

