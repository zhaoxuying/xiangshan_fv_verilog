// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module AXI4RAM(
  input          clock,
  input          reset,
  output         auto_in_aw_ready,
  input          auto_in_aw_valid,
  input  [13:0]  auto_in_aw_bits_id,
  input  [47:0]  auto_in_aw_bits_addr,
  input  [7:0]   auto_in_aw_bits_len,
  input  [2:0]   auto_in_aw_bits_size,
  input  [1:0]   auto_in_aw_bits_burst,
  input          auto_in_aw_bits_lock,
  input  [3:0]   auto_in_aw_bits_cache,
  input  [2:0]   auto_in_aw_bits_prot,
  input  [3:0]   auto_in_aw_bits_qos,
  output         auto_in_w_ready,
  input          auto_in_w_valid,
  input  [255:0] auto_in_w_bits_data,
  input  [31:0]  auto_in_w_bits_strb,
  input          auto_in_w_bits_last,
  input          auto_in_b_ready,
  output         auto_in_b_valid,
  output [13:0]  auto_in_b_bits_id,
  output [1:0]   auto_in_b_bits_resp,
  output         auto_in_ar_ready,
  input          auto_in_ar_valid,
  input  [13:0]  auto_in_ar_bits_id,
  input  [47:0]  auto_in_ar_bits_addr,
  input  [7:0]   auto_in_ar_bits_len,
  input  [2:0]   auto_in_ar_bits_size,
  input  [1:0]   auto_in_ar_bits_burst,
  input          auto_in_ar_bits_lock,
  input  [3:0]   auto_in_ar_bits_cache,
  input  [2:0]   auto_in_ar_bits_prot,
  input  [3:0]   auto_in_ar_bits_qos,
  input          auto_in_r_ready,
  output         auto_in_r_valid,
  output [13:0]  auto_in_r_bits_id,
  output [255:0] auto_in_r_bits_data,
  output [1:0]   auto_in_r_bits_resp,
  output         auto_in_r_bits_last
);

  reg  [1:0]   state;
  wire [63:0]  _rdata_mem_read_data_0;
  wire [63:0]  _rdata_mem_read_data_1;
  wire [63:0]  _rdata_mem_read_data_2;
  wire [63:0]  _rdata_mem_read_data_3;
  wire         nodeIn_aw_valid = auto_in_aw_valid;
  wire [13:0]  nodeIn_aw_bits_id = auto_in_aw_bits_id;
  wire [47:0]  nodeIn_aw_bits_addr = auto_in_aw_bits_addr;
  wire [7:0]   nodeIn_aw_bits_len = auto_in_aw_bits_len;
  wire [2:0]   nodeIn_aw_bits_size = auto_in_aw_bits_size;
  wire [1:0]   nodeIn_aw_bits_burst = auto_in_aw_bits_burst;
  wire         nodeIn_aw_bits_lock = auto_in_aw_bits_lock;
  wire [3:0]   nodeIn_aw_bits_cache = auto_in_aw_bits_cache;
  wire [2:0]   nodeIn_aw_bits_prot = auto_in_aw_bits_prot;
  wire [3:0]   nodeIn_aw_bits_qos = auto_in_aw_bits_qos;
  wire         nodeIn_w_valid = auto_in_w_valid;
  wire [255:0] nodeIn_w_bits_data = auto_in_w_bits_data;
  wire [31:0]  nodeIn_w_bits_strb = auto_in_w_bits_strb;
  wire         nodeIn_w_bits_last = auto_in_w_bits_last;
  wire         nodeIn_b_ready = auto_in_b_ready;
  wire         nodeIn_ar_valid = auto_in_ar_valid;
  wire [13:0]  nodeIn_ar_bits_id = auto_in_ar_bits_id;
  wire [47:0]  nodeIn_ar_bits_addr = auto_in_ar_bits_addr;
  wire [7:0]   nodeIn_ar_bits_len = auto_in_ar_bits_len;
  wire [2:0]   nodeIn_ar_bits_size = auto_in_ar_bits_size;
  wire [1:0]   nodeIn_ar_bits_burst = auto_in_ar_bits_burst;
  wire         nodeIn_ar_bits_lock = auto_in_ar_bits_lock;
  wire [3:0]   nodeIn_ar_bits_cache = auto_in_ar_bits_cache;
  wire [2:0]   nodeIn_ar_bits_prot = auto_in_ar_bits_prot;
  wire [3:0]   nodeIn_ar_bits_qos = auto_in_ar_bits_qos;
  wire         nodeIn_r_ready = auto_in_r_ready;
  wire [1:0]   nodeIn_b_bits_resp = 2'h0;
  wire [1:0]   nodeIn_r_bits_resp = 2'h0;
  wire         nodeIn_ar_ready = ~(|state);
  wire         _rdata_T_106 = nodeIn_ar_ready & nodeIn_ar_valid;
  wire         nodeIn_aw_ready;
  wire         _nodeIn_b_bits_user_T = nodeIn_aw_ready & nodeIn_aw_valid;
  wire         nodeIn_w_ready;
  wire         _wen_T = nodeIn_w_ready & nodeIn_w_valid;
  wire         nodeIn_r_valid;
  wire         _rdata_T_107 = nodeIn_r_ready & nodeIn_r_valid;
  reg  [7:0]   readBeatCnt;
  reg  [7:0]   len_hold_data;
  reg  [47:0]  raddr_hold_data;
  wire         nodeIn_r_bits_last =
    readBeatCnt == (_rdata_T_106 ? nodeIn_ar_bits_len : len_hold_data);
  `ifndef SYNTHESIS
    wire _GEN = _rdata_T_106 & ~reset;
    always @(posedge clock) begin
      if (_nodeIn_b_bits_user_T & ~reset & nodeIn_aw_bits_burst != 2'h1) begin
      end
      if (_GEN & nodeIn_ar_bits_burst != 2'h1) begin
      end
      if (_GEN
          & ~(nodeIn_ar_bits_len == 8'h0 | nodeIn_ar_bits_len == 8'h1
              | nodeIn_ar_bits_len == 8'h3 | nodeIn_ar_bits_len == 8'h7
              | nodeIn_ar_bits_len == 8'hF)) begin
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  assign nodeIn_r_valid = state == 2'h1;
  reg  [7:0]   writeBeatCnt;
  reg  [47:0]  waddr_hold_data;
  assign nodeIn_aw_ready = ~(|state) & ~nodeIn_ar_valid;
  assign nodeIn_w_ready = state == 2'h2;
  wire         nodeIn_b_valid = &state;
  reg  [13:0]  nodeIn_b_bits_id_r;
  wire [13:0]  nodeIn_b_bits_id = nodeIn_b_bits_id_r;
  reg  [13:0]  nodeIn_r_bits_id_r;
  wire [13:0]  nodeIn_r_bits_id = nodeIn_r_bits_id_r;
  wire [42:0]  _wIdx_T =
    43'((_nodeIn_b_bits_user_T ? nodeIn_aw_bits_addr[42:0] : waddr_hold_data[42:0])
        - 43'h80000000);
  wire [37:0]  _wIdx_T_4 = 38'(_wIdx_T[42:5] + {30'h0, writeBeatCnt});
  wire [42:0]  _rIdx_T =
    43'((_rdata_T_106 ? nodeIn_ar_bits_addr[42:0] : raddr_hold_data[42:0])
        - 43'h80000000);
  wire [37:0]  _rIdx_T_4 = 38'(_rIdx_T[42:5] + {30'h0, readBeatCnt});
  wire         _rdata_T_108 = _rdata_T_106 | _rdata_T_107;
  reg          rdata_REG;
  reg          rdata_REG_1;
  reg  [63:0]  rdata_r_0;
  reg  [63:0]  rdata_r_1;
  reg  [63:0]  rdata_r_2;
  reg  [63:0]  rdata_r_3;
  wire [255:0] nodeIn_r_bits_data =
    {rdata_REG ? _rdata_mem_read_data_3 : rdata_r_3,
     rdata_REG ? _rdata_mem_read_data_2 : rdata_r_2,
     rdata_REG ? _rdata_mem_read_data_1 : rdata_r_1,
     rdata_REG ? _rdata_mem_read_data_0 : rdata_r_0};
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
      readBeatCnt <= 8'h0;
      writeBeatCnt <= 8'h0;
    end
    else begin
      if (|state) begin
        if (state == 2'h1) begin
          if (_rdata_T_107 & nodeIn_r_bits_last)
            state <= 2'h0;
        end
        else if (state == 2'h2) begin
          if (_wen_T & nodeIn_w_bits_last)
            state <= 2'h3;
        end
        else if ((&state) & nodeIn_b_ready & nodeIn_b_valid)
          state <= 2'h0;
      end
      else if (_nodeIn_b_bits_user_T)
        state <= 2'h2;
      else if (_rdata_T_106)
        state <= 2'h1;
      if (_rdata_T_107) begin
        if (nodeIn_r_bits_last)
          readBeatCnt <= 8'h0;
        else
          readBeatCnt <= 8'(readBeatCnt + 8'h1);
      end
      if (_wen_T) begin
        if (nodeIn_w_bits_last)
          writeBeatCnt <= 8'h0;
        else
          writeBeatCnt <= 8'(writeBeatCnt + 8'h1);
      end
    end
    if (_rdata_T_106) begin
      len_hold_data <= nodeIn_ar_bits_len;
      raddr_hold_data <= nodeIn_ar_bits_addr;
      nodeIn_r_bits_id_r <= nodeIn_ar_bits_id;
    end
    if (_nodeIn_b_bits_user_T) begin
      waddr_hold_data <= nodeIn_aw_bits_addr;
      nodeIn_b_bits_id_r <= nodeIn_aw_bits_id;
    end
    rdata_REG <= _rdata_T_108;
    rdata_REG_1 <= _rdata_T_108;
    if (rdata_REG_1) begin
      rdata_r_0 <= _rdata_mem_read_data_0;
      rdata_r_1 <= _rdata_mem_read_data_1;
      rdata_r_2 <= _rdata_mem_read_data_2;
      rdata_r_3 <= _rdata_mem_read_data_3;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:12];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hD; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        state = _RANDOM[4'h0][1:0];
        readBeatCnt = _RANDOM[4'h0][9:2];
        len_hold_data = _RANDOM[4'h0][17:10];
        raddr_hold_data = {_RANDOM[4'h0][31:18], _RANDOM[4'h1], _RANDOM[4'h2][1:0]};
        writeBeatCnt = _RANDOM[4'h2][9:2];
        waddr_hold_data = {_RANDOM[4'h2][31:10], _RANDOM[4'h3][25:0]};
        nodeIn_b_bits_id_r = {_RANDOM[4'h3][31:26], _RANDOM[4'h4][7:0]};
        nodeIn_r_bits_id_r = _RANDOM[4'h4][21:8];
        rdata_REG = _RANDOM[4'h4][22];
        rdata_REG_1 = _RANDOM[4'h4][23];
        rdata_r_0 = {_RANDOM[4'h4][31:24], _RANDOM[4'h5], _RANDOM[4'h6][23:0]};
        rdata_r_1 = {_RANDOM[4'h6][31:24], _RANDOM[4'h7], _RANDOM[4'h8][23:0]};
        rdata_r_2 = {_RANDOM[4'h8][31:24], _RANDOM[4'h9], _RANDOM[4'hA][23:0]};
        rdata_r_3 = {_RANDOM[4'hA][31:24], _RANDOM[4'hB], _RANDOM[4'hC][23:0]};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DifftestMem1P rdata_mem (
    .clock        (clock),
    .reset        (reset),
    .read_valid   (_rdata_T_108),
    .read_index
      ({26'h0, _rdata_T_107 & ~nodeIn_r_bits_last ? 38'(_rIdx_T_4 + 38'h1) : _rIdx_T_4}),
    .read_data_0  (_rdata_mem_read_data_0),
    .read_data_1  (_rdata_mem_read_data_1),
    .read_data_2  (_rdata_mem_read_data_2),
    .read_data_3  (_rdata_mem_read_data_3),
    .write_valid  (_wen_T & _wIdx_T_4[37:26] != 12'hFFF),
    .write_index  ({26'h0, _wIdx_T_4}),
    .write_data_0 (nodeIn_w_bits_data[63:0]),
    .write_data_1 (nodeIn_w_bits_data[127:64]),
    .write_data_2 (nodeIn_w_bits_data[191:128]),
    .write_data_3 (nodeIn_w_bits_data[255:192]),
    .write_mask_0
      ({{8{nodeIn_w_bits_strb[7]}},
        {8{nodeIn_w_bits_strb[6]}},
        {8{nodeIn_w_bits_strb[5]}},
        {8{nodeIn_w_bits_strb[4]}},
        {8{nodeIn_w_bits_strb[3]}},
        {8{nodeIn_w_bits_strb[2]}},
        {8{nodeIn_w_bits_strb[1]}},
        {8{nodeIn_w_bits_strb[0]}}}),
    .write_mask_1
      ({{8{nodeIn_w_bits_strb[15]}},
        {8{nodeIn_w_bits_strb[14]}},
        {8{nodeIn_w_bits_strb[13]}},
        {8{nodeIn_w_bits_strb[12]}},
        {8{nodeIn_w_bits_strb[11]}},
        {8{nodeIn_w_bits_strb[10]}},
        {8{nodeIn_w_bits_strb[9]}},
        {8{nodeIn_w_bits_strb[8]}}}),
    .write_mask_2
      ({{8{nodeIn_w_bits_strb[23]}},
        {8{nodeIn_w_bits_strb[22]}},
        {8{nodeIn_w_bits_strb[21]}},
        {8{nodeIn_w_bits_strb[20]}},
        {8{nodeIn_w_bits_strb[19]}},
        {8{nodeIn_w_bits_strb[18]}},
        {8{nodeIn_w_bits_strb[17]}},
        {8{nodeIn_w_bits_strb[16]}}}),
    .write_mask_3
      ({{8{nodeIn_w_bits_strb[31]}},
        {8{nodeIn_w_bits_strb[30]}},
        {8{nodeIn_w_bits_strb[29]}},
        {8{nodeIn_w_bits_strb[28]}},
        {8{nodeIn_w_bits_strb[27]}},
        {8{nodeIn_w_bits_strb[26]}},
        {8{nodeIn_w_bits_strb[25]}},
        {8{nodeIn_w_bits_strb[24]}}})
  );
  
  assign auto_in_aw_ready = nodeIn_aw_ready;
  assign auto_in_w_ready = nodeIn_w_ready;
  assign auto_in_b_valid = nodeIn_b_valid;
  assign auto_in_b_bits_id = nodeIn_b_bits_id;
  assign auto_in_b_bits_resp = nodeIn_b_bits_resp;
  assign auto_in_ar_ready = nodeIn_ar_ready;
  assign auto_in_r_valid = nodeIn_r_valid;
  assign auto_in_r_bits_id = nodeIn_r_bits_id;
  assign auto_in_r_bits_data = nodeIn_r_bits_data;
  assign auto_in_r_bits_resp = nodeIn_r_bits_resp;
  assign auto_in_r_bits_last = nodeIn_r_bits_last;
endmodule

