// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DelayReg_8(
  input         clock,
  input         reset,
  input  [63:0] i_value_0,
  input  [63:0] i_value_1,
  input  [63:0] i_value_2,
  input  [63:0] i_value_3,
  input  [63:0] i_value_4,
  input  [63:0] i_value_5,
  input  [63:0] i_value_6,
  input  [63:0] i_value_7,
  input  [63:0] i_value_8,
  input  [63:0] i_value_9,
  input  [63:0] i_value_10,
  input  [63:0] i_value_11,
  input  [63:0] i_value_12,
  input  [63:0] i_value_13,
  input  [63:0] i_value_14,
  input  [63:0] i_value_15,
  input  [63:0] i_value_16,
  input  [63:0] i_value_17,
  input  [63:0] i_value_18,
  input  [63:0] i_value_19,
  input  [63:0] i_value_20,
  input  [63:0] i_value_21,
  input  [63:0] i_value_22,
  input  [63:0] i_value_23,
  input  [63:0] i_value_24,
  input  [63:0] i_value_25,
  input  [63:0] i_value_26,
  input  [63:0] i_value_27,
  input  [63:0] i_value_28,
  input  [63:0] i_value_29,
  input  [63:0] i_value_30,
  input  [63:0] i_value_31,
  input  [7:0]  i_coreid,
  output [63:0] o_value_0,
  output [63:0] o_value_1,
  output [63:0] o_value_2,
  output [63:0] o_value_3,
  output [63:0] o_value_4,
  output [63:0] o_value_5,
  output [63:0] o_value_6,
  output [63:0] o_value_7,
  output [63:0] o_value_8,
  output [63:0] o_value_9,
  output [63:0] o_value_10,
  output [63:0] o_value_11,
  output [63:0] o_value_12,
  output [63:0] o_value_13,
  output [63:0] o_value_14,
  output [63:0] o_value_15,
  output [63:0] o_value_16,
  output [63:0] o_value_17,
  output [63:0] o_value_18,
  output [63:0] o_value_19,
  output [63:0] o_value_20,
  output [63:0] o_value_21,
  output [63:0] o_value_22,
  output [63:0] o_value_23,
  output [63:0] o_value_24,
  output [63:0] o_value_25,
  output [63:0] o_value_26,
  output [63:0] o_value_27,
  output [63:0] o_value_28,
  output [63:0] o_value_29,
  output [63:0] o_value_30,
  output [63:0] o_value_31,
  output [7:0]  o_coreid
);

  reg [63:0] REG_value_0;
  reg [63:0] REG_value_1;
  reg [63:0] REG_value_2;
  reg [63:0] REG_value_3;
  reg [63:0] REG_value_4;
  reg [63:0] REG_value_5;
  reg [63:0] REG_value_6;
  reg [63:0] REG_value_7;
  reg [63:0] REG_value_8;
  reg [63:0] REG_value_9;
  reg [63:0] REG_value_10;
  reg [63:0] REG_value_11;
  reg [63:0] REG_value_12;
  reg [63:0] REG_value_13;
  reg [63:0] REG_value_14;
  reg [63:0] REG_value_15;
  reg [63:0] REG_value_16;
  reg [63:0] REG_value_17;
  reg [63:0] REG_value_18;
  reg [63:0] REG_value_19;
  reg [63:0] REG_value_20;
  reg [63:0] REG_value_21;
  reg [63:0] REG_value_22;
  reg [63:0] REG_value_23;
  reg [63:0] REG_value_24;
  reg [63:0] REG_value_25;
  reg [63:0] REG_value_26;
  reg [63:0] REG_value_27;
  reg [63:0] REG_value_28;
  reg [63:0] REG_value_29;
  reg [63:0] REG_value_30;
  reg [63:0] REG_value_31;
  reg [7:0]  REG_coreid;
  reg [63:0] REG_1_value_0;
  reg [63:0] REG_1_value_1;
  reg [63:0] REG_1_value_2;
  reg [63:0] REG_1_value_3;
  reg [63:0] REG_1_value_4;
  reg [63:0] REG_1_value_5;
  reg [63:0] REG_1_value_6;
  reg [63:0] REG_1_value_7;
  reg [63:0] REG_1_value_8;
  reg [63:0] REG_1_value_9;
  reg [63:0] REG_1_value_10;
  reg [63:0] REG_1_value_11;
  reg [63:0] REG_1_value_12;
  reg [63:0] REG_1_value_13;
  reg [63:0] REG_1_value_14;
  reg [63:0] REG_1_value_15;
  reg [63:0] REG_1_value_16;
  reg [63:0] REG_1_value_17;
  reg [63:0] REG_1_value_18;
  reg [63:0] REG_1_value_19;
  reg [63:0] REG_1_value_20;
  reg [63:0] REG_1_value_21;
  reg [63:0] REG_1_value_22;
  reg [63:0] REG_1_value_23;
  reg [63:0] REG_1_value_24;
  reg [63:0] REG_1_value_25;
  reg [63:0] REG_1_value_26;
  reg [63:0] REG_1_value_27;
  reg [63:0] REG_1_value_28;
  reg [63:0] REG_1_value_29;
  reg [63:0] REG_1_value_30;
  reg [63:0] REG_1_value_31;
  reg [7:0]  REG_1_coreid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      REG_value_0 <= 64'h0;
      REG_value_1 <= 64'h0;
      REG_value_2 <= 64'h0;
      REG_value_3 <= 64'h0;
      REG_value_4 <= 64'h0;
      REG_value_5 <= 64'h0;
      REG_value_6 <= 64'h0;
      REG_value_7 <= 64'h0;
      REG_value_8 <= 64'h0;
      REG_value_9 <= 64'h0;
      REG_value_10 <= 64'h0;
      REG_value_11 <= 64'h0;
      REG_value_12 <= 64'h0;
      REG_value_13 <= 64'h0;
      REG_value_14 <= 64'h0;
      REG_value_15 <= 64'h0;
      REG_value_16 <= 64'h0;
      REG_value_17 <= 64'h0;
      REG_value_18 <= 64'h0;
      REG_value_19 <= 64'h0;
      REG_value_20 <= 64'h0;
      REG_value_21 <= 64'h0;
      REG_value_22 <= 64'h0;
      REG_value_23 <= 64'h0;
      REG_value_24 <= 64'h0;
      REG_value_25 <= 64'h0;
      REG_value_26 <= 64'h0;
      REG_value_27 <= 64'h0;
      REG_value_28 <= 64'h0;
      REG_value_29 <= 64'h0;
      REG_value_30 <= 64'h0;
      REG_value_31 <= 64'h0;
      REG_coreid <= 8'h0;
      REG_1_value_0 <= 64'h0;
      REG_1_value_1 <= 64'h0;
      REG_1_value_2 <= 64'h0;
      REG_1_value_3 <= 64'h0;
      REG_1_value_4 <= 64'h0;
      REG_1_value_5 <= 64'h0;
      REG_1_value_6 <= 64'h0;
      REG_1_value_7 <= 64'h0;
      REG_1_value_8 <= 64'h0;
      REG_1_value_9 <= 64'h0;
      REG_1_value_10 <= 64'h0;
      REG_1_value_11 <= 64'h0;
      REG_1_value_12 <= 64'h0;
      REG_1_value_13 <= 64'h0;
      REG_1_value_14 <= 64'h0;
      REG_1_value_15 <= 64'h0;
      REG_1_value_16 <= 64'h0;
      REG_1_value_17 <= 64'h0;
      REG_1_value_18 <= 64'h0;
      REG_1_value_19 <= 64'h0;
      REG_1_value_20 <= 64'h0;
      REG_1_value_21 <= 64'h0;
      REG_1_value_22 <= 64'h0;
      REG_1_value_23 <= 64'h0;
      REG_1_value_24 <= 64'h0;
      REG_1_value_25 <= 64'h0;
      REG_1_value_26 <= 64'h0;
      REG_1_value_27 <= 64'h0;
      REG_1_value_28 <= 64'h0;
      REG_1_value_29 <= 64'h0;
      REG_1_value_30 <= 64'h0;
      REG_1_value_31 <= 64'h0;
      REG_1_coreid <= 8'h0;
    end
    else begin
      REG_value_0 <= i_value_0;
      REG_value_1 <= i_value_1;
      REG_value_2 <= i_value_2;
      REG_value_3 <= i_value_3;
      REG_value_4 <= i_value_4;
      REG_value_5 <= i_value_5;
      REG_value_6 <= i_value_6;
      REG_value_7 <= i_value_7;
      REG_value_8 <= i_value_8;
      REG_value_9 <= i_value_9;
      REG_value_10 <= i_value_10;
      REG_value_11 <= i_value_11;
      REG_value_12 <= i_value_12;
      REG_value_13 <= i_value_13;
      REG_value_14 <= i_value_14;
      REG_value_15 <= i_value_15;
      REG_value_16 <= i_value_16;
      REG_value_17 <= i_value_17;
      REG_value_18 <= i_value_18;
      REG_value_19 <= i_value_19;
      REG_value_20 <= i_value_20;
      REG_value_21 <= i_value_21;
      REG_value_22 <= i_value_22;
      REG_value_23 <= i_value_23;
      REG_value_24 <= i_value_24;
      REG_value_25 <= i_value_25;
      REG_value_26 <= i_value_26;
      REG_value_27 <= i_value_27;
      REG_value_28 <= i_value_28;
      REG_value_29 <= i_value_29;
      REG_value_30 <= i_value_30;
      REG_value_31 <= i_value_31;
      REG_coreid <= i_coreid;
      REG_1_value_0 <= REG_value_0;
      REG_1_value_1 <= REG_value_1;
      REG_1_value_2 <= REG_value_2;
      REG_1_value_3 <= REG_value_3;
      REG_1_value_4 <= REG_value_4;
      REG_1_value_5 <= REG_value_5;
      REG_1_value_6 <= REG_value_6;
      REG_1_value_7 <= REG_value_7;
      REG_1_value_8 <= REG_value_8;
      REG_1_value_9 <= REG_value_9;
      REG_1_value_10 <= REG_value_10;
      REG_1_value_11 <= REG_value_11;
      REG_1_value_12 <= REG_value_12;
      REG_1_value_13 <= REG_value_13;
      REG_1_value_14 <= REG_value_14;
      REG_1_value_15 <= REG_value_15;
      REG_1_value_16 <= REG_value_16;
      REG_1_value_17 <= REG_value_17;
      REG_1_value_18 <= REG_value_18;
      REG_1_value_19 <= REG_value_19;
      REG_1_value_20 <= REG_value_20;
      REG_1_value_21 <= REG_value_21;
      REG_1_value_22 <= REG_value_22;
      REG_1_value_23 <= REG_value_23;
      REG_1_value_24 <= REG_value_24;
      REG_1_value_25 <= REG_value_25;
      REG_1_value_26 <= REG_value_26;
      REG_1_value_27 <= REG_value_27;
      REG_1_value_28 <= REG_value_28;
      REG_1_value_29 <= REG_value_29;
      REG_1_value_30 <= REG_value_30;
      REG_1_value_31 <= REG_value_31;
      REG_1_coreid <= REG_coreid;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:128];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [7:0] i = 8'h0; i < 8'h81; i += 8'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        REG_value_0 = {_RANDOM[8'h0], _RANDOM[8'h1]};
        REG_value_1 = {_RANDOM[8'h2], _RANDOM[8'h3]};
        REG_value_2 = {_RANDOM[8'h4], _RANDOM[8'h5]};
        REG_value_3 = {_RANDOM[8'h6], _RANDOM[8'h7]};
        REG_value_4 = {_RANDOM[8'h8], _RANDOM[8'h9]};
        REG_value_5 = {_RANDOM[8'hA], _RANDOM[8'hB]};
        REG_value_6 = {_RANDOM[8'hC], _RANDOM[8'hD]};
        REG_value_7 = {_RANDOM[8'hE], _RANDOM[8'hF]};
        REG_value_8 = {_RANDOM[8'h10], _RANDOM[8'h11]};
        REG_value_9 = {_RANDOM[8'h12], _RANDOM[8'h13]};
        REG_value_10 = {_RANDOM[8'h14], _RANDOM[8'h15]};
        REG_value_11 = {_RANDOM[8'h16], _RANDOM[8'h17]};
        REG_value_12 = {_RANDOM[8'h18], _RANDOM[8'h19]};
        REG_value_13 = {_RANDOM[8'h1A], _RANDOM[8'h1B]};
        REG_value_14 = {_RANDOM[8'h1C], _RANDOM[8'h1D]};
        REG_value_15 = {_RANDOM[8'h1E], _RANDOM[8'h1F]};
        REG_value_16 = {_RANDOM[8'h20], _RANDOM[8'h21]};
        REG_value_17 = {_RANDOM[8'h22], _RANDOM[8'h23]};
        REG_value_18 = {_RANDOM[8'h24], _RANDOM[8'h25]};
        REG_value_19 = {_RANDOM[8'h26], _RANDOM[8'h27]};
        REG_value_20 = {_RANDOM[8'h28], _RANDOM[8'h29]};
        REG_value_21 = {_RANDOM[8'h2A], _RANDOM[8'h2B]};
        REG_value_22 = {_RANDOM[8'h2C], _RANDOM[8'h2D]};
        REG_value_23 = {_RANDOM[8'h2E], _RANDOM[8'h2F]};
        REG_value_24 = {_RANDOM[8'h30], _RANDOM[8'h31]};
        REG_value_25 = {_RANDOM[8'h32], _RANDOM[8'h33]};
        REG_value_26 = {_RANDOM[8'h34], _RANDOM[8'h35]};
        REG_value_27 = {_RANDOM[8'h36], _RANDOM[8'h37]};
        REG_value_28 = {_RANDOM[8'h38], _RANDOM[8'h39]};
        REG_value_29 = {_RANDOM[8'h3A], _RANDOM[8'h3B]};
        REG_value_30 = {_RANDOM[8'h3C], _RANDOM[8'h3D]};
        REG_value_31 = {_RANDOM[8'h3E], _RANDOM[8'h3F]};
        REG_coreid = _RANDOM[8'h40][7:0];
        REG_1_value_0 = {_RANDOM[8'h40][31:8], _RANDOM[8'h41], _RANDOM[8'h42][7:0]};
        REG_1_value_1 = {_RANDOM[8'h42][31:8], _RANDOM[8'h43], _RANDOM[8'h44][7:0]};
        REG_1_value_2 = {_RANDOM[8'h44][31:8], _RANDOM[8'h45], _RANDOM[8'h46][7:0]};
        REG_1_value_3 = {_RANDOM[8'h46][31:8], _RANDOM[8'h47], _RANDOM[8'h48][7:0]};
        REG_1_value_4 = {_RANDOM[8'h48][31:8], _RANDOM[8'h49], _RANDOM[8'h4A][7:0]};
        REG_1_value_5 = {_RANDOM[8'h4A][31:8], _RANDOM[8'h4B], _RANDOM[8'h4C][7:0]};
        REG_1_value_6 = {_RANDOM[8'h4C][31:8], _RANDOM[8'h4D], _RANDOM[8'h4E][7:0]};
        REG_1_value_7 = {_RANDOM[8'h4E][31:8], _RANDOM[8'h4F], _RANDOM[8'h50][7:0]};
        REG_1_value_8 = {_RANDOM[8'h50][31:8], _RANDOM[8'h51], _RANDOM[8'h52][7:0]};
        REG_1_value_9 = {_RANDOM[8'h52][31:8], _RANDOM[8'h53], _RANDOM[8'h54][7:0]};
        REG_1_value_10 = {_RANDOM[8'h54][31:8], _RANDOM[8'h55], _RANDOM[8'h56][7:0]};
        REG_1_value_11 = {_RANDOM[8'h56][31:8], _RANDOM[8'h57], _RANDOM[8'h58][7:0]};
        REG_1_value_12 = {_RANDOM[8'h58][31:8], _RANDOM[8'h59], _RANDOM[8'h5A][7:0]};
        REG_1_value_13 = {_RANDOM[8'h5A][31:8], _RANDOM[8'h5B], _RANDOM[8'h5C][7:0]};
        REG_1_value_14 = {_RANDOM[8'h5C][31:8], _RANDOM[8'h5D], _RANDOM[8'h5E][7:0]};
        REG_1_value_15 = {_RANDOM[8'h5E][31:8], _RANDOM[8'h5F], _RANDOM[8'h60][7:0]};
        REG_1_value_16 = {_RANDOM[8'h60][31:8], _RANDOM[8'h61], _RANDOM[8'h62][7:0]};
        REG_1_value_17 = {_RANDOM[8'h62][31:8], _RANDOM[8'h63], _RANDOM[8'h64][7:0]};
        REG_1_value_18 = {_RANDOM[8'h64][31:8], _RANDOM[8'h65], _RANDOM[8'h66][7:0]};
        REG_1_value_19 = {_RANDOM[8'h66][31:8], _RANDOM[8'h67], _RANDOM[8'h68][7:0]};
        REG_1_value_20 = {_RANDOM[8'h68][31:8], _RANDOM[8'h69], _RANDOM[8'h6A][7:0]};
        REG_1_value_21 = {_RANDOM[8'h6A][31:8], _RANDOM[8'h6B], _RANDOM[8'h6C][7:0]};
        REG_1_value_22 = {_RANDOM[8'h6C][31:8], _RANDOM[8'h6D], _RANDOM[8'h6E][7:0]};
        REG_1_value_23 = {_RANDOM[8'h6E][31:8], _RANDOM[8'h6F], _RANDOM[8'h70][7:0]};
        REG_1_value_24 = {_RANDOM[8'h70][31:8], _RANDOM[8'h71], _RANDOM[8'h72][7:0]};
        REG_1_value_25 = {_RANDOM[8'h72][31:8], _RANDOM[8'h73], _RANDOM[8'h74][7:0]};
        REG_1_value_26 = {_RANDOM[8'h74][31:8], _RANDOM[8'h75], _RANDOM[8'h76][7:0]};
        REG_1_value_27 = {_RANDOM[8'h76][31:8], _RANDOM[8'h77], _RANDOM[8'h78][7:0]};
        REG_1_value_28 = {_RANDOM[8'h78][31:8], _RANDOM[8'h79], _RANDOM[8'h7A][7:0]};
        REG_1_value_29 = {_RANDOM[8'h7A][31:8], _RANDOM[8'h7B], _RANDOM[8'h7C][7:0]};
        REG_1_value_30 = {_RANDOM[8'h7C][31:8], _RANDOM[8'h7D], _RANDOM[8'h7E][7:0]};
        REG_1_value_31 = {_RANDOM[8'h7E][31:8], _RANDOM[8'h7F], _RANDOM[8'h80][7:0]};
        REG_1_coreid = _RANDOM[8'h80][15:8];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        REG_value_0 = 64'h0;
        REG_value_1 = 64'h0;
        REG_value_2 = 64'h0;
        REG_value_3 = 64'h0;
        REG_value_4 = 64'h0;
        REG_value_5 = 64'h0;
        REG_value_6 = 64'h0;
        REG_value_7 = 64'h0;
        REG_value_8 = 64'h0;
        REG_value_9 = 64'h0;
        REG_value_10 = 64'h0;
        REG_value_11 = 64'h0;
        REG_value_12 = 64'h0;
        REG_value_13 = 64'h0;
        REG_value_14 = 64'h0;
        REG_value_15 = 64'h0;
        REG_value_16 = 64'h0;
        REG_value_17 = 64'h0;
        REG_value_18 = 64'h0;
        REG_value_19 = 64'h0;
        REG_value_20 = 64'h0;
        REG_value_21 = 64'h0;
        REG_value_22 = 64'h0;
        REG_value_23 = 64'h0;
        REG_value_24 = 64'h0;
        REG_value_25 = 64'h0;
        REG_value_26 = 64'h0;
        REG_value_27 = 64'h0;
        REG_value_28 = 64'h0;
        REG_value_29 = 64'h0;
        REG_value_30 = 64'h0;
        REG_value_31 = 64'h0;
        REG_coreid = 8'h0;
        REG_1_value_0 = 64'h0;
        REG_1_value_1 = 64'h0;
        REG_1_value_2 = 64'h0;
        REG_1_value_3 = 64'h0;
        REG_1_value_4 = 64'h0;
        REG_1_value_5 = 64'h0;
        REG_1_value_6 = 64'h0;
        REG_1_value_7 = 64'h0;
        REG_1_value_8 = 64'h0;
        REG_1_value_9 = 64'h0;
        REG_1_value_10 = 64'h0;
        REG_1_value_11 = 64'h0;
        REG_1_value_12 = 64'h0;
        REG_1_value_13 = 64'h0;
        REG_1_value_14 = 64'h0;
        REG_1_value_15 = 64'h0;
        REG_1_value_16 = 64'h0;
        REG_1_value_17 = 64'h0;
        REG_1_value_18 = 64'h0;
        REG_1_value_19 = 64'h0;
        REG_1_value_20 = 64'h0;
        REG_1_value_21 = 64'h0;
        REG_1_value_22 = 64'h0;
        REG_1_value_23 = 64'h0;
        REG_1_value_24 = 64'h0;
        REG_1_value_25 = 64'h0;
        REG_1_value_26 = 64'h0;
        REG_1_value_27 = 64'h0;
        REG_1_value_28 = 64'h0;
        REG_1_value_29 = 64'h0;
        REG_1_value_30 = 64'h0;
        REG_1_value_31 = 64'h0;
        REG_1_coreid = 8'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign o_value_0 = REG_1_value_0;
  assign o_value_1 = REG_1_value_1;
  assign o_value_2 = REG_1_value_2;
  assign o_value_3 = REG_1_value_3;
  assign o_value_4 = REG_1_value_4;
  assign o_value_5 = REG_1_value_5;
  assign o_value_6 = REG_1_value_6;
  assign o_value_7 = REG_1_value_7;
  assign o_value_8 = REG_1_value_8;
  assign o_value_9 = REG_1_value_9;
  assign o_value_10 = REG_1_value_10;
  assign o_value_11 = REG_1_value_11;
  assign o_value_12 = REG_1_value_12;
  assign o_value_13 = REG_1_value_13;
  assign o_value_14 = REG_1_value_14;
  assign o_value_15 = REG_1_value_15;
  assign o_value_16 = REG_1_value_16;
  assign o_value_17 = REG_1_value_17;
  assign o_value_18 = REG_1_value_18;
  assign o_value_19 = REG_1_value_19;
  assign o_value_20 = REG_1_value_20;
  assign o_value_21 = REG_1_value_21;
  assign o_value_22 = REG_1_value_22;
  assign o_value_23 = REG_1_value_23;
  assign o_value_24 = REG_1_value_24;
  assign o_value_25 = REG_1_value_25;
  assign o_value_26 = REG_1_value_26;
  assign o_value_27 = REG_1_value_27;
  assign o_value_28 = REG_1_value_28;
  assign o_value_29 = REG_1_value_29;
  assign o_value_30 = REG_1_value_30;
  assign o_value_31 = REG_1_value_31;
  assign o_coreid = REG_1_coreid;
endmodule

