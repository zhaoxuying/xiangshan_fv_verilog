// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SyncDataModuleTemplate__8entry_1(
  input        clock,
  input        reset,
  input        io_ren_0,
  input        io_ren_1,
  input  [2:0] io_raddr_0,
  input  [2:0] io_raddr_1,
  output       io_rdata_0_isCall,
  output       io_rdata_0_isRet,
  output       io_rdata_0_isJalr,
  output [3:0] io_rdata_0_brSlots_0_offset,
  output       io_rdata_0_brSlots_0_valid,
  output [3:0] io_rdata_0_tailSlot_offset,
  output       io_rdata_0_tailSlot_sharing,
  output       io_rdata_0_tailSlot_valid,
  output [3:0] io_rdata_1_brSlots_0_offset,
  output       io_rdata_1_brSlots_0_valid,
  output [3:0] io_rdata_1_tailSlot_offset,
  output       io_rdata_1_tailSlot_sharing,
  output       io_rdata_1_tailSlot_valid,
  input        io_wen_0,
  input  [2:0] io_waddr_0,
  input        io_wdata_0_isCall,
  input        io_wdata_0_isRet,
  input        io_wdata_0_isJalr,
  input  [3:0] io_wdata_0_brSlots_0_offset,
  input        io_wdata_0_brSlots_0_valid,
  input  [3:0] io_wdata_0_tailSlot_offset,
  input        io_wdata_0_tailSlot_sharing,
  input        io_wdata_0_tailSlot_valid
);

  reg [2:0] raddr_dup_0;
  reg [2:0] raddr_dup_1;
  reg       wen_dup_last_REG;
  reg [2:0] waddr_dup_0;
  reg       r_isCall;
  reg       r_isRet;
  reg       r_isJalr;
  reg [3:0] r_brSlots_0_offset;
  reg       r_brSlots_0_valid;
  reg [3:0] r_tailSlot_offset;
  reg       r_tailSlot_sharing;
  reg       r_tailSlot_valid;
  always @(posedge clock) begin
    if (io_ren_0)
      raddr_dup_0 <= io_raddr_0;
    if (io_ren_1)
      raddr_dup_1 <= io_raddr_1;
    if (io_wen_0) begin
      waddr_dup_0 <= io_waddr_0;
      r_isCall <= io_wdata_0_isCall;
      r_isRet <= io_wdata_0_isRet;
      r_isJalr <= io_wdata_0_isJalr;
      r_brSlots_0_offset <= io_wdata_0_brSlots_0_offset;
      r_brSlots_0_valid <= io_wdata_0_brSlots_0_valid;
      r_tailSlot_offset <= io_wdata_0_tailSlot_offset;
      r_tailSlot_sharing <= io_wdata_0_tailSlot_sharing;
      r_tailSlot_valid <= io_wdata_0_tailSlot_valid;
    end
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      wen_dup_last_REG <= 1'h0;
    else
      wen_dup_last_REG <= io_wen_0;
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        raddr_dup_0 = _RANDOM[/*Zero width*/ 1'b0][2:0];
        raddr_dup_1 = _RANDOM[/*Zero width*/ 1'b0][5:3];
        wen_dup_last_REG = _RANDOM[/*Zero width*/ 1'b0][6];
        waddr_dup_0 = _RANDOM[/*Zero width*/ 1'b0][9:7];
        r_isCall = _RANDOM[/*Zero width*/ 1'b0][10];
        r_isRet = _RANDOM[/*Zero width*/ 1'b0][11];
        r_isJalr = _RANDOM[/*Zero width*/ 1'b0][12];
        r_brSlots_0_offset = _RANDOM[/*Zero width*/ 1'b0][16:13];
        r_brSlots_0_valid = _RANDOM[/*Zero width*/ 1'b0][18];
        r_tailSlot_offset = _RANDOM[/*Zero width*/ 1'b0][22:19];
        r_tailSlot_sharing = _RANDOM[/*Zero width*/ 1'b0][23];
        r_tailSlot_valid = _RANDOM[/*Zero width*/ 1'b0][24];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        wen_dup_last_REG = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DataModule__8entry_1 dataBanks_0 (
    .clock                       (clock),
    .io_raddr_0                  (raddr_dup_0),
    .io_raddr_1                  (raddr_dup_1),
    .io_rdata_0_isCall           (io_rdata_0_isCall),
    .io_rdata_0_isRet            (io_rdata_0_isRet),
    .io_rdata_0_isJalr           (io_rdata_0_isJalr),
    .io_rdata_0_brSlots_0_offset (io_rdata_0_brSlots_0_offset),
    .io_rdata_0_brSlots_0_valid  (io_rdata_0_brSlots_0_valid),
    .io_rdata_0_tailSlot_offset  (io_rdata_0_tailSlot_offset),
    .io_rdata_0_tailSlot_sharing (io_rdata_0_tailSlot_sharing),
    .io_rdata_0_tailSlot_valid   (io_rdata_0_tailSlot_valid),
    .io_rdata_1_brSlots_0_offset (io_rdata_1_brSlots_0_offset),
    .io_rdata_1_brSlots_0_valid  (io_rdata_1_brSlots_0_valid),
    .io_rdata_1_tailSlot_offset  (io_rdata_1_tailSlot_offset),
    .io_rdata_1_tailSlot_sharing (io_rdata_1_tailSlot_sharing),
    .io_rdata_1_tailSlot_valid   (io_rdata_1_tailSlot_valid),
    .io_wen_0                    (wen_dup_last_REG),
    .io_waddr_0                  (waddr_dup_0),
    .io_wdata_0_isCall           (r_isCall),
    .io_wdata_0_isRet            (r_isRet),
    .io_wdata_0_isJalr           (r_isJalr),
    .io_wdata_0_brSlots_0_offset (r_brSlots_0_offset),
    .io_wdata_0_brSlots_0_valid  (r_brSlots_0_valid),
    .io_wdata_0_tailSlot_offset  (r_tailSlot_offset),
    .io_wdata_0_tailSlot_sharing (r_tailSlot_sharing),
    .io_wdata_0_tailSlot_valid   (r_tailSlot_valid)
  );
endmodule

