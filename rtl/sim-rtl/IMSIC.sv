// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IMSIC(
  input         clock,
  input         reset,
  output        toCSR_rdata_valid,
  output [63:0] toCSR_rdata_bits,
  output        toCSR_illegal,
  output [6:0]  toCSR_pendings,
  output [31:0] toCSR_topeis_0,
  output [31:0] toCSR_topeis_1,
  output [31:0] toCSR_topeis_2,
  input         fromCSR_addr_valid,
  input  [11:0] fromCSR_addr_bits_addr,
  input         fromCSR_addr_bits_virt,
  input  [1:0]  fromCSR_addr_bits_priv,
  input  [5:0]  fromCSR_vgein,
  input         fromCSR_wdata_valid,
  input  [1:0]  fromCSR_wdata_bits_op,
  input  [63:0] fromCSR_wdata_bits_data,
  input         fromCSR_claims_0,
  input         fromCSR_claims_1,
  input         fromCSR_claims_2,
  input         msiio_vld_req,
  input  [10:0] msiio_data
);

  wire         _intFile_6_toCSR_rdata_valid;
  wire [63:0]  _intFile_6_toCSR_rdata_bits;
  wire         _intFile_6_toCSR_illegal;
  wire         _intFile_6_toCSR_pending;
  wire [7:0]   _intFile_6_toCSR_topei;
  wire         _intFile_5_toCSR_rdata_valid;
  wire [63:0]  _intFile_5_toCSR_rdata_bits;
  wire         _intFile_5_toCSR_illegal;
  wire         _intFile_5_toCSR_pending;
  wire [7:0]   _intFile_5_toCSR_topei;
  wire         _intFile_4_toCSR_rdata_valid;
  wire [63:0]  _intFile_4_toCSR_rdata_bits;
  wire         _intFile_4_toCSR_illegal;
  wire         _intFile_4_toCSR_pending;
  wire [7:0]   _intFile_4_toCSR_topei;
  wire         _intFile_3_toCSR_rdata_valid;
  wire [63:0]  _intFile_3_toCSR_rdata_bits;
  wire         _intFile_3_toCSR_illegal;
  wire         _intFile_3_toCSR_pending;
  wire [7:0]   _intFile_3_toCSR_topei;
  wire         _intFile_2_toCSR_rdata_valid;
  wire [63:0]  _intFile_2_toCSR_rdata_bits;
  wire         _intFile_2_toCSR_illegal;
  wire         _intFile_2_toCSR_pending;
  wire [7:0]   _intFile_2_toCSR_topei;
  wire         _intFile_1_toCSR_rdata_valid;
  wire [63:0]  _intFile_1_toCSR_rdata_bits;
  wire         _intFile_1_toCSR_illegal;
  wire         _intFile_1_toCSR_pending;
  wire [7:0]   _intFile_1_toCSR_topei;
  wire         _intFile_toCSR_rdata_valid;
  wire [63:0]  _intFile_toCSR_rdata_bits;
  wire         _intFile_toCSR_illegal;
  wire         _intFile_toCSR_pending;
  wire [7:0]   _intFile_toCSR_topei;
  wire [7:0]   _imsicGateWay_msi_data_o;
  wire [6:0]   _imsicGateWay_msi_valid_o;
  wire         _GEN = fromCSR_addr_bits_priv == 2'h1;
  wire [6:0]   _GEN_0 = {1'h0, fromCSR_vgein};
  wire         illegal_priv =
    fromCSR_addr_valid
    & (fromCSR_addr_bits_virt
         ? ~(_GEN & (|fromCSR_vgein) & _GEN_0 < 7'h6)
         : ~((&fromCSR_addr_bits_priv) | _GEN));
  wire [2:0]   pv = {fromCSR_addr_bits_priv, fromCSR_addr_bits_virt};
  wire [127:0] _intFilesSelOH_r_T_5 = 128'h1 << 7'(_GEN_0 + 7'h1);
  wire [6:0]   intFilesSelOH_r =
    fromCSR_addr_valid & ~illegal_priv
      ? (pv == 3'h6
           ? 7'h1
           : pv == 3'h2 ? 7'h2 : pv == 3'h3 ? _intFilesSelOH_r_T_5[6:0] : 7'h0)
      : 7'h0;
  wire [2:0]   pv_1 = {fromCSR_addr_bits_priv, fromCSR_addr_bits_virt};
  wire [127:0] _intFilesSelOH_w_T_5 = 128'h1 << 7'(_GEN_0 + 7'h1);
  wire [6:0]   intFilesSelOH_w =
    fromCSR_addr_valid & fromCSR_wdata_valid & (|fromCSR_wdata_bits_op) & ~illegal_priv
      ? (pv_1 == 3'h6
           ? 7'h1
           : pv_1 == 3'h2 ? 7'h2 : pv_1 == 3'h3 ? _intFilesSelOH_w_T_5[6:0] : 7'h0)
      : 7'h0;
  reg          intfile_rdata_d_valid;
  reg  [63:0]  intfile_rdata_d_bits;
  reg          intfile_rdata_d_1_valid;
  reg  [63:0]  intfile_rdata_d_1_bits;
  reg          intfile_rdata_d_2_valid;
  reg  [63:0]  intfile_rdata_d_2_bits;
  reg          intfile_rdata_d_3_valid;
  reg  [63:0]  intfile_rdata_d_3_bits;
  reg          intfile_rdata_d_4_valid;
  reg  [63:0]  intfile_rdata_d_4_bits;
  reg          intfile_rdata_d_5_valid;
  reg  [63:0]  intfile_rdata_d_5_bits;
  reg          intfile_rdata_d_6_valid;
  reg  [63:0]  intfile_rdata_d_6_bits;
  wire [2:0]   _toCSR_topeis_2_T = 3'(fromCSR_vgein[2:0] - 3'h1);
  wire [7:0]   _toCSR_topeis_2_T_12 =
    (_toCSR_topeis_2_T == 3'h0 ? _intFile_2_toCSR_topei : 8'h0)
    | (_toCSR_topeis_2_T == 3'h1 ? _intFile_3_toCSR_topei : 8'h0)
    | (_toCSR_topeis_2_T == 3'h2 ? _intFile_4_toCSR_topei : 8'h0)
    | (_toCSR_topeis_2_T == 3'h3 ? _intFile_5_toCSR_topei : 8'h0)
    | (_toCSR_topeis_2_T == 3'h4 ? _intFile_6_toCSR_topei : 8'h0);
  reg          toCSR_illegal_d;
  always @(posedge clock) begin
    intfile_rdata_d_valid <= _intFile_toCSR_rdata_valid;
    intfile_rdata_d_bits <= _intFile_toCSR_rdata_bits;
    intfile_rdata_d_1_valid <= _intFile_1_toCSR_rdata_valid;
    intfile_rdata_d_1_bits <= _intFile_1_toCSR_rdata_bits;
    intfile_rdata_d_2_valid <= _intFile_2_toCSR_rdata_valid;
    intfile_rdata_d_2_bits <= _intFile_2_toCSR_rdata_bits;
    intfile_rdata_d_3_valid <= _intFile_3_toCSR_rdata_valid;
    intfile_rdata_d_3_bits <= _intFile_3_toCSR_rdata_bits;
    intfile_rdata_d_4_valid <= _intFile_4_toCSR_rdata_valid;
    intfile_rdata_d_4_bits <= _intFile_4_toCSR_rdata_bits;
    intfile_rdata_d_5_valid <= _intFile_5_toCSR_rdata_valid;
    intfile_rdata_d_5_bits <= _intFile_5_toCSR_rdata_bits;
    intfile_rdata_d_6_valid <= _intFile_6_toCSR_rdata_valid;
    intfile_rdata_d_6_bits <= _intFile_6_toCSR_rdata_bits;
    toCSR_illegal_d <=
      (fromCSR_addr_valid | fromCSR_wdata_valid)
      & (_intFile_toCSR_illegal | _intFile_1_toCSR_illegal | _intFile_2_toCSR_illegal
         | _intFile_3_toCSR_illegal | _intFile_4_toCSR_illegal | _intFile_5_toCSR_illegal
         | _intFile_6_toCSR_illegal | fromCSR_wdata_valid & ~(|fromCSR_wdata_bits_op)
         | illegal_priv);
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:14];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hF; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        intfile_rdata_d_valid = _RANDOM[4'h0][0];
        intfile_rdata_d_bits = {_RANDOM[4'h0][31:1], _RANDOM[4'h1], _RANDOM[4'h2][0]};
        intfile_rdata_d_1_valid = _RANDOM[4'h2][1];
        intfile_rdata_d_1_bits = {_RANDOM[4'h2][31:2], _RANDOM[4'h3], _RANDOM[4'h4][1:0]};
        intfile_rdata_d_2_valid = _RANDOM[4'h4][2];
        intfile_rdata_d_2_bits = {_RANDOM[4'h4][31:3], _RANDOM[4'h5], _RANDOM[4'h6][2:0]};
        intfile_rdata_d_3_valid = _RANDOM[4'h6][3];
        intfile_rdata_d_3_bits = {_RANDOM[4'h6][31:4], _RANDOM[4'h7], _RANDOM[4'h8][3:0]};
        intfile_rdata_d_4_valid = _RANDOM[4'h8][4];
        intfile_rdata_d_4_bits = {_RANDOM[4'h8][31:5], _RANDOM[4'h9], _RANDOM[4'hA][4:0]};
        intfile_rdata_d_5_valid = _RANDOM[4'hA][5];
        intfile_rdata_d_5_bits = {_RANDOM[4'hA][31:6], _RANDOM[4'hB], _RANDOM[4'hC][5:0]};
        intfile_rdata_d_6_valid = _RANDOM[4'hC][6];
        intfile_rdata_d_6_bits = {_RANDOM[4'hC][31:7], _RANDOM[4'hD], _RANDOM[4'hE][6:0]};
        toCSR_illegal_d = _RANDOM[4'hE][7];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  IMSICGateWay imsicGateWay (
    .clock         (clock),
    .reset         (reset),
    .msiio_vld_req (msiio_vld_req),
    .msiio_data    (msiio_data),
    .msi_data_o    (_imsicGateWay_msi_data_o),
    .msi_valid_o   (_imsicGateWay_msi_valid_o)
  );
  IntFile intFile (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o[0]),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH_r[0]),
    .fromCSR_addr_bits       (fromCSR_addr_bits_addr),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH_w[0]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_0),
    .toCSR_rdata_valid       (_intFile_toCSR_rdata_valid),
    .toCSR_rdata_bits        (_intFile_toCSR_rdata_bits),
    .toCSR_illegal           (_intFile_toCSR_illegal),
    .toCSR_pending           (_intFile_toCSR_pending),
    .toCSR_topei             (_intFile_toCSR_topei),
    .illegal_io_illegal_priv (illegal_priv)
  );
  IntFile intFile_1 (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o[1]),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH_r[1]),
    .fromCSR_addr_bits       (fromCSR_addr_bits_addr),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH_w[1]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_1),
    .toCSR_rdata_valid       (_intFile_1_toCSR_rdata_valid),
    .toCSR_rdata_bits        (_intFile_1_toCSR_rdata_bits),
    .toCSR_illegal           (_intFile_1_toCSR_illegal),
    .toCSR_pending           (_intFile_1_toCSR_pending),
    .toCSR_topei             (_intFile_1_toCSR_topei),
    .illegal_io_illegal_priv (illegal_priv)
  );
  IntFile intFile_2 (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o[2]),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH_r[2]),
    .fromCSR_addr_bits       (fromCSR_addr_bits_addr),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH_w[2]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_2),
    .toCSR_rdata_valid       (_intFile_2_toCSR_rdata_valid),
    .toCSR_rdata_bits        (_intFile_2_toCSR_rdata_bits),
    .toCSR_illegal           (_intFile_2_toCSR_illegal),
    .toCSR_pending           (_intFile_2_toCSR_pending),
    .toCSR_topei             (_intFile_2_toCSR_topei),
    .illegal_io_illegal_priv (illegal_priv)
  );
  IntFile intFile_3 (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o[3]),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH_r[3]),
    .fromCSR_addr_bits       (fromCSR_addr_bits_addr),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH_w[3]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_2),
    .toCSR_rdata_valid       (_intFile_3_toCSR_rdata_valid),
    .toCSR_rdata_bits        (_intFile_3_toCSR_rdata_bits),
    .toCSR_illegal           (_intFile_3_toCSR_illegal),
    .toCSR_pending           (_intFile_3_toCSR_pending),
    .toCSR_topei             (_intFile_3_toCSR_topei),
    .illegal_io_illegal_priv (illegal_priv)
  );
  IntFile intFile_4 (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o[4]),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH_r[4]),
    .fromCSR_addr_bits       (fromCSR_addr_bits_addr),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH_w[4]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_2),
    .toCSR_rdata_valid       (_intFile_4_toCSR_rdata_valid),
    .toCSR_rdata_bits        (_intFile_4_toCSR_rdata_bits),
    .toCSR_illegal           (_intFile_4_toCSR_illegal),
    .toCSR_pending           (_intFile_4_toCSR_pending),
    .toCSR_topei             (_intFile_4_toCSR_topei),
    .illegal_io_illegal_priv (illegal_priv)
  );
  IntFile intFile_5 (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o[5]),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH_r[5]),
    .fromCSR_addr_bits       (fromCSR_addr_bits_addr),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH_w[5]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_2),
    .toCSR_rdata_valid       (_intFile_5_toCSR_rdata_valid),
    .toCSR_rdata_bits        (_intFile_5_toCSR_rdata_bits),
    .toCSR_illegal           (_intFile_5_toCSR_illegal),
    .toCSR_pending           (_intFile_5_toCSR_pending),
    .toCSR_topei             (_intFile_5_toCSR_topei),
    .illegal_io_illegal_priv (illegal_priv)
  );
  IntFile intFile_6 (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o[6]),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH_r[6]),
    .fromCSR_addr_bits       (fromCSR_addr_bits_addr),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH_w[6]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_2),
    .toCSR_rdata_valid       (_intFile_6_toCSR_rdata_valid),
    .toCSR_rdata_bits        (_intFile_6_toCSR_rdata_bits),
    .toCSR_illegal           (_intFile_6_toCSR_illegal),
    .toCSR_pending           (_intFile_6_toCSR_pending),
    .toCSR_topei             (_intFile_6_toCSR_topei),
    .illegal_io_illegal_priv (illegal_priv)
  );
  assign toCSR_rdata_valid =
    intfile_rdata_d_valid | intfile_rdata_d_1_valid | intfile_rdata_d_2_valid
    | intfile_rdata_d_3_valid | intfile_rdata_d_4_valid | intfile_rdata_d_5_valid
    | intfile_rdata_d_6_valid;
  assign toCSR_rdata_bits =
    intfile_rdata_d_bits | intfile_rdata_d_1_bits | intfile_rdata_d_2_bits
    | intfile_rdata_d_3_bits | intfile_rdata_d_4_bits | intfile_rdata_d_5_bits
    | intfile_rdata_d_6_bits;
  assign toCSR_illegal = toCSR_illegal_d;
  assign toCSR_pendings =
    {_intFile_6_toCSR_pending,
     _intFile_5_toCSR_pending,
     _intFile_4_toCSR_pending,
     _intFile_3_toCSR_pending,
     _intFile_2_toCSR_pending,
     _intFile_1_toCSR_pending,
     _intFile_toCSR_pending};
  assign toCSR_topeis_0 = {8'h0, _intFile_toCSR_topei, 8'h0, _intFile_toCSR_topei};
  assign toCSR_topeis_1 = {8'h0, _intFile_1_toCSR_topei, 8'h0, _intFile_1_toCSR_topei};
  assign toCSR_topeis_2 = {8'h0, _toCSR_topeis_2_T_12, 8'h0, _toCSR_topeis_2_T_12};
endmodule

