// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SRAMTemplate_59(
  input        clock,
  input        reset,
  input        io_r_req_valid,
  input  [7:0] io_r_req_bits_setIdx,
  output [1:0] io_r_resp_data_0,
  output [1:0] io_r_resp_data_1,
  output [1:0] io_r_resp_data_2,
  output [1:0] io_r_resp_data_3,
  output [1:0] io_r_resp_data_4,
  output [1:0] io_r_resp_data_5,
  output [1:0] io_r_resp_data_6,
  output [1:0] io_r_resp_data_7,
  input        io_w_req_valid,
  input  [7:0] io_w_req_bits_setIdx,
  input  [1:0] io_w_req_bits_data_0,
  input  [1:0] io_w_req_bits_data_1,
  input  [1:0] io_w_req_bits_data_2,
  input  [1:0] io_w_req_bits_data_3,
  input  [1:0] io_w_req_bits_data_4,
  input  [1:0] io_w_req_bits_data_5,
  input  [1:0] io_w_req_bits_data_6,
  input  [1:0] io_w_req_bits_data_7,
  input  [7:0] io_w_req_bits_waymask
);

  wire        conflictBufferCanWrite;
  reg         conflictBufferValid_REG;
  wire [15:0] _array_R0_data;
  wire        _wcg_out_clock;
  wire        _rcg_out_clock;
  wire        conflictValidS0 =
    io_r_req_valid & io_w_req_valid & (|io_w_req_bits_waymask)
    & io_r_req_bits_setIdx == io_w_req_bits_setIdx;
  reg  [7:0]  conflictRaddrS1;
  reg  [7:0]  conflictWaddrS1;
  reg  [7:0]  conflictWmaskS1;
  reg  [1:0]  conflictWdataS1_0;
  reg  [1:0]  conflictWdataS1_1;
  reg  [1:0]  conflictWdataS1_2;
  reg  [1:0]  conflictWdataS1_3;
  reg  [1:0]  conflictWdataS1_4;
  reg  [1:0]  conflictWdataS1_5;
  reg  [1:0]  conflictWdataS1_6;
  reg  [1:0]  conflictWdataS1_7;
  wire        conflictBufferWrite = conflictBufferValid_REG & conflictBufferCanWrite;
  wire        wen = io_w_req_valid & ~conflictValidS0 | conflictBufferWrite;
  wire        _conflictBufferCanWrite_T_1 =
    io_r_req_valid & io_r_req_bits_setIdx == conflictWaddrS1;
  assign conflictBufferCanWrite = ~_conflictBufferCanWrite_T_1;
  reg         bypassEnable_REG;
  wire        bypassEnable =
    conflictBufferValid_REG & bypassEnable_REG & conflictRaddrS1 == conflictWaddrS1;
  wire [1:0]  mem_rdata_0 =
    bypassEnable & conflictWmaskS1[0] ? conflictWdataS1_0 : _array_R0_data[1:0];
  wire [1:0]  mem_rdata_1 =
    bypassEnable & conflictWmaskS1[1] ? conflictWdataS1_1 : _array_R0_data[3:2];
  wire [1:0]  mem_rdata_2 =
    bypassEnable & conflictWmaskS1[2] ? conflictWdataS1_2 : _array_R0_data[5:4];
  wire [1:0]  mem_rdata_3 =
    bypassEnable & conflictWmaskS1[3] ? conflictWdataS1_3 : _array_R0_data[7:6];
  wire [1:0]  mem_rdata_4 =
    bypassEnable & conflictWmaskS1[4] ? conflictWdataS1_4 : _array_R0_data[9:8];
  wire [1:0]  mem_rdata_5 =
    bypassEnable & conflictWmaskS1[5] ? conflictWdataS1_5 : _array_R0_data[11:10];
  wire [1:0]  mem_rdata_6 =
    bypassEnable & conflictWmaskS1[6] ? conflictWdataS1_6 : _array_R0_data[13:12];
  wire [1:0]  mem_rdata_7 =
    bypassEnable & conflictWmaskS1[7] ? conflictWdataS1_7 : _array_R0_data[15:14];
  reg         rdata_last_REG;
  reg  [1:0]  rdata_hold_data_0;
  reg  [1:0]  rdata_hold_data_1;
  reg  [1:0]  rdata_hold_data_2;
  reg  [1:0]  rdata_hold_data_3;
  reg  [1:0]  rdata_hold_data_4;
  reg  [1:0]  rdata_hold_data_5;
  reg  [1:0]  rdata_hold_data_6;
  reg  [1:0]  rdata_hold_data_7;
  always @(posedge clock) begin
    if (io_r_req_valid)
      conflictRaddrS1 <= io_r_req_bits_setIdx;
    if (conflictValidS0 | conflictBufferWrite) begin
      conflictWaddrS1 <= io_w_req_bits_setIdx;
      conflictWmaskS1 <= io_w_req_bits_waymask;
      conflictWdataS1_0 <= io_w_req_bits_data_0;
      conflictWdataS1_1 <= io_w_req_bits_data_1;
      conflictWdataS1_2 <= io_w_req_bits_data_2;
      conflictWdataS1_3 <= io_w_req_bits_data_3;
      conflictWdataS1_4 <= io_w_req_bits_data_4;
      conflictWdataS1_5 <= io_w_req_bits_data_5;
      conflictWdataS1_6 <= io_w_req_bits_data_6;
      conflictWdataS1_7 <= io_w_req_bits_data_7;
    end
    bypassEnable_REG <= io_r_req_valid;
    if (rdata_last_REG) begin
      rdata_hold_data_0 <= mem_rdata_0;
      rdata_hold_data_1 <= mem_rdata_1;
      rdata_hold_data_2 <= mem_rdata_2;
      rdata_hold_data_3 <= mem_rdata_3;
      rdata_hold_data_4 <= mem_rdata_4;
      rdata_hold_data_5 <= mem_rdata_5;
      rdata_hold_data_6 <= mem_rdata_6;
      rdata_hold_data_7 <= mem_rdata_7;
    end
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      conflictBufferValid_REG <= 1'h0;
      rdata_last_REG <= 1'h0;
    end
    else begin
      conflictBufferValid_REG <=
        conflictValidS0 | conflictBufferValid_REG
        & (_conflictBufferCanWrite_T_1 | io_w_req_valid);
      rdata_last_REG <= io_r_req_valid;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:17];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h12; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        conflictRaddrS1 = _RANDOM[5'h0][8:1];
        conflictWaddrS1 = _RANDOM[5'h0][16:9];
        conflictWmaskS1 = _RANDOM[5'h0][24:17];
        conflictWdataS1_0 = _RANDOM[5'h0][26:25];
        conflictWdataS1_1 = _RANDOM[5'h0][28:27];
        conflictWdataS1_2 = _RANDOM[5'h0][30:29];
        conflictWdataS1_3 = {_RANDOM[5'h0][31], _RANDOM[5'h1][0]};
        conflictWdataS1_4 = _RANDOM[5'h1][2:1];
        conflictWdataS1_5 = _RANDOM[5'h1][4:3];
        conflictWdataS1_6 = _RANDOM[5'h1][6:5];
        conflictWdataS1_7 = _RANDOM[5'h1][8:7];
        conflictBufferValid_REG = _RANDOM[5'h11][10];
        bypassEnable_REG = _RANDOM[5'h11][11];
        rdata_last_REG = _RANDOM[5'h11][12];
        rdata_hold_data_0 = _RANDOM[5'h11][14:13];
        rdata_hold_data_1 = _RANDOM[5'h11][16:15];
        rdata_hold_data_2 = _RANDOM[5'h11][18:17];
        rdata_hold_data_3 = _RANDOM[5'h11][20:19];
        rdata_hold_data_4 = _RANDOM[5'h11][22:21];
        rdata_hold_data_5 = _RANDOM[5'h11][24:23];
        rdata_hold_data_6 = _RANDOM[5'h11][26:25];
        rdata_hold_data_7 = _RANDOM[5'h11][28:27];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        conflictBufferValid_REG = 1'h0;
        rdata_last_REG = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  MbistClockGateCell rcg (
    .clock     (clock),
    .E         (io_r_req_valid),
    .out_clock (_rcg_out_clock)
  );
  MbistClockGateCell wcg (
    .clock     (clock),
    .E         (wen),
    .out_clock (_wcg_out_clock)
  );
  sram_array_2p256x16m2s1h0l1_bp_tage_bt array (
    .R0_clk  (_rcg_out_clock),
    .R0_addr (io_r_req_bits_setIdx),
    .R0_en   (io_r_req_valid),
    .R0_data (_array_R0_data),
    .W0_clk  (_wcg_out_clock),
    .W0_addr (conflictBufferWrite ? conflictWaddrS1 : io_w_req_bits_setIdx),
    .W0_en   (wen),
    .W0_data
      (conflictBufferWrite
         ? {conflictWdataS1_7,
            conflictWdataS1_6,
            conflictWdataS1_5,
            conflictWdataS1_4,
            conflictWdataS1_3,
            conflictWdataS1_2,
            conflictWdataS1_1,
            conflictWdataS1_0}
         : {io_w_req_bits_data_7,
            io_w_req_bits_data_6,
            io_w_req_bits_data_5,
            io_w_req_bits_data_4,
            io_w_req_bits_data_3,
            io_w_req_bits_data_2,
            io_w_req_bits_data_1,
            io_w_req_bits_data_0}),
    .W0_mask (conflictBufferWrite ? conflictWmaskS1 : io_w_req_bits_waymask)
  );
  assign io_r_resp_data_0 = rdata_last_REG ? mem_rdata_0 : rdata_hold_data_0;
  assign io_r_resp_data_1 = rdata_last_REG ? mem_rdata_1 : rdata_hold_data_1;
  assign io_r_resp_data_2 = rdata_last_REG ? mem_rdata_2 : rdata_hold_data_2;
  assign io_r_resp_data_3 = rdata_last_REG ? mem_rdata_3 : rdata_hold_data_3;
  assign io_r_resp_data_4 = rdata_last_REG ? mem_rdata_4 : rdata_hold_data_4;
  assign io_r_resp_data_5 = rdata_last_REG ? mem_rdata_5 : rdata_hold_data_5;
  assign io_r_resp_data_6 = rdata_last_REG ? mem_rdata_6 : rdata_hold_data_6;
  assign io_r_resp_data_7 = rdata_last_REG ? mem_rdata_7 : rdata_hold_data_7;
endmodule

