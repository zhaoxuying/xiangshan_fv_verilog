// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DelayReg_11(
  input         clock,
  input         reset,
  input         i_valid,
  input  [31:0] i_interrupt,
  input  [31:0] i_exception,
  input  [63:0] i_exceptionPC,
  input         i_hasNMI,
  input         i_virtualInterruptIsHvictlInject,
  input         i_irToHS,
  input         i_irToVS,
  input  [7:0]  i_coreid,
  output        o_valid,
  output [31:0] o_interrupt,
  output [31:0] o_exception,
  output [63:0] o_exceptionPC,
  output        o_hasNMI,
  output        o_virtualInterruptIsHvictlInject,
  output        o_irToHS,
  output        o_irToVS,
  output [7:0]  o_coreid
);

  reg        REG_valid;
  reg [31:0] REG_interrupt;
  reg [31:0] REG_exception;
  reg [63:0] REG_exceptionPC;
  reg        REG_hasNMI;
  reg        REG_virtualInterruptIsHvictlInject;
  reg        REG_irToHS;
  reg        REG_irToVS;
  reg [7:0]  REG_coreid;
  reg        REG_1_valid;
  reg [31:0] REG_1_interrupt;
  reg [31:0] REG_1_exception;
  reg [63:0] REG_1_exceptionPC;
  reg        REG_1_hasNMI;
  reg        REG_1_virtualInterruptIsHvictlInject;
  reg        REG_1_irToHS;
  reg        REG_1_irToVS;
  reg [7:0]  REG_1_coreid;
  reg        REG_2_valid;
  reg [31:0] REG_2_interrupt;
  reg [31:0] REG_2_exception;
  reg [63:0] REG_2_exceptionPC;
  reg        REG_2_hasNMI;
  reg        REG_2_virtualInterruptIsHvictlInject;
  reg        REG_2_irToHS;
  reg        REG_2_irToVS;
  reg [7:0]  REG_2_coreid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      REG_valid <= 1'h0;
      REG_interrupt <= 32'h0;
      REG_exception <= 32'h0;
      REG_exceptionPC <= 64'h0;
      REG_hasNMI <= 1'h0;
      REG_virtualInterruptIsHvictlInject <= 1'h0;
      REG_irToHS <= 1'h0;
      REG_irToVS <= 1'h0;
      REG_coreid <= 8'h0;
      REG_1_valid <= 1'h0;
      REG_1_interrupt <= 32'h0;
      REG_1_exception <= 32'h0;
      REG_1_exceptionPC <= 64'h0;
      REG_1_hasNMI <= 1'h0;
      REG_1_virtualInterruptIsHvictlInject <= 1'h0;
      REG_1_irToHS <= 1'h0;
      REG_1_irToVS <= 1'h0;
      REG_1_coreid <= 8'h0;
      REG_2_valid <= 1'h0;
      REG_2_interrupt <= 32'h0;
      REG_2_exception <= 32'h0;
      REG_2_exceptionPC <= 64'h0;
      REG_2_hasNMI <= 1'h0;
      REG_2_virtualInterruptIsHvictlInject <= 1'h0;
      REG_2_irToHS <= 1'h0;
      REG_2_irToVS <= 1'h0;
      REG_2_coreid <= 8'h0;
    end
    else begin
      REG_valid <= i_valid;
      REG_interrupt <= i_interrupt;
      REG_exception <= i_exception;
      REG_exceptionPC <= i_exceptionPC;
      REG_hasNMI <= i_hasNMI;
      REG_virtualInterruptIsHvictlInject <= i_virtualInterruptIsHvictlInject;
      REG_irToHS <= i_irToHS;
      REG_irToVS <= i_irToVS;
      REG_coreid <= i_coreid;
      REG_1_valid <= REG_valid;
      REG_1_interrupt <= REG_interrupt;
      REG_1_exception <= REG_exception;
      REG_1_exceptionPC <= REG_exceptionPC;
      REG_1_hasNMI <= REG_hasNMI;
      REG_1_virtualInterruptIsHvictlInject <= REG_virtualInterruptIsHvictlInject;
      REG_1_irToHS <= REG_irToHS;
      REG_1_irToVS <= REG_irToVS;
      REG_1_coreid <= REG_coreid;
      REG_2_valid <= REG_1_valid;
      REG_2_interrupt <= REG_1_interrupt;
      REG_2_exception <= REG_1_exception;
      REG_2_exceptionPC <= REG_1_exceptionPC;
      REG_2_hasNMI <= REG_1_hasNMI;
      REG_2_virtualInterruptIsHvictlInject <= REG_1_virtualInterruptIsHvictlInject;
      REG_2_irToHS <= REG_1_irToHS;
      REG_2_irToVS <= REG_1_irToVS;
      REG_2_coreid <= REG_1_coreid;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:16];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h11; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        REG_valid = _RANDOM[5'h0][0];
        REG_interrupt = {_RANDOM[5'h0][31:1], _RANDOM[5'h1][0]};
        REG_exception = {_RANDOM[5'h1][31:1], _RANDOM[5'h2][0]};
        REG_exceptionPC = {_RANDOM[5'h2][31:1], _RANDOM[5'h3], _RANDOM[5'h4][0]};
        REG_hasNMI = _RANDOM[5'h5][1];
        REG_virtualInterruptIsHvictlInject = _RANDOM[5'h5][2];
        REG_irToHS = _RANDOM[5'h5][3];
        REG_irToVS = _RANDOM[5'h5][4];
        REG_coreid = _RANDOM[5'h5][12:5];
        REG_1_valid = _RANDOM[5'h5][13];
        REG_1_interrupt = {_RANDOM[5'h5][31:14], _RANDOM[5'h6][13:0]};
        REG_1_exception = {_RANDOM[5'h6][31:14], _RANDOM[5'h7][13:0]};
        REG_1_exceptionPC = {_RANDOM[5'h7][31:14], _RANDOM[5'h8], _RANDOM[5'h9][13:0]};
        REG_1_hasNMI = _RANDOM[5'hA][14];
        REG_1_virtualInterruptIsHvictlInject = _RANDOM[5'hA][15];
        REG_1_irToHS = _RANDOM[5'hA][16];
        REG_1_irToVS = _RANDOM[5'hA][17];
        REG_1_coreid = _RANDOM[5'hA][25:18];
        REG_2_valid = _RANDOM[5'hA][26];
        REG_2_interrupt = {_RANDOM[5'hA][31:27], _RANDOM[5'hB][26:0]};
        REG_2_exception = {_RANDOM[5'hB][31:27], _RANDOM[5'hC][26:0]};
        REG_2_exceptionPC = {_RANDOM[5'hC][31:27], _RANDOM[5'hD], _RANDOM[5'hE][26:0]};
        REG_2_hasNMI = _RANDOM[5'hF][27];
        REG_2_virtualInterruptIsHvictlInject = _RANDOM[5'hF][28];
        REG_2_irToHS = _RANDOM[5'hF][29];
        REG_2_irToVS = _RANDOM[5'hF][30];
        REG_2_coreid = {_RANDOM[5'hF][31], _RANDOM[5'h10][6:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        REG_valid = 1'h0;
        REG_interrupt = 32'h0;
        REG_exception = 32'h0;
        REG_exceptionPC = 64'h0;
        REG_hasNMI = 1'h0;
        REG_virtualInterruptIsHvictlInject = 1'h0;
        REG_irToHS = 1'h0;
        REG_irToVS = 1'h0;
        REG_coreid = 8'h0;
        REG_1_valid = 1'h0;
        REG_1_interrupt = 32'h0;
        REG_1_exception = 32'h0;
        REG_1_exceptionPC = 64'h0;
        REG_1_hasNMI = 1'h0;
        REG_1_virtualInterruptIsHvictlInject = 1'h0;
        REG_1_irToHS = 1'h0;
        REG_1_irToVS = 1'h0;
        REG_1_coreid = 8'h0;
        REG_2_valid = 1'h0;
        REG_2_interrupt = 32'h0;
        REG_2_exception = 32'h0;
        REG_2_exceptionPC = 64'h0;
        REG_2_hasNMI = 1'h0;
        REG_2_virtualInterruptIsHvictlInject = 1'h0;
        REG_2_irToHS = 1'h0;
        REG_2_irToVS = 1'h0;
        REG_2_coreid = 8'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign o_valid = REG_2_valid;
  assign o_interrupt = REG_2_interrupt;
  assign o_exception = REG_2_exception;
  assign o_exceptionPC = REG_2_exceptionPC;
  assign o_hasNMI = REG_2_hasNMI;
  assign o_virtualInterruptIsHvictlInject = REG_2_virtualInterruptIsHvictlInject;
  assign o_irToHS = REG_2_irToHS;
  assign o_irToVS = REG_2_irToVS;
  assign o_coreid = REG_2_coreid;
endmodule

