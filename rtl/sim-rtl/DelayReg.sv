// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DelayReg(
  input        clock,
  input        reset,
  input        i_valid,
  input        i_skip,
  input        i_isRVC,
  input        i_rfwen,
  input        i_fpwen,
  input        i_vecwen,
  input        i_v0wen,
  input  [7:0] i_wpdest,
  input  [7:0] i_wdest,
  input  [7:0] i_otherwpdest_0,
  input  [7:0] i_otherwpdest_1,
  input  [7:0] i_otherwpdest_2,
  input  [7:0] i_otherwpdest_3,
  input  [7:0] i_otherwpdest_4,
  input  [7:0] i_otherwpdest_5,
  input  [7:0] i_otherwpdest_6,
  input  [7:0] i_otherwpdest_7,
  input  [7:0] i_nFused,
  input  [7:0] i_coreid,
  input  [7:0] i_index,
  output       o_valid,
  output       o_skip,
  output       o_isRVC,
  output       o_rfwen,
  output       o_fpwen,
  output       o_vecwen,
  output       o_v0wen,
  output [7:0] o_wpdest,
  output [7:0] o_wdest,
  output [7:0] o_otherwpdest_0,
  output [7:0] o_otherwpdest_1,
  output [7:0] o_otherwpdest_2,
  output [7:0] o_otherwpdest_3,
  output [7:0] o_otherwpdest_4,
  output [7:0] o_otherwpdest_5,
  output [7:0] o_otherwpdest_6,
  output [7:0] o_otherwpdest_7,
  output [7:0] o_nFused,
  output [7:0] o_coreid,
  output [7:0] o_index
);

  reg       REG_valid;
  reg       REG_skip;
  reg       REG_isRVC;
  reg       REG_rfwen;
  reg       REG_fpwen;
  reg       REG_vecwen;
  reg       REG_v0wen;
  reg [7:0] REG_wpdest;
  reg [7:0] REG_wdest;
  reg [7:0] REG_otherwpdest_0;
  reg [7:0] REG_otherwpdest_1;
  reg [7:0] REG_otherwpdest_2;
  reg [7:0] REG_otherwpdest_3;
  reg [7:0] REG_otherwpdest_4;
  reg [7:0] REG_otherwpdest_5;
  reg [7:0] REG_otherwpdest_6;
  reg [7:0] REG_otherwpdest_7;
  reg [7:0] REG_nFused;
  reg [7:0] REG_coreid;
  reg [7:0] REG_index;
  reg       REG_1_valid;
  reg       REG_1_skip;
  reg       REG_1_isRVC;
  reg       REG_1_rfwen;
  reg       REG_1_fpwen;
  reg       REG_1_vecwen;
  reg       REG_1_v0wen;
  reg [7:0] REG_1_wpdest;
  reg [7:0] REG_1_wdest;
  reg [7:0] REG_1_otherwpdest_0;
  reg [7:0] REG_1_otherwpdest_1;
  reg [7:0] REG_1_otherwpdest_2;
  reg [7:0] REG_1_otherwpdest_3;
  reg [7:0] REG_1_otherwpdest_4;
  reg [7:0] REG_1_otherwpdest_5;
  reg [7:0] REG_1_otherwpdest_6;
  reg [7:0] REG_1_otherwpdest_7;
  reg [7:0] REG_1_nFused;
  reg [7:0] REG_1_coreid;
  reg [7:0] REG_1_index;
  reg       REG_2_valid;
  reg       REG_2_skip;
  reg       REG_2_isRVC;
  reg       REG_2_rfwen;
  reg       REG_2_fpwen;
  reg       REG_2_vecwen;
  reg       REG_2_v0wen;
  reg [7:0] REG_2_wpdest;
  reg [7:0] REG_2_wdest;
  reg [7:0] REG_2_otherwpdest_0;
  reg [7:0] REG_2_otherwpdest_1;
  reg [7:0] REG_2_otherwpdest_2;
  reg [7:0] REG_2_otherwpdest_3;
  reg [7:0] REG_2_otherwpdest_4;
  reg [7:0] REG_2_otherwpdest_5;
  reg [7:0] REG_2_otherwpdest_6;
  reg [7:0] REG_2_otherwpdest_7;
  reg [7:0] REG_2_nFused;
  reg [7:0] REG_2_coreid;
  reg [7:0] REG_2_index;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      REG_valid <= 1'h0;
      REG_skip <= 1'h0;
      REG_isRVC <= 1'h0;
      REG_rfwen <= 1'h0;
      REG_fpwen <= 1'h0;
      REG_vecwen <= 1'h0;
      REG_v0wen <= 1'h0;
      REG_wpdest <= 8'h0;
      REG_wdest <= 8'h0;
      REG_otherwpdest_0 <= 8'h0;
      REG_otherwpdest_1 <= 8'h0;
      REG_otherwpdest_2 <= 8'h0;
      REG_otherwpdest_3 <= 8'h0;
      REG_otherwpdest_4 <= 8'h0;
      REG_otherwpdest_5 <= 8'h0;
      REG_otherwpdest_6 <= 8'h0;
      REG_otherwpdest_7 <= 8'h0;
      REG_nFused <= 8'h0;
      REG_coreid <= 8'h0;
      REG_index <= 8'h0;
      REG_1_valid <= 1'h0;
      REG_1_skip <= 1'h0;
      REG_1_isRVC <= 1'h0;
      REG_1_rfwen <= 1'h0;
      REG_1_fpwen <= 1'h0;
      REG_1_vecwen <= 1'h0;
      REG_1_v0wen <= 1'h0;
      REG_1_wpdest <= 8'h0;
      REG_1_wdest <= 8'h0;
      REG_1_otherwpdest_0 <= 8'h0;
      REG_1_otherwpdest_1 <= 8'h0;
      REG_1_otherwpdest_2 <= 8'h0;
      REG_1_otherwpdest_3 <= 8'h0;
      REG_1_otherwpdest_4 <= 8'h0;
      REG_1_otherwpdest_5 <= 8'h0;
      REG_1_otherwpdest_6 <= 8'h0;
      REG_1_otherwpdest_7 <= 8'h0;
      REG_1_nFused <= 8'h0;
      REG_1_coreid <= 8'h0;
      REG_1_index <= 8'h0;
      REG_2_valid <= 1'h0;
      REG_2_skip <= 1'h0;
      REG_2_isRVC <= 1'h0;
      REG_2_rfwen <= 1'h0;
      REG_2_fpwen <= 1'h0;
      REG_2_vecwen <= 1'h0;
      REG_2_v0wen <= 1'h0;
      REG_2_wpdest <= 8'h0;
      REG_2_wdest <= 8'h0;
      REG_2_otherwpdest_0 <= 8'h0;
      REG_2_otherwpdest_1 <= 8'h0;
      REG_2_otherwpdest_2 <= 8'h0;
      REG_2_otherwpdest_3 <= 8'h0;
      REG_2_otherwpdest_4 <= 8'h0;
      REG_2_otherwpdest_5 <= 8'h0;
      REG_2_otherwpdest_6 <= 8'h0;
      REG_2_otherwpdest_7 <= 8'h0;
      REG_2_nFused <= 8'h0;
      REG_2_coreid <= 8'h0;
      REG_2_index <= 8'h0;
    end
    else begin
      REG_valid <= i_valid;
      REG_skip <= i_skip;
      REG_isRVC <= i_isRVC;
      REG_rfwen <= i_rfwen;
      REG_fpwen <= i_fpwen;
      REG_vecwen <= i_vecwen;
      REG_v0wen <= i_v0wen;
      REG_wpdest <= i_wpdest;
      REG_wdest <= i_wdest;
      REG_otherwpdest_0 <= i_otherwpdest_0;
      REG_otherwpdest_1 <= i_otherwpdest_1;
      REG_otherwpdest_2 <= i_otherwpdest_2;
      REG_otherwpdest_3 <= i_otherwpdest_3;
      REG_otherwpdest_4 <= i_otherwpdest_4;
      REG_otherwpdest_5 <= i_otherwpdest_5;
      REG_otherwpdest_6 <= i_otherwpdest_6;
      REG_otherwpdest_7 <= i_otherwpdest_7;
      REG_nFused <= i_nFused;
      REG_coreid <= i_coreid;
      REG_index <= i_index;
      REG_1_valid <= REG_valid;
      REG_1_skip <= REG_skip;
      REG_1_isRVC <= REG_isRVC;
      REG_1_rfwen <= REG_rfwen;
      REG_1_fpwen <= REG_fpwen;
      REG_1_vecwen <= REG_vecwen;
      REG_1_v0wen <= REG_v0wen;
      REG_1_wpdest <= REG_wpdest;
      REG_1_wdest <= REG_wdest;
      REG_1_otherwpdest_0 <= REG_otherwpdest_0;
      REG_1_otherwpdest_1 <= REG_otherwpdest_1;
      REG_1_otherwpdest_2 <= REG_otherwpdest_2;
      REG_1_otherwpdest_3 <= REG_otherwpdest_3;
      REG_1_otherwpdest_4 <= REG_otherwpdest_4;
      REG_1_otherwpdest_5 <= REG_otherwpdest_5;
      REG_1_otherwpdest_6 <= REG_otherwpdest_6;
      REG_1_otherwpdest_7 <= REG_otherwpdest_7;
      REG_1_nFused <= REG_nFused;
      REG_1_coreid <= REG_coreid;
      REG_1_index <= REG_index;
      REG_2_valid <= REG_1_valid;
      REG_2_skip <= REG_1_skip;
      REG_2_isRVC <= REG_1_isRVC;
      REG_2_rfwen <= REG_1_rfwen;
      REG_2_fpwen <= REG_1_fpwen;
      REG_2_vecwen <= REG_1_vecwen;
      REG_2_v0wen <= REG_1_v0wen;
      REG_2_wpdest <= REG_1_wpdest;
      REG_2_wdest <= REG_1_wdest;
      REG_2_otherwpdest_0 <= REG_1_otherwpdest_0;
      REG_2_otherwpdest_1 <= REG_1_otherwpdest_1;
      REG_2_otherwpdest_2 <= REG_1_otherwpdest_2;
      REG_2_otherwpdest_3 <= REG_1_otherwpdest_3;
      REG_2_otherwpdest_4 <= REG_1_otherwpdest_4;
      REG_2_otherwpdest_5 <= REG_1_otherwpdest_5;
      REG_2_otherwpdest_6 <= REG_1_otherwpdest_6;
      REG_2_otherwpdest_7 <= REG_1_otherwpdest_7;
      REG_2_nFused <= REG_1_nFused;
      REG_2_coreid <= REG_1_coreid;
      REG_2_index <= REG_1_index;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:23];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h18; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        REG_valid = _RANDOM[5'h0][0];
        REG_skip = _RANDOM[5'h0][1];
        REG_isRVC = _RANDOM[5'h0][2];
        REG_rfwen = _RANDOM[5'h0][3];
        REG_fpwen = _RANDOM[5'h0][4];
        REG_vecwen = _RANDOM[5'h0][5];
        REG_v0wen = _RANDOM[5'h0][6];
        REG_wpdest = _RANDOM[5'h0][14:7];
        REG_wdest = _RANDOM[5'h0][22:15];
        REG_otherwpdest_0 = _RANDOM[5'h0][30:23];
        REG_otherwpdest_1 = {_RANDOM[5'h0][31], _RANDOM[5'h1][6:0]};
        REG_otherwpdest_2 = _RANDOM[5'h1][14:7];
        REG_otherwpdest_3 = _RANDOM[5'h1][22:15];
        REG_otherwpdest_4 = _RANDOM[5'h1][30:23];
        REG_otherwpdest_5 = {_RANDOM[5'h1][31], _RANDOM[5'h2][6:0]};
        REG_otherwpdest_6 = _RANDOM[5'h2][14:7];
        REG_otherwpdest_7 = _RANDOM[5'h2][22:15];
        REG_nFused = {_RANDOM[5'h6][31:25], _RANDOM[5'h7][0]};
        REG_coreid = _RANDOM[5'h7][16:9];
        REG_index = _RANDOM[5'h7][24:17];
        REG_1_valid = _RANDOM[5'h7][25];
        REG_1_skip = _RANDOM[5'h7][26];
        REG_1_isRVC = _RANDOM[5'h7][27];
        REG_1_rfwen = _RANDOM[5'h7][28];
        REG_1_fpwen = _RANDOM[5'h7][29];
        REG_1_vecwen = _RANDOM[5'h7][30];
        REG_1_v0wen = _RANDOM[5'h7][31];
        REG_1_wpdest = _RANDOM[5'h8][7:0];
        REG_1_wdest = _RANDOM[5'h8][15:8];
        REG_1_otherwpdest_0 = _RANDOM[5'h8][23:16];
        REG_1_otherwpdest_1 = _RANDOM[5'h8][31:24];
        REG_1_otherwpdest_2 = _RANDOM[5'h9][7:0];
        REG_1_otherwpdest_3 = _RANDOM[5'h9][15:8];
        REG_1_otherwpdest_4 = _RANDOM[5'h9][23:16];
        REG_1_otherwpdest_5 = _RANDOM[5'h9][31:24];
        REG_1_otherwpdest_6 = _RANDOM[5'hA][7:0];
        REG_1_otherwpdest_7 = _RANDOM[5'hA][15:8];
        REG_1_nFused = _RANDOM[5'hE][25:18];
        REG_1_coreid = _RANDOM[5'hF][9:2];
        REG_1_index = _RANDOM[5'hF][17:10];
        REG_2_valid = _RANDOM[5'hF][18];
        REG_2_skip = _RANDOM[5'hF][19];
        REG_2_isRVC = _RANDOM[5'hF][20];
        REG_2_rfwen = _RANDOM[5'hF][21];
        REG_2_fpwen = _RANDOM[5'hF][22];
        REG_2_vecwen = _RANDOM[5'hF][23];
        REG_2_v0wen = _RANDOM[5'hF][24];
        REG_2_wpdest = {_RANDOM[5'hF][31:25], _RANDOM[5'h10][0]};
        REG_2_wdest = _RANDOM[5'h10][8:1];
        REG_2_otherwpdest_0 = _RANDOM[5'h10][16:9];
        REG_2_otherwpdest_1 = _RANDOM[5'h10][24:17];
        REG_2_otherwpdest_2 = {_RANDOM[5'h10][31:25], _RANDOM[5'h11][0]};
        REG_2_otherwpdest_3 = _RANDOM[5'h11][8:1];
        REG_2_otherwpdest_4 = _RANDOM[5'h11][16:9];
        REG_2_otherwpdest_5 = _RANDOM[5'h11][24:17];
        REG_2_otherwpdest_6 = {_RANDOM[5'h11][31:25], _RANDOM[5'h12][0]};
        REG_2_otherwpdest_7 = _RANDOM[5'h12][8:1];
        REG_2_nFused = _RANDOM[5'h16][18:11];
        REG_2_coreid = {_RANDOM[5'h16][31:27], _RANDOM[5'h17][2:0]};
        REG_2_index = _RANDOM[5'h17][10:3];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        REG_valid = 1'h0;
        REG_skip = 1'h0;
        REG_isRVC = 1'h0;
        REG_rfwen = 1'h0;
        REG_fpwen = 1'h0;
        REG_vecwen = 1'h0;
        REG_v0wen = 1'h0;
        REG_wpdest = 8'h0;
        REG_wdest = 8'h0;
        REG_otherwpdest_0 = 8'h0;
        REG_otherwpdest_1 = 8'h0;
        REG_otherwpdest_2 = 8'h0;
        REG_otherwpdest_3 = 8'h0;
        REG_otherwpdest_4 = 8'h0;
        REG_otherwpdest_5 = 8'h0;
        REG_otherwpdest_6 = 8'h0;
        REG_otherwpdest_7 = 8'h0;
        REG_nFused = 8'h0;
        REG_coreid = 8'h0;
        REG_index = 8'h0;
        REG_1_valid = 1'h0;
        REG_1_skip = 1'h0;
        REG_1_isRVC = 1'h0;
        REG_1_rfwen = 1'h0;
        REG_1_fpwen = 1'h0;
        REG_1_vecwen = 1'h0;
        REG_1_v0wen = 1'h0;
        REG_1_wpdest = 8'h0;
        REG_1_wdest = 8'h0;
        REG_1_otherwpdest_0 = 8'h0;
        REG_1_otherwpdest_1 = 8'h0;
        REG_1_otherwpdest_2 = 8'h0;
        REG_1_otherwpdest_3 = 8'h0;
        REG_1_otherwpdest_4 = 8'h0;
        REG_1_otherwpdest_5 = 8'h0;
        REG_1_otherwpdest_6 = 8'h0;
        REG_1_otherwpdest_7 = 8'h0;
        REG_1_nFused = 8'h0;
        REG_1_coreid = 8'h0;
        REG_1_index = 8'h0;
        REG_2_valid = 1'h0;
        REG_2_skip = 1'h0;
        REG_2_isRVC = 1'h0;
        REG_2_rfwen = 1'h0;
        REG_2_fpwen = 1'h0;
        REG_2_vecwen = 1'h0;
        REG_2_v0wen = 1'h0;
        REG_2_wpdest = 8'h0;
        REG_2_wdest = 8'h0;
        REG_2_otherwpdest_0 = 8'h0;
        REG_2_otherwpdest_1 = 8'h0;
        REG_2_otherwpdest_2 = 8'h0;
        REG_2_otherwpdest_3 = 8'h0;
        REG_2_otherwpdest_4 = 8'h0;
        REG_2_otherwpdest_5 = 8'h0;
        REG_2_otherwpdest_6 = 8'h0;
        REG_2_otherwpdest_7 = 8'h0;
        REG_2_nFused = 8'h0;
        REG_2_coreid = 8'h0;
        REG_2_index = 8'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign o_valid = REG_2_valid;
  assign o_skip = REG_2_skip;
  assign o_isRVC = REG_2_isRVC;
  assign o_rfwen = REG_2_rfwen;
  assign o_fpwen = REG_2_fpwen;
  assign o_vecwen = REG_2_vecwen;
  assign o_v0wen = REG_2_v0wen;
  assign o_wpdest = REG_2_wpdest;
  assign o_wdest = REG_2_wdest;
  assign o_otherwpdest_0 = REG_2_otherwpdest_0;
  assign o_otherwpdest_1 = REG_2_otherwpdest_1;
  assign o_otherwpdest_2 = REG_2_otherwpdest_2;
  assign o_otherwpdest_3 = REG_2_otherwpdest_3;
  assign o_otherwpdest_4 = REG_2_otherwpdest_4;
  assign o_otherwpdest_5 = REG_2_otherwpdest_5;
  assign o_otherwpdest_6 = REG_2_otherwpdest_6;
  assign o_otherwpdest_7 = REG_2_otherwpdest_7;
  assign o_nFused = REG_2_nFused;
  assign o_coreid = REG_2_coreid;
  assign o_index = REG_2_index;
endmodule

