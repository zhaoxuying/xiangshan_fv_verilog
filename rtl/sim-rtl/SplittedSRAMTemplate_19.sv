// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SplittedSRAMTemplate_19(
  input         clock,
  input         reset,
  output        io_r_req_ready,
  input         io_r_req_valid,
  input  [6:0]  io_r_req_bits_setIdx,
  output        io_r_resp_data_0_valid,
  output [6:0]  io_r_resp_data_0_tag,
  output [1:0]  io_r_resp_data_0_ctr,
  output [19:0] io_r_resp_data_0_target_offset_offset,
  output [3:0]  io_r_resp_data_0_target_offset_pointer,
  output        io_r_resp_data_0_target_offset_usePCRegion,
  output        io_r_resp_data_0_useful,
  input         io_w_req_valid,
  input  [6:0]  io_w_req_bits_setIdx,
  input  [6:0]  io_w_req_bits_data_0_tag,
  input  [1:0]  io_w_req_bits_data_0_ctr,
  input  [19:0] io_w_req_bits_data_0_target_offset_offset,
  input  [3:0]  io_w_req_bits_data_0_target_offset_pointer,
  input         io_w_req_bits_data_0_target_offset_usePCRegion,
  input         io_w_req_bits_data_0_useful,
  input  [35:0] io_w_req_bits_bitmask
);

  wire [35:0] _array_0_0_0_io_r_resp_data_0;
  SRAMTemplate_63 array_0_0_0 (
    .clock                           (clock),
    .reset                           (reset),
    .io_r_req_ready                  (io_r_req_ready),
    .io_r_req_valid                  (io_r_req_valid),
    .io_r_req_bits_setIdx            (io_r_req_bits_setIdx),
    .io_r_resp_data_0                (_array_0_0_0_io_r_resp_data_0),
    .io_w_req_valid                  (io_w_req_valid),
    .io_w_req_bits_setIdx            (io_w_req_bits_setIdx),
    .io_w_req_bits_data_0
      ({1'h1,
        io_w_req_bits_data_0_tag,
        io_w_req_bits_data_0_ctr,
        io_w_req_bits_data_0_target_offset_offset,
        io_w_req_bits_data_0_target_offset_pointer,
        io_w_req_bits_data_0_target_offset_usePCRegion,
        io_w_req_bits_data_0_useful}),
    .io_w_req_bits_flattened_bitmask (io_w_req_bits_bitmask)
  );
  assign io_r_resp_data_0_valid = _array_0_0_0_io_r_resp_data_0[35];
  assign io_r_resp_data_0_tag = _array_0_0_0_io_r_resp_data_0[34:28];
  assign io_r_resp_data_0_ctr = _array_0_0_0_io_r_resp_data_0[27:26];
  assign io_r_resp_data_0_target_offset_offset = _array_0_0_0_io_r_resp_data_0[25:6];
  assign io_r_resp_data_0_target_offset_pointer = _array_0_0_0_io_r_resp_data_0[5:2];
  assign io_r_resp_data_0_target_offset_usePCRegion = _array_0_0_0_io_r_resp_data_0[1];
  assign io_r_resp_data_0_useful = _array_0_0_0_io_r_resp_data_0[0];
endmodule

