// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module LqPAddrModule_1(
  input         clock,
  input         io_wen_0,
  input         io_wen_1,
  input         io_wen_2,
  input  [3:0]  io_waddr_0,
  input  [3:0]  io_waddr_1,
  input  [3:0]  io_waddr_2,
  input  [23:0] io_wdata_0,
  input  [23:0] io_wdata_1,
  input  [23:0] io_wdata_2,
  input  [23:0] io_violationMdata_0,
  input  [23:0] io_violationMdata_1,
  input         io_violationCheckLine_0,
  input         io_violationCheckLine_1,
  output        io_violationMmask_0_0,
  output        io_violationMmask_0_1,
  output        io_violationMmask_0_2,
  output        io_violationMmask_0_3,
  output        io_violationMmask_0_4,
  output        io_violationMmask_0_5,
  output        io_violationMmask_0_6,
  output        io_violationMmask_0_7,
  output        io_violationMmask_0_8,
  output        io_violationMmask_0_9,
  output        io_violationMmask_0_10,
  output        io_violationMmask_0_11,
  output        io_violationMmask_1_0,
  output        io_violationMmask_1_1,
  output        io_violationMmask_1_2,
  output        io_violationMmask_1_3,
  output        io_violationMmask_1_4,
  output        io_violationMmask_1_5,
  output        io_violationMmask_1_6,
  output        io_violationMmask_1_7,
  output        io_violationMmask_1_8,
  output        io_violationMmask_1_9,
  output        io_violationMmask_1_10,
  output        io_violationMmask_1_11
);

  wire [23:0] _sx_writeData_resp_pipMod_11_io_out_bits;
  wire [23:0] _sx_writeData_resp_pipMod_10_io_out_bits;
  wire [23:0] _sx_writeData_resp_pipMod_9_io_out_bits;
  wire        _sx_bankWriteEn_delay_11_io_out;
  wire        _sx_bankWriteEn_delay_10_io_out;
  wire        _sx_bankWriteEn_delay_9_io_out;
  wire [2:0]  _sx_bankWriteAddrDec_resp_pipMod_11_io_out_bits;
  wire [2:0]  _sx_bankWriteAddrDec_resp_pipMod_10_io_out_bits;
  wire [2:0]  _sx_bankWriteAddrDec_resp_pipMod_9_io_out_bits;
  wire [23:0] _sx_writeData_resp_pipMod_8_io_out_bits;
  wire [23:0] _sx_writeData_resp_pipMod_7_io_out_bits;
  wire [23:0] _sx_writeData_resp_pipMod_6_io_out_bits;
  wire        _sx_bankWriteEn_delay_8_io_out;
  wire        _sx_bankWriteEn_delay_7_io_out;
  wire        _sx_bankWriteEn_delay_6_io_out;
  wire [2:0]  _sx_bankWriteAddrDec_resp_pipMod_8_io_out_bits;
  wire [2:0]  _sx_bankWriteAddrDec_resp_pipMod_7_io_out_bits;
  wire [2:0]  _sx_bankWriteAddrDec_resp_pipMod_6_io_out_bits;
  wire [23:0] _sx_writeData_resp_pipMod_5_io_out_bits;
  wire [23:0] _sx_writeData_resp_pipMod_4_io_out_bits;
  wire [23:0] _sx_writeData_resp_pipMod_3_io_out_bits;
  wire        _sx_bankWriteEn_delay_5_io_out;
  wire        _sx_bankWriteEn_delay_4_io_out;
  wire        _sx_bankWriteEn_delay_3_io_out;
  wire [2:0]  _sx_bankWriteAddrDec_resp_pipMod_5_io_out_bits;
  wire [2:0]  _sx_bankWriteAddrDec_resp_pipMod_4_io_out_bits;
  wire [2:0]  _sx_bankWriteAddrDec_resp_pipMod_3_io_out_bits;
  wire [23:0] _sx_writeData_resp_pipMod_2_io_out_bits;
  wire [23:0] _sx_writeData_resp_pipMod_1_io_out_bits;
  wire [23:0] _sx_writeData_resp_pipMod_io_out_bits;
  wire        _sx_bankWriteEn_delay_2_io_out;
  wire        _sx_bankWriteEn_delay_1_io_out;
  wire        _sx_bankWriteEn_delay_io_out;
  wire [2:0]  _sx_bankWriteAddrDec_resp_pipMod_2_io_out_bits;
  wire [2:0]  _sx_bankWriteAddrDec_resp_pipMod_1_io_out_bits;
  wire [2:0]  _sx_bankWriteAddrDec_resp_pipMod_io_out_bits;
  reg  [23:0] data_0;
  reg  [23:0] data_1;
  reg  [23:0] data_2;
  reg  [23:0] data_3;
  reg  [23:0] data_4;
  reg  [23:0] data_5;
  reg  [23:0] data_6;
  reg  [23:0] data_7;
  reg  [23:0] data_8;
  reg  [23:0] data_9;
  reg  [23:0] data_10;
  reg  [23:0] data_11;
  wire [15:0] writeAddrDec_0 = 16'h1 << io_waddr_0;
  wire [15:0] writeAddrDec_1 = 16'h1 << io_waddr_1;
  wire [15:0] writeAddrDec_2 = 16'h1 << io_waddr_2;
  wire        sx_entryWriteEnVec0_0_0 =
    _sx_bankWriteEn_delay_io_out & _sx_bankWriteAddrDec_resp_pipMod_io_out_bits[0];
  wire        sx_entryWriteEnVec0_0_1 =
    _sx_bankWriteEn_delay_1_io_out & _sx_bankWriteAddrDec_resp_pipMod_1_io_out_bits[0];
  wire        sx_entryWriteEnVec0_0_2 =
    _sx_bankWriteEn_delay_2_io_out & _sx_bankWriteAddrDec_resp_pipMod_2_io_out_bits[0];
  wire        sx_entryWriteEnVec0_1_0 =
    _sx_bankWriteEn_delay_io_out & _sx_bankWriteAddrDec_resp_pipMod_io_out_bits[1];
  wire        sx_entryWriteEnVec0_1_1 =
    _sx_bankWriteEn_delay_1_io_out & _sx_bankWriteAddrDec_resp_pipMod_1_io_out_bits[1];
  wire        sx_entryWriteEnVec0_1_2 =
    _sx_bankWriteEn_delay_2_io_out & _sx_bankWriteAddrDec_resp_pipMod_2_io_out_bits[1];
  wire        sx_entryWriteEnVec0_2_0 =
    _sx_bankWriteEn_delay_io_out & _sx_bankWriteAddrDec_resp_pipMod_io_out_bits[2];
  wire        sx_entryWriteEnVec0_2_1 =
    _sx_bankWriteEn_delay_1_io_out & _sx_bankWriteAddrDec_resp_pipMod_1_io_out_bits[2];
  wire        sx_entryWriteEnVec0_2_2 =
    _sx_bankWriteEn_delay_2_io_out & _sx_bankWriteAddrDec_resp_pipMod_2_io_out_bits[2];
  wire        sx_entryWriteEnVec1_0_0 =
    _sx_bankWriteEn_delay_3_io_out & _sx_bankWriteAddrDec_resp_pipMod_3_io_out_bits[0];
  wire        sx_entryWriteEnVec1_0_1 =
    _sx_bankWriteEn_delay_4_io_out & _sx_bankWriteAddrDec_resp_pipMod_4_io_out_bits[0];
  wire        sx_entryWriteEnVec1_0_2 =
    _sx_bankWriteEn_delay_5_io_out & _sx_bankWriteAddrDec_resp_pipMod_5_io_out_bits[0];
  wire        sx_entryWriteEnVec1_1_0 =
    _sx_bankWriteEn_delay_3_io_out & _sx_bankWriteAddrDec_resp_pipMod_3_io_out_bits[1];
  wire        sx_entryWriteEnVec1_1_1 =
    _sx_bankWriteEn_delay_4_io_out & _sx_bankWriteAddrDec_resp_pipMod_4_io_out_bits[1];
  wire        sx_entryWriteEnVec1_1_2 =
    _sx_bankWriteEn_delay_5_io_out & _sx_bankWriteAddrDec_resp_pipMod_5_io_out_bits[1];
  wire        sx_entryWriteEnVec1_2_0 =
    _sx_bankWriteEn_delay_3_io_out & _sx_bankWriteAddrDec_resp_pipMod_3_io_out_bits[2];
  wire        sx_entryWriteEnVec1_2_1 =
    _sx_bankWriteEn_delay_4_io_out & _sx_bankWriteAddrDec_resp_pipMod_4_io_out_bits[2];
  wire        sx_entryWriteEnVec1_2_2 =
    _sx_bankWriteEn_delay_5_io_out & _sx_bankWriteAddrDec_resp_pipMod_5_io_out_bits[2];
  wire        sx_entryWriteEnVec2_0_0 =
    _sx_bankWriteEn_delay_6_io_out & _sx_bankWriteAddrDec_resp_pipMod_6_io_out_bits[0];
  wire        sx_entryWriteEnVec2_0_1 =
    _sx_bankWriteEn_delay_7_io_out & _sx_bankWriteAddrDec_resp_pipMod_7_io_out_bits[0];
  wire        sx_entryWriteEnVec2_0_2 =
    _sx_bankWriteEn_delay_8_io_out & _sx_bankWriteAddrDec_resp_pipMod_8_io_out_bits[0];
  wire        sx_entryWriteEnVec2_1_0 =
    _sx_bankWriteEn_delay_6_io_out & _sx_bankWriteAddrDec_resp_pipMod_6_io_out_bits[1];
  wire        sx_entryWriteEnVec2_1_1 =
    _sx_bankWriteEn_delay_7_io_out & _sx_bankWriteAddrDec_resp_pipMod_7_io_out_bits[1];
  wire        sx_entryWriteEnVec2_1_2 =
    _sx_bankWriteEn_delay_8_io_out & _sx_bankWriteAddrDec_resp_pipMod_8_io_out_bits[1];
  wire        sx_entryWriteEnVec2_2_0 =
    _sx_bankWriteEn_delay_6_io_out & _sx_bankWriteAddrDec_resp_pipMod_6_io_out_bits[2];
  wire        sx_entryWriteEnVec2_2_1 =
    _sx_bankWriteEn_delay_7_io_out & _sx_bankWriteAddrDec_resp_pipMod_7_io_out_bits[2];
  wire        sx_entryWriteEnVec2_2_2 =
    _sx_bankWriteEn_delay_8_io_out & _sx_bankWriteAddrDec_resp_pipMod_8_io_out_bits[2];
  wire        sx_entryWriteEnVec3_0_0 =
    _sx_bankWriteEn_delay_9_io_out & _sx_bankWriteAddrDec_resp_pipMod_9_io_out_bits[0];
  wire        sx_entryWriteEnVec3_0_1 =
    _sx_bankWriteEn_delay_10_io_out & _sx_bankWriteAddrDec_resp_pipMod_10_io_out_bits[0];
  wire        sx_entryWriteEnVec3_0_2 =
    _sx_bankWriteEn_delay_11_io_out & _sx_bankWriteAddrDec_resp_pipMod_11_io_out_bits[0];
  wire        sx_entryWriteEnVec3_1_0 =
    _sx_bankWriteEn_delay_9_io_out & _sx_bankWriteAddrDec_resp_pipMod_9_io_out_bits[1];
  wire        sx_entryWriteEnVec3_1_1 =
    _sx_bankWriteEn_delay_10_io_out & _sx_bankWriteAddrDec_resp_pipMod_10_io_out_bits[1];
  wire        sx_entryWriteEnVec3_1_2 =
    _sx_bankWriteEn_delay_11_io_out & _sx_bankWriteAddrDec_resp_pipMod_11_io_out_bits[1];
  wire        sx_entryWriteEnVec3_2_0 =
    _sx_bankWriteEn_delay_9_io_out & _sx_bankWriteAddrDec_resp_pipMod_9_io_out_bits[2];
  wire        sx_entryWriteEnVec3_2_1 =
    _sx_bankWriteEn_delay_10_io_out & _sx_bankWriteAddrDec_resp_pipMod_10_io_out_bits[2];
  wire        sx_entryWriteEnVec3_2_2 =
    _sx_bankWriteEn_delay_11_io_out & _sx_bankWriteAddrDec_resp_pipMod_11_io_out_bits[2];
  always @(posedge clock) begin
    if (|{sx_entryWriteEnVec0_0_2, sx_entryWriteEnVec0_0_1, sx_entryWriteEnVec0_0_0})
      data_0 <=
        (sx_entryWriteEnVec0_0_0 ? _sx_writeData_resp_pipMod_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec0_0_1 ? _sx_writeData_resp_pipMod_1_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec0_0_2 ? _sx_writeData_resp_pipMod_2_io_out_bits : 24'h0);
    if (|{sx_entryWriteEnVec0_1_2, sx_entryWriteEnVec0_1_1, sx_entryWriteEnVec0_1_0})
      data_1 <=
        (sx_entryWriteEnVec0_1_0 ? _sx_writeData_resp_pipMod_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec0_1_1 ? _sx_writeData_resp_pipMod_1_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec0_1_2 ? _sx_writeData_resp_pipMod_2_io_out_bits : 24'h0);
    if (|{sx_entryWriteEnVec0_2_2, sx_entryWriteEnVec0_2_1, sx_entryWriteEnVec0_2_0})
      data_2 <=
        (sx_entryWriteEnVec0_2_0 ? _sx_writeData_resp_pipMod_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec0_2_1 ? _sx_writeData_resp_pipMod_1_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec0_2_2 ? _sx_writeData_resp_pipMod_2_io_out_bits : 24'h0);
    if (|{sx_entryWriteEnVec1_0_2, sx_entryWriteEnVec1_0_1, sx_entryWriteEnVec1_0_0})
      data_3 <=
        (sx_entryWriteEnVec1_0_0 ? _sx_writeData_resp_pipMod_3_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec1_0_1 ? _sx_writeData_resp_pipMod_4_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec1_0_2 ? _sx_writeData_resp_pipMod_5_io_out_bits : 24'h0);
    if (|{sx_entryWriteEnVec1_1_2, sx_entryWriteEnVec1_1_1, sx_entryWriteEnVec1_1_0})
      data_4 <=
        (sx_entryWriteEnVec1_1_0 ? _sx_writeData_resp_pipMod_3_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec1_1_1 ? _sx_writeData_resp_pipMod_4_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec1_1_2 ? _sx_writeData_resp_pipMod_5_io_out_bits : 24'h0);
    if (|{sx_entryWriteEnVec1_2_2, sx_entryWriteEnVec1_2_1, sx_entryWriteEnVec1_2_0})
      data_5 <=
        (sx_entryWriteEnVec1_2_0 ? _sx_writeData_resp_pipMod_3_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec1_2_1 ? _sx_writeData_resp_pipMod_4_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec1_2_2 ? _sx_writeData_resp_pipMod_5_io_out_bits : 24'h0);
    if (|{sx_entryWriteEnVec2_0_2, sx_entryWriteEnVec2_0_1, sx_entryWriteEnVec2_0_0})
      data_6 <=
        (sx_entryWriteEnVec2_0_0 ? _sx_writeData_resp_pipMod_6_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec2_0_1 ? _sx_writeData_resp_pipMod_7_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec2_0_2 ? _sx_writeData_resp_pipMod_8_io_out_bits : 24'h0);
    if (|{sx_entryWriteEnVec2_1_2, sx_entryWriteEnVec2_1_1, sx_entryWriteEnVec2_1_0})
      data_7 <=
        (sx_entryWriteEnVec2_1_0 ? _sx_writeData_resp_pipMod_6_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec2_1_1 ? _sx_writeData_resp_pipMod_7_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec2_1_2 ? _sx_writeData_resp_pipMod_8_io_out_bits : 24'h0);
    if (|{sx_entryWriteEnVec2_2_2, sx_entryWriteEnVec2_2_1, sx_entryWriteEnVec2_2_0})
      data_8 <=
        (sx_entryWriteEnVec2_2_0 ? _sx_writeData_resp_pipMod_6_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec2_2_1 ? _sx_writeData_resp_pipMod_7_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec2_2_2 ? _sx_writeData_resp_pipMod_8_io_out_bits : 24'h0);
    if (|{sx_entryWriteEnVec3_0_2, sx_entryWriteEnVec3_0_1, sx_entryWriteEnVec3_0_0})
      data_9 <=
        (sx_entryWriteEnVec3_0_0 ? _sx_writeData_resp_pipMod_9_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec3_0_1 ? _sx_writeData_resp_pipMod_10_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec3_0_2 ? _sx_writeData_resp_pipMod_11_io_out_bits : 24'h0);
    if (|{sx_entryWriteEnVec3_1_2, sx_entryWriteEnVec3_1_1, sx_entryWriteEnVec3_1_0})
      data_10 <=
        (sx_entryWriteEnVec3_1_0 ? _sx_writeData_resp_pipMod_9_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec3_1_1 ? _sx_writeData_resp_pipMod_10_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec3_1_2 ? _sx_writeData_resp_pipMod_11_io_out_bits : 24'h0);
    if (|{sx_entryWriteEnVec3_2_2, sx_entryWriteEnVec3_2_1, sx_entryWriteEnVec3_2_0})
      data_11 <=
        (sx_entryWriteEnVec3_2_0 ? _sx_writeData_resp_pipMod_9_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec3_2_1 ? _sx_writeData_resp_pipMod_10_io_out_bits : 24'h0)
        | (sx_entryWriteEnVec3_2_2 ? _sx_writeData_resp_pipMod_11_io_out_bits : 24'h0);
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:8];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'h9; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        data_0 = _RANDOM[4'h0][23:0];
        data_1 = {_RANDOM[4'h0][31:24], _RANDOM[4'h1][15:0]};
        data_2 = {_RANDOM[4'h1][31:16], _RANDOM[4'h2][7:0]};
        data_3 = _RANDOM[4'h2][31:8];
        data_4 = _RANDOM[4'h3][23:0];
        data_5 = {_RANDOM[4'h3][31:24], _RANDOM[4'h4][15:0]};
        data_6 = {_RANDOM[4'h4][31:16], _RANDOM[4'h5][7:0]};
        data_7 = _RANDOM[4'h5][31:8];
        data_8 = _RANDOM[4'h6][23:0];
        data_9 = {_RANDOM[4'h6][31:24], _RANDOM[4'h7][15:0]};
        data_10 = {_RANDOM[4'h7][31:16], _RANDOM[4'h8][7:0]};
        data_11 = _RANDOM[4'h8][31:8];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DelayNWithValid_27 sx_bankWriteAddrDec_resp_pipMod (
    .clock       (clock),
    .io_in_bits  (writeAddrDec_0[2:0]),
    .io_in_valid (io_wen_0),
    .io_out_bits (_sx_bankWriteAddrDec_resp_pipMod_io_out_bits)
  );
  DelayNWithValid_27 sx_bankWriteAddrDec_resp_pipMod_1 (
    .clock       (clock),
    .io_in_bits  (writeAddrDec_1[2:0]),
    .io_in_valid (io_wen_1),
    .io_out_bits (_sx_bankWriteAddrDec_resp_pipMod_1_io_out_bits)
  );
  DelayNWithValid_27 sx_bankWriteAddrDec_resp_pipMod_2 (
    .clock       (clock),
    .io_in_bits  (writeAddrDec_2[2:0]),
    .io_in_valid (io_wen_2),
    .io_out_bits (_sx_bankWriteAddrDec_resp_pipMod_2_io_out_bits)
  );
  DelayN_216 sx_bankWriteEn_delay (
    .clock  (clock),
    .io_in  (io_wen_0 & (|(writeAddrDec_0[2:0]))),
    .io_out (_sx_bankWriteEn_delay_io_out)
  );
  DelayN_216 sx_bankWriteEn_delay_1 (
    .clock  (clock),
    .io_in  (io_wen_1 & (|(writeAddrDec_1[2:0]))),
    .io_out (_sx_bankWriteEn_delay_1_io_out)
  );
  DelayN_216 sx_bankWriteEn_delay_2 (
    .clock  (clock),
    .io_in  (io_wen_2 & (|(writeAddrDec_2[2:0]))),
    .io_out (_sx_bankWriteEn_delay_2_io_out)
  );
  DelayNWithValid_30 sx_writeData_resp_pipMod (
    .clock       (clock),
    .io_in_bits  (io_wdata_0),
    .io_in_valid (io_wen_0),
    .io_out_bits (_sx_writeData_resp_pipMod_io_out_bits)
  );
  DelayNWithValid_30 sx_writeData_resp_pipMod_1 (
    .clock       (clock),
    .io_in_bits  (io_wdata_1),
    .io_in_valid (io_wen_1),
    .io_out_bits (_sx_writeData_resp_pipMod_1_io_out_bits)
  );
  DelayNWithValid_30 sx_writeData_resp_pipMod_2 (
    .clock       (clock),
    .io_in_bits  (io_wdata_2),
    .io_in_valid (io_wen_2),
    .io_out_bits (_sx_writeData_resp_pipMod_2_io_out_bits)
  );
  DelayNWithValid_27 sx_bankWriteAddrDec_resp_pipMod_3 (
    .clock       (clock),
    .io_in_bits  (writeAddrDec_0[5:3]),
    .io_in_valid (io_wen_0),
    .io_out_bits (_sx_bankWriteAddrDec_resp_pipMod_3_io_out_bits)
  );
  DelayNWithValid_27 sx_bankWriteAddrDec_resp_pipMod_4 (
    .clock       (clock),
    .io_in_bits  (writeAddrDec_1[5:3]),
    .io_in_valid (io_wen_1),
    .io_out_bits (_sx_bankWriteAddrDec_resp_pipMod_4_io_out_bits)
  );
  DelayNWithValid_27 sx_bankWriteAddrDec_resp_pipMod_5 (
    .clock       (clock),
    .io_in_bits  (writeAddrDec_2[5:3]),
    .io_in_valid (io_wen_2),
    .io_out_bits (_sx_bankWriteAddrDec_resp_pipMod_5_io_out_bits)
  );
  DelayN_216 sx_bankWriteEn_delay_3 (
    .clock  (clock),
    .io_in  (io_wen_0 & (|(writeAddrDec_0[5:3]))),
    .io_out (_sx_bankWriteEn_delay_3_io_out)
  );
  DelayN_216 sx_bankWriteEn_delay_4 (
    .clock  (clock),
    .io_in  (io_wen_1 & (|(writeAddrDec_1[5:3]))),
    .io_out (_sx_bankWriteEn_delay_4_io_out)
  );
  DelayN_216 sx_bankWriteEn_delay_5 (
    .clock  (clock),
    .io_in  (io_wen_2 & (|(writeAddrDec_2[5:3]))),
    .io_out (_sx_bankWriteEn_delay_5_io_out)
  );
  DelayNWithValid_30 sx_writeData_resp_pipMod_3 (
    .clock       (clock),
    .io_in_bits  (io_wdata_0),
    .io_in_valid (io_wen_0),
    .io_out_bits (_sx_writeData_resp_pipMod_3_io_out_bits)
  );
  DelayNWithValid_30 sx_writeData_resp_pipMod_4 (
    .clock       (clock),
    .io_in_bits  (io_wdata_1),
    .io_in_valid (io_wen_1),
    .io_out_bits (_sx_writeData_resp_pipMod_4_io_out_bits)
  );
  DelayNWithValid_30 sx_writeData_resp_pipMod_5 (
    .clock       (clock),
    .io_in_bits  (io_wdata_2),
    .io_in_valid (io_wen_2),
    .io_out_bits (_sx_writeData_resp_pipMod_5_io_out_bits)
  );
  DelayNWithValid_27 sx_bankWriteAddrDec_resp_pipMod_6 (
    .clock       (clock),
    .io_in_bits  (writeAddrDec_0[8:6]),
    .io_in_valid (io_wen_0),
    .io_out_bits (_sx_bankWriteAddrDec_resp_pipMod_6_io_out_bits)
  );
  DelayNWithValid_27 sx_bankWriteAddrDec_resp_pipMod_7 (
    .clock       (clock),
    .io_in_bits  (writeAddrDec_1[8:6]),
    .io_in_valid (io_wen_1),
    .io_out_bits (_sx_bankWriteAddrDec_resp_pipMod_7_io_out_bits)
  );
  DelayNWithValid_27 sx_bankWriteAddrDec_resp_pipMod_8 (
    .clock       (clock),
    .io_in_bits  (writeAddrDec_2[8:6]),
    .io_in_valid (io_wen_2),
    .io_out_bits (_sx_bankWriteAddrDec_resp_pipMod_8_io_out_bits)
  );
  DelayN_216 sx_bankWriteEn_delay_6 (
    .clock  (clock),
    .io_in  (io_wen_0 & (|(writeAddrDec_0[8:6]))),
    .io_out (_sx_bankWriteEn_delay_6_io_out)
  );
  DelayN_216 sx_bankWriteEn_delay_7 (
    .clock  (clock),
    .io_in  (io_wen_1 & (|(writeAddrDec_1[8:6]))),
    .io_out (_sx_bankWriteEn_delay_7_io_out)
  );
  DelayN_216 sx_bankWriteEn_delay_8 (
    .clock  (clock),
    .io_in  (io_wen_2 & (|(writeAddrDec_2[8:6]))),
    .io_out (_sx_bankWriteEn_delay_8_io_out)
  );
  DelayNWithValid_30 sx_writeData_resp_pipMod_6 (
    .clock       (clock),
    .io_in_bits  (io_wdata_0),
    .io_in_valid (io_wen_0),
    .io_out_bits (_sx_writeData_resp_pipMod_6_io_out_bits)
  );
  DelayNWithValid_30 sx_writeData_resp_pipMod_7 (
    .clock       (clock),
    .io_in_bits  (io_wdata_1),
    .io_in_valid (io_wen_1),
    .io_out_bits (_sx_writeData_resp_pipMod_7_io_out_bits)
  );
  DelayNWithValid_30 sx_writeData_resp_pipMod_8 (
    .clock       (clock),
    .io_in_bits  (io_wdata_2),
    .io_in_valid (io_wen_2),
    .io_out_bits (_sx_writeData_resp_pipMod_8_io_out_bits)
  );
  DelayNWithValid_27 sx_bankWriteAddrDec_resp_pipMod_9 (
    .clock       (clock),
    .io_in_bits  (writeAddrDec_0[11:9]),
    .io_in_valid (io_wen_0),
    .io_out_bits (_sx_bankWriteAddrDec_resp_pipMod_9_io_out_bits)
  );
  DelayNWithValid_27 sx_bankWriteAddrDec_resp_pipMod_10 (
    .clock       (clock),
    .io_in_bits  (writeAddrDec_1[11:9]),
    .io_in_valid (io_wen_1),
    .io_out_bits (_sx_bankWriteAddrDec_resp_pipMod_10_io_out_bits)
  );
  DelayNWithValid_27 sx_bankWriteAddrDec_resp_pipMod_11 (
    .clock       (clock),
    .io_in_bits  (writeAddrDec_2[11:9]),
    .io_in_valid (io_wen_2),
    .io_out_bits (_sx_bankWriteAddrDec_resp_pipMod_11_io_out_bits)
  );
  DelayN_216 sx_bankWriteEn_delay_9 (
    .clock  (clock),
    .io_in  (io_wen_0 & (|(writeAddrDec_0[11:9]))),
    .io_out (_sx_bankWriteEn_delay_9_io_out)
  );
  DelayN_216 sx_bankWriteEn_delay_10 (
    .clock  (clock),
    .io_in  (io_wen_1 & (|(writeAddrDec_1[11:9]))),
    .io_out (_sx_bankWriteEn_delay_10_io_out)
  );
  DelayN_216 sx_bankWriteEn_delay_11 (
    .clock  (clock),
    .io_in  (io_wen_2 & (|(writeAddrDec_2[11:9]))),
    .io_out (_sx_bankWriteEn_delay_11_io_out)
  );
  DelayNWithValid_30 sx_writeData_resp_pipMod_9 (
    .clock       (clock),
    .io_in_bits  (io_wdata_0),
    .io_in_valid (io_wen_0),
    .io_out_bits (_sx_writeData_resp_pipMod_9_io_out_bits)
  );
  DelayNWithValid_30 sx_writeData_resp_pipMod_10 (
    .clock       (clock),
    .io_in_bits  (io_wdata_1),
    .io_in_valid (io_wen_1),
    .io_out_bits (_sx_writeData_resp_pipMod_10_io_out_bits)
  );
  DelayNWithValid_30 sx_writeData_resp_pipMod_11 (
    .clock       (clock),
    .io_in_bits  (io_wdata_2),
    .io_in_valid (io_wen_2),
    .io_out_bits (_sx_writeData_resp_pipMod_11_io_out_bits)
  );
  assign io_violationMmask_0_0 =
    io_violationMdata_0[23:2] == data_0[23:2]
    & (io_violationCheckLine_0 | io_violationMdata_0[1:0] == data_0[1:0]);
  assign io_violationMmask_0_1 =
    io_violationMdata_0[23:2] == data_1[23:2]
    & (io_violationCheckLine_0 | io_violationMdata_0[1:0] == data_1[1:0]);
  assign io_violationMmask_0_2 =
    io_violationMdata_0[23:2] == data_2[23:2]
    & (io_violationCheckLine_0 | io_violationMdata_0[1:0] == data_2[1:0]);
  assign io_violationMmask_0_3 =
    io_violationMdata_0[23:2] == data_3[23:2]
    & (io_violationCheckLine_0 | io_violationMdata_0[1:0] == data_3[1:0]);
  assign io_violationMmask_0_4 =
    io_violationMdata_0[23:2] == data_4[23:2]
    & (io_violationCheckLine_0 | io_violationMdata_0[1:0] == data_4[1:0]);
  assign io_violationMmask_0_5 =
    io_violationMdata_0[23:2] == data_5[23:2]
    & (io_violationCheckLine_0 | io_violationMdata_0[1:0] == data_5[1:0]);
  assign io_violationMmask_0_6 =
    io_violationMdata_0[23:2] == data_6[23:2]
    & (io_violationCheckLine_0 | io_violationMdata_0[1:0] == data_6[1:0]);
  assign io_violationMmask_0_7 =
    io_violationMdata_0[23:2] == data_7[23:2]
    & (io_violationCheckLine_0 | io_violationMdata_0[1:0] == data_7[1:0]);
  assign io_violationMmask_0_8 =
    io_violationMdata_0[23:2] == data_8[23:2]
    & (io_violationCheckLine_0 | io_violationMdata_0[1:0] == data_8[1:0]);
  assign io_violationMmask_0_9 =
    io_violationMdata_0[23:2] == data_9[23:2]
    & (io_violationCheckLine_0 | io_violationMdata_0[1:0] == data_9[1:0]);
  assign io_violationMmask_0_10 =
    io_violationMdata_0[23:2] == data_10[23:2]
    & (io_violationCheckLine_0 | io_violationMdata_0[1:0] == data_10[1:0]);
  assign io_violationMmask_0_11 =
    io_violationMdata_0[23:2] == data_11[23:2]
    & (io_violationCheckLine_0 | io_violationMdata_0[1:0] == data_11[1:0]);
  assign io_violationMmask_1_0 =
    io_violationMdata_1[23:2] == data_0[23:2]
    & (io_violationCheckLine_1 | io_violationMdata_1[1:0] == data_0[1:0]);
  assign io_violationMmask_1_1 =
    io_violationMdata_1[23:2] == data_1[23:2]
    & (io_violationCheckLine_1 | io_violationMdata_1[1:0] == data_1[1:0]);
  assign io_violationMmask_1_2 =
    io_violationMdata_1[23:2] == data_2[23:2]
    & (io_violationCheckLine_1 | io_violationMdata_1[1:0] == data_2[1:0]);
  assign io_violationMmask_1_3 =
    io_violationMdata_1[23:2] == data_3[23:2]
    & (io_violationCheckLine_1 | io_violationMdata_1[1:0] == data_3[1:0]);
  assign io_violationMmask_1_4 =
    io_violationMdata_1[23:2] == data_4[23:2]
    & (io_violationCheckLine_1 | io_violationMdata_1[1:0] == data_4[1:0]);
  assign io_violationMmask_1_5 =
    io_violationMdata_1[23:2] == data_5[23:2]
    & (io_violationCheckLine_1 | io_violationMdata_1[1:0] == data_5[1:0]);
  assign io_violationMmask_1_6 =
    io_violationMdata_1[23:2] == data_6[23:2]
    & (io_violationCheckLine_1 | io_violationMdata_1[1:0] == data_6[1:0]);
  assign io_violationMmask_1_7 =
    io_violationMdata_1[23:2] == data_7[23:2]
    & (io_violationCheckLine_1 | io_violationMdata_1[1:0] == data_7[1:0]);
  assign io_violationMmask_1_8 =
    io_violationMdata_1[23:2] == data_8[23:2]
    & (io_violationCheckLine_1 | io_violationMdata_1[1:0] == data_8[1:0]);
  assign io_violationMmask_1_9 =
    io_violationMdata_1[23:2] == data_9[23:2]
    & (io_violationCheckLine_1 | io_violationMdata_1[1:0] == data_9[1:0]);
  assign io_violationMmask_1_10 =
    io_violationMdata_1[23:2] == data_10[23:2]
    & (io_violationCheckLine_1 | io_violationMdata_1[1:0] == data_10[1:0]);
  assign io_violationMmask_1_11 =
    io_violationMdata_1[23:2] == data_11[23:2]
    & (io_violationCheckLine_1 | io_violationMdata_1[1:0] == data_11[1:0]);
endmodule

