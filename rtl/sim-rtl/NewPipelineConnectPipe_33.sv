// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module NewPipelineConnectPipe_33(
  input         clock,
  input         reset,
  output        io_in_ready,
  input         io_in_valid,
  input  [63:0] io_in_bits_vaddr,
  input  [49:0] io_in_bits_basevaddr,
  input  [15:0] io_in_bits_mask,
  input  [2:0]  io_in_bits_alignedType,
  input         io_in_bits_vecActive,
  input         io_in_bits_uop_exceptionVec_6,
  input  [3:0]  io_in_bits_uop_trigger,
  input  [8:0]  io_in_bits_uop_fuOpType,
  input  [7:0]  io_in_bits_uop_vpu_vstart,
  input  [1:0]  io_in_bits_uop_vpu_veew,
  input  [6:0]  io_in_bits_uop_uopIdx,
  input         io_in_bits_uop_robIdx_flag,
  input  [5:0]  io_in_bits_uop_robIdx_value,
  input         io_in_bits_uop_sqIdx_flag,
  input  [4:0]  io_in_bits_uop_sqIdx_value,
  input  [2:0]  io_in_bits_mBIndex,
  input  [7:0]  io_in_bits_elemIdx,
  input         io_out_ready,
  output        io_out_valid,
  output [63:0] io_out_bits_vaddr,
  output [49:0] io_out_bits_basevaddr,
  output [15:0] io_out_bits_mask,
  output [2:0]  io_out_bits_alignedType,
  output        io_out_bits_vecActive,
  output        io_out_bits_uop_exceptionVec_6,
  output [3:0]  io_out_bits_uop_trigger,
  output [8:0]  io_out_bits_uop_fuOpType,
  output [7:0]  io_out_bits_uop_vpu_vstart,
  output [1:0]  io_out_bits_uop_vpu_veew,
  output [6:0]  io_out_bits_uop_uopIdx,
  output        io_out_bits_uop_robIdx_flag,
  output [5:0]  io_out_bits_uop_robIdx_value,
  output        io_out_bits_uop_sqIdx_flag,
  output [4:0]  io_out_bits_uop_sqIdx_value,
  output [2:0]  io_out_bits_mBIndex,
  output [7:0]  io_out_bits_elemIdx,
  input         io_rightOutFire,
  input         io_isFlush
);

  reg         valid;
  wire        io_in_ready_0 = io_out_ready | ~valid;
  wire        _data_T = io_in_ready_0 & io_in_valid;
  reg  [63:0] data_vaddr;
  reg  [49:0] data_basevaddr;
  reg  [15:0] data_mask;
  reg  [2:0]  data_alignedType;
  reg         data_vecActive;
  reg         data_uop_exceptionVec_6;
  reg  [3:0]  data_uop_trigger;
  reg  [8:0]  data_uop_fuOpType;
  reg  [7:0]  data_uop_vpu_vstart;
  reg  [1:0]  data_uop_vpu_veew;
  reg  [6:0]  data_uop_uopIdx;
  reg         data_uop_robIdx_flag;
  reg  [5:0]  data_uop_robIdx_value;
  reg         data_uop_sqIdx_flag;
  reg  [4:0]  data_uop_sqIdx_value;
  reg  [2:0]  data_mBIndex;
  reg  [7:0]  data_elemIdx;
  always @(posedge clock or posedge reset) begin
    if (reset)
      valid <= 1'h0;
    else
      valid <= ~io_isFlush & (_data_T | ~io_rightOutFire & valid);
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_data_T) begin
      data_vaddr <= io_in_bits_vaddr;
      data_basevaddr <= io_in_bits_basevaddr;
      data_mask <= io_in_bits_mask;
      data_alignedType <= io_in_bits_alignedType;
      data_vecActive <= io_in_bits_vecActive;
      data_uop_exceptionVec_6 <= io_in_bits_uop_exceptionVec_6;
      data_uop_trigger <= io_in_bits_uop_trigger;
      data_uop_fuOpType <= io_in_bits_uop_fuOpType;
      data_uop_vpu_vstart <= io_in_bits_uop_vpu_vstart;
      data_uop_vpu_veew <= io_in_bits_uop_vpu_veew;
      data_uop_uopIdx <= io_in_bits_uop_uopIdx;
      data_uop_robIdx_flag <= io_in_bits_uop_robIdx_flag;
      data_uop_robIdx_value <= io_in_bits_uop_robIdx_value;
      data_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      data_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      data_mBIndex <= io_in_bits_mBIndex;
      data_elemIdx <= io_in_bits_elemIdx;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:44];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h2D; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        valid = _RANDOM[6'h0][0];
        data_vaddr = {_RANDOM[6'h0][31:1], _RANDOM[6'h1], _RANDOM[6'h2][0]};
        data_basevaddr = {_RANDOM[6'h2][31:1], _RANDOM[6'h3][18:0]};
        data_mask = {_RANDOM[6'h3][31:19], _RANDOM[6'h4][2:0]};
        data_alignedType = _RANDOM[6'h4][11:9];
        data_vecActive = _RANDOM[6'h4][12];
        data_uop_exceptionVec_6 = _RANDOM[6'h7][17];
        data_uop_trigger = _RANDOM[6'h8][8:5];
        data_uop_fuOpType = _RANDOM[6'hA][30:22];
        data_uop_vpu_vstart = _RANDOM[6'hD][15:8];
        data_uop_vpu_veew = _RANDOM[6'h12][16:15];
        data_uop_uopIdx = {_RANDOM[6'h12][31:30], _RANDOM[6'h13][4:0]};
        data_uop_robIdx_flag = _RANDOM[6'h16][24];
        data_uop_robIdx_value = _RANDOM[6'h16][30:25];
        data_uop_sqIdx_flag = _RANDOM[6'h2C][5];
        data_uop_sqIdx_value = _RANDOM[6'h2C][10:6];
        data_mBIndex = _RANDOM[6'h2C][21:19];
        data_elemIdx = _RANDOM[6'h2C][29:22];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        valid = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = io_in_ready_0;
  assign io_out_valid = valid;
  assign io_out_bits_vaddr = data_vaddr;
  assign io_out_bits_basevaddr = data_basevaddr;
  assign io_out_bits_mask = data_mask;
  assign io_out_bits_alignedType = data_alignedType;
  assign io_out_bits_vecActive = data_vecActive;
  assign io_out_bits_uop_exceptionVec_6 = data_uop_exceptionVec_6;
  assign io_out_bits_uop_trigger = data_uop_trigger;
  assign io_out_bits_uop_fuOpType = data_uop_fuOpType;
  assign io_out_bits_uop_vpu_vstart = data_uop_vpu_vstart;
  assign io_out_bits_uop_vpu_veew = data_uop_vpu_veew;
  assign io_out_bits_uop_uopIdx = data_uop_uopIdx;
  assign io_out_bits_uop_robIdx_flag = data_uop_robIdx_flag;
  assign io_out_bits_uop_robIdx_value = data_uop_robIdx_value;
  assign io_out_bits_uop_sqIdx_flag = data_uop_sqIdx_flag;
  assign io_out_bits_uop_sqIdx_value = data_uop_sqIdx_value;
  assign io_out_bits_mBIndex = data_mBIndex;
  assign io_out_bits_elemIdx = data_elemIdx;
endmodule

