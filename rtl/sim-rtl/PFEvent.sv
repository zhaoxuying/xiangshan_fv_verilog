// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module PFEvent(
  input         clock,
  input         reset,
  input         io_distribute_csr_w_valid,
  input  [11:0] io_distribute_csr_w_bits_addr,
  input  [63:0] io_distribute_csr_w_bits_data,
  output [63:0] io_hpmevent_0,
  output [63:0] io_hpmevent_1,
  output [63:0] io_hpmevent_2,
  output [63:0] io_hpmevent_3,
  output [63:0] io_hpmevent_4,
  output [63:0] io_hpmevent_5,
  output [63:0] io_hpmevent_6,
  output [63:0] io_hpmevent_7,
  output [63:0] io_hpmevent_8,
  output [63:0] io_hpmevent_9,
  output [63:0] io_hpmevent_10,
  output [63:0] io_hpmevent_11,
  output [63:0] io_hpmevent_12,
  output [63:0] io_hpmevent_13,
  output [63:0] io_hpmevent_14,
  output [63:0] io_hpmevent_15,
  output [63:0] io_hpmevent_16,
  output [63:0] io_hpmevent_17,
  output [63:0] io_hpmevent_18,
  output [63:0] io_hpmevent_19,
  output [63:0] io_hpmevent_20,
  output [63:0] io_hpmevent_21,
  output [63:0] io_hpmevent_22,
  output [63:0] io_hpmevent_23
);

  perfEventsModule perfEvents_0 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h323),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_0)
  );
  perfEventsModule perfEvents_1 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h324),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_1)
  );
  perfEventsModule perfEvents_2 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h325),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_2)
  );
  perfEventsModule perfEvents_3 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h326),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_3)
  );
  perfEventsModule perfEvents_4 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h327),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_4)
  );
  perfEventsModule perfEvents_5 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h328),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_5)
  );
  perfEventsModule perfEvents_6 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h329),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_6)
  );
  perfEventsModule perfEvents_7 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h32A),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_7)
  );
  perfEventsModule perfEvents_8 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h32B),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_8)
  );
  perfEventsModule perfEvents_9 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h32C),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_9)
  );
  perfEventsModule perfEvents_10 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h32D),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_10)
  );
  perfEventsModule perfEvents_11 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h32E),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_11)
  );
  perfEventsModule perfEvents_12 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h32F),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_12)
  );
  perfEventsModule perfEvents_13 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h330),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_13)
  );
  perfEventsModule perfEvents_14 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h331),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_14)
  );
  perfEventsModule perfEvents_15 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h332),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_15)
  );
  perfEventsModule perfEvents_16 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h333),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_16)
  );
  perfEventsModule perfEvents_17 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h334),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_17)
  );
  perfEventsModule perfEvents_18 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h335),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_18)
  );
  perfEventsModule perfEvents_19 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h336),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_19)
  );
  perfEventsModule perfEvents_20 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h337),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_20)
  );
  perfEventsModule perfEvents_21 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h338),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_21)
  );
  perfEventsModule perfEvents_22 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h339),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_22)
  );
  perfEventsModule perfEvents_23 (
    .clock   (clock),
    .reset   (reset),
    .w_wen   (io_distribute_csr_w_valid & io_distribute_csr_w_bits_addr == 12'h33A),
    .w_wdata (io_distribute_csr_w_bits_data),
    .rdata   (io_hpmevent_23)
  );
endmodule

